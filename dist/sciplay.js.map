{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8f81d33bcad093518796","webpack:///(webpack)/hot/dev-server.js","webpack:///./src/extras/polyfills.js","webpack:///./src/sciplay.js","webpack:///./src/math/Vector.js","webpack:///./src/math/math.js","webpack:///./src/geometries/Ray.js","webpack:///./src/system/System.js","webpack:///./src/geometries/SpatialHash.js","webpack:///./src/collision/Broadphase.js","webpack:///./src/collision/Pair.js","webpack:///./src/collision/Narrowphase.js","webpack:///./src/collision/SAT.js","webpack:///./src/collision/Collision.js","webpack:///./src/collision/Solver.js","webpack:///./src/constraints/Constraint.js","webpack:///./src/constraints/BoundaryConstraint.js","webpack:///./src/constants/CONSTANTS.js","webpack:///./src/renderer/Renderer.js","webpack:///./src/bodies/Rect.js","webpack:///./src/bodies/Body.js","webpack:///./src/extras/materials.json","webpack:///./src/geometries/AABB.js","webpack:///./src/bodies/Wave.js","webpack:///./src/bodies/Circle.js","webpack:///./src/bodies/Polygon.js","webpack:///./src/geometries/Anchor.js","webpack:///./src/constraints/LinkConstraint.js","webpack:///./src/collision/GJK.js","webpack:///./src/collision/Simplex.js","webpack:///./src/collision/collisionTypes.js"],"names":["lastTime","vendors","x","length","window","requestAnimationFrame","cancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","constants","sciplay","Vector","vector","renderer","ray","system","wave","rect","anchor","polygon","circle","collisionTypes","boundaryConstraint","linkConstraint","dev","GJK","y","prototype","clone","set","prop","val","add","vec","subtract","multiply","magnitude","sqrt","magnitudeSq","negate","rotate","angle","sin","cos","dot","cross","angleTo","a","b","d","theta","acos","getAngle","mode","atan","atan2","PI","normalize","mag","perp","side","tmp","distanceTo","scalarProject","scalarProjectUnit","vectorProject","scalarComp","vectorProjectUnit","translate","v1","v2","angleBetween","v","degToRad","radToDeg","distance","x1","y1","x2","y2","map","value","low1","high1","low2","high2","Ray","init","dir","degrees","origin","direction","invDirection","outerBodies","t","innerWidth","innerHeight","x0","y0","slope","numTests","trace","intersectionPoint","intersectingBody","intersectingSegment","rayID","currentRayId","intersectHash","hash","intersectCircle","radius","f","position","c","desc","t1","t2","ix","iy","updateIntersectionPoint","intersectPolygon","poly","isPointInterior","push","vertices","vertLength","intersection","forEach","vert","index","verts","seg2","intersectSegment","intPoint","segVec","seg","r","p","q","s","rxs","tNum","uNum","u","px","py","rx","ry","bucket","row","col","X","Y","tMaxX","tMaxY","tDeltaX","tDeltaY","stepX","stepY","cellSize","abs","numRows","numCols","debug","ctx","beginPath","globalAlpha","strokeStyle","lineWidth","strokeRect","contents","body","intersectionPoints","status","hitsAABB","intersectAABB","aabb","type","segVeg","undefined","hashCoordinates","tx1","min","tx2","tmin","tmax","ty1","ty2","didHit","R","Object","create","System","loop","params","_gravityOn","frames","waves","childWaves","bodies","points","anchors","width","height","nextBodyId","collisions","constraints","collideBoundary","console","log","calculateCellSize","initializeHash","_gravity","gravity","LIGHT","broadphase","narrowphase","solver","worldForce","divisor","floor","addChildWave","addObject","obj","addForce","Error","o","remove","idx","indexOf","splice","_integratePosition","dt","static","update","_populateGrid","insertBody","_updateWorldForces","worldForceNeedsSet","setForce","worldForceNeedsUpdate","_getCollisionPairs","pairs","getCollisionPairs","keys","checkForCollisions","clear","solve","traverseWaves","children","child","addWorldForce","setWorldForce","defineProperty","get","isOn","gravDiff","SpatialHash","ceil","point","updateBody","removeBody","queryBody","nearby","queryPoint","h","Broadphase","aabbOverlap","body1","body2","overlap","canCollide","collisionCounter","collisionPairs","i","j","otherBody","Pair","b1","b2","pair","Narrowphase","collision","intersect","colliderList","n","SAT","projectBody","axis","scaledRadius","lineOverlap","p1min","p1max","p2min","p2max","polycircle","polypoly","circlecircle","c1","c2","rplusr","c2toc1","p1","p2","axes","smallestOverlap","MTVAxis","numVerts1","numVerts2","p1Projection","p2Projection","p2top1","vc","pProjection","cProjection","b2tob1","Collision","mtv","mtvaxis","penetration","Solver","INELASTIC","ELASTIC","getCollisionType","collisionType","solveCollision","resolutionVector","damping","positionPrev","e","restitution","updateVertices","solveCollisions","solveConstraints","Constraint","bounds","forces","constraint","C","minX","minY","maxX","maxY","setX","setY","GRAVITY","MEDIUM","HEAVY","MATERIALS","Rock","density","Wood","Metal","BouncyBall","SuperBall","Pillow","Static","math","Renderer","clearBackground","background","borderColor","canvas","document","createElement","appendChild","getElementById","getContext","fillStyle","fillRect","frameTimestep","fps","resize","drawPoint","ellipse","stroke","drawConstraints","drawConstraint","moveTo","centroid","lineTo","drawBodies","drawBody","pct","cx","cy","rotation","w","style","lineJoin","closePath","fill","drawWave","intensity","run","self","lastTick","animate","_requestID","time","tick","elapsedTime","render","drawBackground","clearRect","setSize","stop","start","options","B","_mode","inertia","mass","invInertia","m","warn","bx","by","Body","constructor","_mass","invMass","positionImpulse","interpolatedPosition","velocity","force","torque","_scale","_rotation","interpolatedRotation","rotationPrev","angularVelocity","refractiveIndex","material","materialColor","mirror","error","freeze","setPosition","unfreeze","vertex","relVert","_relativeVertices","setRotation","deltaTimeSquared","velocityPrevX","velocityPrevY","scaleFactor","AABB","findMinMax","minx","miny","maxx","maxy","contains","ab","Wave","speedOfLight","opacity","waveSpeed","frequency","wavelength","parent","n1","n2","lastIntersection","createChildren","normal","bType","intSeg","normals","that","tmpTerm","tmpVec","rVec","theta1","theta2","asin","sin2theta2","tVec","normCopy","_r0","R0","_r0tmp","pow","T","RI","TI","rVecAngle","tVecAngle","reflectedWave","refractedWave","W","inside","vi","vj","xi","yi","xj","yj","Anchor","dist","fext","lambda","pc","pointPoly","simplex","randVertex","random","evolve","searchVector","getSearchDirection","supportIndex","calculateSupportPoint","line","support","vertexC","maxValue","getVoronoiRegions","Simplex","count","vertexA","simplexVertex","vertexB","getSupportPoint","edgeAB","getClosestPoint","getWitnessPoints","point1","point2","solve2","P","solve3","index1","index2","STATIC"],"mappings":"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","file":"sciplay.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sciplay\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sciplay\"] = factory();\n\telse\n\t\troot[\"sciplay\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8f81d33bcad093518796","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n/*globals window __webpack_hash__ */\r\nif(module.hot) {\r\n\tvar lastData;\r\n\tvar upToDate = function upToDate() {\r\n\t\treturn lastData.indexOf(__webpack_hash__) >= 0;\r\n\t};\r\n\tvar check = function check() {\r\n\t\tmodule.hot.check(true, function(err, updatedModules) {\r\n\t\t\tif(err) {\r\n\t\t\t\tif(module.hot.status() in {\r\n\t\t\t\t\t\tabort: 1,\r\n\t\t\t\t\t\tfail: 1\r\n\t\t\t\t\t}) {\r\n\t\t\t\t\tconsole.warn(\"[HMR] Cannot apply update. Need to do a full reload!\");\r\n\t\t\t\t\tconsole.warn(\"[HMR] \" + err.stack || err.message);\r\n\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"[HMR] Update failed: \" + err.stack || err.message);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(!updatedModules) {\r\n\t\t\t\tconsole.warn(\"[HMR] Cannot find update. Need to do a full reload!\");\r\n\t\t\t\tconsole.warn(\"[HMR] (Probably because of restarting the webpack-dev-server)\");\r\n\t\t\t\twindow.location.reload();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(!upToDate()) {\r\n\t\t\t\tcheck();\r\n\t\t\t}\r\n\r\n\t\t\trequire(\"./log-apply-result\")(updatedModules, updatedModules);\r\n\r\n\t\t\tif(upToDate()) {\r\n\t\t\t\tconsole.log(\"[HMR] App is up to date.\");\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t};\r\n\tvar addEventListener = window.addEventListener ? function(eventName, listener) {\r\n\t\twindow.addEventListener(eventName, listener, false);\r\n\t} : function(eventName, listener) {\r\n\t\twindow.attachEvent(\"on\" + eventName, listener);\r\n\t};\r\n\taddEventListener(\"message\", function(event) {\r\n\t\tif(typeof event.data === \"string\" && event.data.indexOf(\"webpackHotUpdate\") === 0) {\r\n\t\t\tlastData = event.data;\r\n\t\t\tif(!upToDate() && module.hot.status() === \"idle\") {\r\n\t\t\t\tconsole.log(\"[HMR] Checking for updates on the server...\");\r\n\t\t\t\tcheck();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tconsole.log(\"[HMR] Waiting for update signal from WDS...\");\r\n} else {\r\n\tthrow new Error(\"[HMR] Hot Module Replacement is disabled.\");\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/hot/dev-server.js\n// module id = 1\n// module chunks = 0","/* eslint \"max-len\": \"off\" */\n// Request animation frame shim\n(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/extras/polyfills.js","/* MATH OBJECTS */\nimport vector, {Vector} from './math/Vector';\nimport ray from './geometries/Ray';\n\n/* CORE OBJECTS */\nimport system from './system/System';\nimport renderer from './renderer/Renderer';\n\n/* BODIES */\nimport rect from './bodies/Rect';\nimport wave from './bodies/Wave';\nimport circle from './bodies/Circle';\nimport polygon from './bodies/Polygon';\nimport anchor from './geometries/Anchor';\nimport * as constants from './constants/CONSTANTS';\n\n/* Constraints */\nimport boundaryConstraint from './constraints/BoundaryConstraint';\nimport linkConstraint from './constraints/LinkConstraint';\n\nimport GJK from './collision/GJK';\n\n/* CONSTANTS */\nimport collisionTypes from './collision/collisionTypes.js';\n\nlet sciplay = function() {\n    return {\n        Vector, // for operations that return a new vector\n        vector, // actual vector constructor\n        renderer,\n        ray,\n        system,\n        wave,\n        rect,\n        anchor,\n        polygon,\n        circle,\n        collisionTypes,\n        constants,\n        boundaryConstraint,\n        linkConstraint,\n        dev: {\n            GJK\n        }\n    };\n};\n\nexport default sciplay;\n\n\n\n// WEBPACK FOOTER //\n// ./src/sciplay.js","/**\n * Generic Vector class\n *\n *\n * @example\n * import vector, {Vector} from 'Vector';\n *\n * Instantiate new objects in the following ways\n *  1. use vector convenience function like so: vector(x, y);\n *  2. use Vector object directly like: new Vector(x, y);\n *\n * Methods on a newly created vector, such as .add or .subtract\n * modify the x and y properties on that vector, changing them forever\n * i.e.\n *      let vec1 = vector(0, 0);\n *      let vec2 = vector(10, 20);\n *      vec1.add(vec2);\n *\n * Results in vec1.x = 10 and vec1.y = 20.  vec2 is unmodified\n *\n * To perform an operation on two vectors and return a new vector,\n * without modifying the input vectors, use the methods on {Vector}\n * i.e.\n *      let vec1 = vector(0, 0);\n *      let vec2 = vector(10, 20);\n *      let vec3 = Vector.add(vec1, vec2);\n *\n * Results in vec1 and vec2 remining unmodified,\n * and vec3.x = 10 and vec3.y = 20\n *\n */\n\nimport {radToDeg} from './math';\n\n/**\n * Base Vector constructor\n * @constructor\n * @param {number} x - x coordinate\n * @param {number} y - y coordinate\n */\nexport const Vector = function(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n};\n\n/**\n * Prototype object for all Vectors\n */\nVector.prototype = {\n    /**\n     * Return a copy of a vector\n     * @method\n     * @return {Vector} a new vector object\n     */\n    clone: function() {\n        return new Vector(this.x, this.y);\n    },\n\n    /**\n     * Generic Setter\n     * @method\n     * @param {string} prop - property to set\n     * @param {*} val - value to set\n     * @return {This} for chaining\n     */\n    set: function(prop, val) {\n        if (prop === 'x') {\n            this.x = val;\n        } else if (prop === 'y') {\n            this.y = val;\n        }\n        return this;\n    },\n\n    /**\n     * Add another vector to this vector, modifying internal\n     * properties\n     * @method\n     * @param {Vector} vec - vector to add\n     * @return {This} for chaining\n     */\n    add: function(...args) {\n        let x, y;\n        if (args.length === 1) {\n            let vec = args[0];\n            if (typeof vec === 'object') {\n                x = vec.x;\n                y = vec.y;\n            }\n        } else if (args.length === 2) {\n            if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n                x = args[0];\n                y = args[1];\n            }\n        }\n\n        this.x += x;\n        this.y += y;\n\n        return this;\n    },\n\n    /**\n     * Subtract another vector from this vector\n     * @method\n     * @param {Vector} vec - vector to subtract\n     * @return {This} for chaining\n     */\n    subtract: function(vec) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        return this;\n    },\n\n    /**\n     * Multiply another vector by this vector or scalar\n     * modifies internal properties\n     * @param {Vector|number} vec - either Vector object or single scalar\n     * @return {This} for chaining\n     */\n    multiply: function(vec) {\n        if (typeof vec === 'object') {\n            this.x *= vec.x;\n            this.y *= vec.y;\n        } else if (typeof vec === 'number') {\n            this.x *= vec;\n            this.y *= vec;\n        }\n\n        return this;\n    },\n\n    /**\n     * Gives the magnitude (length, essentially) of the vector\n     * @method\n     * @return {number} magnitude of the vector\n     */\n    magnitude: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    /**\n     * Magnitude squared - useful when trying to save on computation\n     * @method\n     * @return {number} mag squared\n     */\n    magnitudeSq: function() {\n        return this.x * this.x + this.y * this.y;\n    },\n\n    /**\n     * Negate both x and y values (essentially rotate vector 180 degrees)\n     * @method\n     * @return {Vector} for method chaining\n     */\n    negate: function() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    },\n\n    /**\n     * Translate to specified x and y points\n     * @param {number} x - amount to move in the x\n     * @param {number} y - amount to move in the y\n     * @return {This} for chaining\n     */\n    // translate:\n    // function(x, y) {\n    //     this.x += x;\n    //     this.y += y;\n    //     return this;\n    // },\n\n    /**\n     * Rotate vector around specified point of rotation\n     * Note: Will rotate around origin\n     * @param {number} angle - amount of rotation in radians\n     * @return {This} for chaining\n     */\n    rotate: function(angle) {\n        let sin = Math.sin(angle);\n        let cos = Math.cos(angle);\n        let x = (this.x * cos) - (this.y * sin);\n        let y = (this.x * sin) + (this.y * cos);\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    /**\n     * Dot product between two vectors\n     * Does NOT modify internal state\n     * @param {Vector} vec - the vector to dot with\n     * @return {number} dot product\n     */\n    dot: function(vec) {\n        return this.x * vec.x + this.y * vec.y;\n    },\n\n    /**\n     * Cross product between two vectors\n     * Does NOT modify internal state\n     * @method\n     * @param {Vector} vec - the vec to cross with\n     * @return {number} cross product\n     */\n    cross: function(vec) {\n        return this.x * vec.y - this.y * vec.x;\n    },\n\n    /**\n     * Return angle between two vectors in radians\n     * @param {Vector} vec - vector to find angle to\n     * @return {number} theta - radians between two vectors\n     */\n    angleTo: function(vec) {\n        let a = this.magnitude();\n        let b = vec.magnitude();\n        let d = this.dot(vec);\n\n        let theta = Math.acos(d / (a * b));\n        return theta;\n    },\n\n    /**\n     * Return angle from 0 of this vector\n     * @method\n     * @param {string} [mode] - if mode = 'DEGREES', return value will be in\n     * degrees, otherwise radians\n     * @return {number} angle in degrees or radians (depending on mode)\n     *\n     */\n    getAngle: function(mode) {\n        if (mode === 'DEGREES') {\n            return radToDeg(Math.atan(this.y / this.x));\n        }\n        let a = Math.atan2(this.y, this.x);\n        //return a;\n        return a < 0 ? Math.PI * 2 + a : a;\n    },\n\n    /**\n     * Convert to a unit vector\n     * i.e. change length of vector to 1\n     * @method\n     * @return {This} for chaining\n     */\n    normalize: function() {\n        let mag = this.magnitude();\n        this.x /= mag;\n        this.y /= mag;\n        return this;\n    },\n\n    /**\n     * Create normal vector based on current vector\n     * Modifies internal state!\n     * @param {string} side - specify 'left' or 'right' normal\n     * @return {This} for chaining\n     */\n    perp: function(side) {\n        if (side === 'right') {\n            let tmp = this.x;\n            this.x = this.y;\n            this.y = -tmp;\n        } else {\n            let tmp = this.x;\n            this.x = -this.y;\n            this.y = tmp;\n        }\n        return this;\n    },\n\n    /**\n     * Calculate euclidian distance between two vectors\n     * @param {Vector} vec - vector to find distance to\n     * @return {number} euclidean distance\n     */\n    distanceTo: function(vec) {\n        return Math.sqrt((vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y));\n    },\n\n    /**\n     * Scalar Projection of A onto B assuming B is NOT a unit vector\n     * @param {Vector} vec - the vector to project onto\n     * @return {number} component of A on B\n     */\n    scalarProject: function(vec) {\n        return this.dot(vec) / vec.magnitude();\n    },\n\n    /**\n     * Calculate Scalar projection of A onto B assuming that B is a unit vector\n     * This is more efficient assuming we already have a unit vector\n     * @param {Vector} vec - the unit vector to project onto\n     * @return {number} component of A on B\n     */\n    scalarProjectUnit: function(vec) {\n        return this.dot(vec);\n    },\n\n    /**\n     * Vector Projection of A onto B assuming B is NOT a unit vector\n     * @param {Vector} vec - vector to project onto\n     * @return {This} for chaining\n     */\n    vectorProject: function(vec) {\n        let scalarComp = this.dot(vec) / vec.magnitudeSq();\n        this.x = vec.x * scalarComp;\n        this.y = vec.y * scalarComp;\n        return this;\n    },\n\n    /**\n     * Vector Projection of A onto B assuming B IS a unit vector\n     * @param {Vector} vec - vector to project onto\n     * @return {This} for chaining\n     */\n    vectorProjectUnit: function(vec) {\n        let scalarComp = this.dot(vec);\n        this.x = vec.x * scalarComp;\n        this.y = vec.y * scalarComp;\n        return this;\n    }\n};\n\nVector.prototype.translate = Vector.prototype.add;\n\n/**\n * Convenience function so we can ignore the 'new' keyword\n * @param {number} x - initial x value\n * @param {number} y - initial y value\n * @return {Vector} a new vector object\n */\nvar vector = function(x, y) {\n    return new Vector(x, y);\n};\n\n// ---------- Static Methods -----------//\n/**\n * @static\n * @param {Vector} v1 - first Vector obj\n * @param {Vector} v2 - second Vector obj\n * @return {Vector}\n *\n * Adds two vectors, and returns a new one\n */\nVector.add = function(v1, v2) {\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\n};\nVector.subtract = function(v1, v2) {\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\n};\nVector.multiply = function(v1, v2) {\n    if (typeof v1 === 'number' && typeof v2 === 'number') {\n        return v1 * v2;\n    }\n\n    if (typeof v1 === 'object' && typeof v2 === 'number') {\n        return new Vector(v1.x * v2, v1.y * v2);\n    }\n\n    if (typeof v2 === 'object' && typeof v1 === 'number') {\n        return new Vector(v1 * v2.x, v1 * v2.y);\n    }\n\n    return new Vector(v1.x * v2.x, v1.y * v2.y);\n};\nVector.dot = function(v1, v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n};\nVector.angleBetween = function(v1, v2) {\n    let a = v1.magnitude();\n    let b = v2.magnitude();\n    let d = v1.dot(v2);\n\n    let theta = Math.acos(d / (a * b));\n    return theta;\n};\nVector.perp = function(v1, side) {\n    switch (side) {\n        case 'right':\n            return new Vector(v1.y, -v1.x);\n        default:\n            return new Vector(-v1.y, v1.x);\n    }\n};\nVector.negate = function(v) {\n    return new Vector(-v.x, -v.y);\n};\n\nexport default vector;\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/Vector.js","export const degToRad = function(angle) {\n    return angle * Math.PI / 180;\n};\n\nexport const radToDeg = function(angle) {\n    return angle * 180 / Math.PI;\n};\n\nexport const distance = function(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n};\n\nexport const map = function(value, low1, high1, low2, high2) {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/math.js","/* eslint\n    \"no-unused-vars\": \"off\",\n */\nimport {distance, degToRad} from '../math/math';\nimport vector, {Vector} from '../math/Vector.js';\n\nlet Ray = {\n    /**\n     * Ray object for tracing\n     * @constructs\n     * @param {number} x - origin x\n     * @param {number} y - origin y\n     * @param {number} dir - direction in radians (or degrees if 'degrees' param\n     * = true)\n     * @param {bool} degrees - optional flag, if true, then read direction as\n     * degrees\n     */\n    init: function(x, y, dir, degrees) {\n        if (degrees) {\n            dir = degToRad(dir);\n        }\n\n        this.origin = vector(x, y);\n        this.direction = vector(Math.cos(dir), Math.sin(dir));\n        this.invDirection = vector(1 / this.direction.x, 1 / this.direction.y);\n        this.outerBodies = [];\n        this.t = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;\n        let x0 = this.origin.x,\n            y0 = this.origin.y,\n            x1 = this.origin.x + this.direction.x * this.t,\n            y1 = this.origin.y + this.direction.y * this.t;\n        this.slope = (y1 - y0) / (x1 - x0);\n        // TODO: Figure out a way to give each ray a unique ID\n        this.numTests = 0;\n    },\n\n    /**\n     * Return the objects from spatial hash to perform collision detection on\n     * @param {SpatialHash} hash - hash from the System\n     */\n\n    trace: function(system) {\n        // Always use radians, regardless of mode\n        // Also angle should be in range 0 <= angle <= 2PI\n        //let angle = this.direction.getAngle();\n        this.intersectionPoint = null;\n        this.intersectingBody = null;\n        this.intersectingSegment = null;\n\n        // Iterate the rayID to ensure no duplicates\n        this.rayID = system.currentRayId++;\n        this.numTests = 0;      // debugging param - how many tests are run\n        this.intersectHash(system.hash);\n\n        // After going through all bodies and segments,\n        // if an intersection point was found...\n        if (this.intersectionPoint) {\n            return true;\n        }\n    },\n\n    /**\n     * Detect if ray intersects circle\n     * http://stackoverflow.com/questions/1073336/circle-line-segment-collision-detection-algorithm\n     *\n     * Using the following formula\n     * t^2 * (r DOT r) + 2t*( f DOT r ) + ( f DOT f - radius^2 ) = 0\n     * at^2 + bt + c where a = d.dot(d), b = 2*f.dot(d), c = f.dot(f)\n     * - radius^2\n     *      where:\n     *          d = end point of ray - start point of ray\n     *          t = scalar value - what we're solving for\n     *          r = ray vector\n     *          f = vector from center of sphere to origin of ray\n     *          radius = radius of circle\n     *\n     * 3x HIT cases:\n     *  -o->                    --|-->  |            |  --|->\n     * Impale(t1 hit,t2 hit), Poke(t1 hit,t2>1), ExitWound(t1<0, t2 hit),\n     *\n     * 3x MISS cases:\n     *     ->  o                     o ->              | -> |\n     * FallShort (t1>1,t2>1), Past (t1<0,t2<0), CompletelyInside(t1<0, t2>1)\n     *\n     * @param {Body} circle - circle body object\n     * @param {Vector} p - point of origin\n     * @param {Vector} r - ray vector\n     * @return {boolean} true if intersection was found, false otherwise\n     */\n    intersectCircle: function(circle) {\n        this.numTests += 1;\n        let radius = circle.radius;\n\n        let d = vector(this.direction.x * this.t, this.direction.y * this.t);\n        let f = Vector.subtract(this.origin, circle.position);//this.origin.clone();\n\n        // Solve the quadratic equation\n        let a = d.dot(d);\n        let b = 2 * f.dot(d);\n        let c = f.dot(f) - radius * radius;\n\n        // Descriminant b^2 - 4ac\n        let desc = (b * b) - (4 * a * c);\n\n        if (desc < 0) {\n            // No intersection\n        } else {\n            // Ray hit circle\n            // Two possible solutions\n            desc = Math.sqrt(desc);\n            let t1 = (-b - desc) / (2 * a);\n            let t2 = (-b + desc) / (2 * a);\n            let ix, iy;\n\n            // If t1 intersected the circle...\n            // Note: t1 is always closer than t2\n            if (t1 >= 0 && t1 <= 1) {\n                ix = this.origin.x + d.x * t1;\n                iy = this.origin.y + d.y * t1;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n\n            // If t1 doesn't intersect, check t2\n            if (t2 >= 0 && t2 <= 1) {\n                ix = this.origin.x + d.x * t2;\n                iy = this.origin.y + d.y * t2;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Handles case of ray-polygon intersection\n     * If an intersecting segment is found,\n     * set the props accordingly\n     * @private\n     * @param {Polygon} poly - rect body object\n     * @return {bool} true if intersected, otherwise false\n     */\n    intersectPolygon: function(poly) {\n        this.numTests += 1;\n        if (poly.isPointInterior(this.origin)) {\n            this.outerBodies.push(poly);\n        }\n        let vertices = poly.vertices;\n        let vertLength = vertices.length;\n        let intersection;\n        vertices.forEach((vert, index, verts) => {\n            let seg2;\n            if (index === vertLength - 1) {\n                seg2 = verts[0];\n            } else {\n                seg2 = verts[index + 1];\n            }\n\n            intersection = this.intersectSegment([vert, seg2]);\n            if (intersection) {\n                this.updateIntersectionPoint(intersection.intPoint, intersection.segVec, poly);\n            }\n        });\n\n        return typeof intersection !== 'undefined';\n    },\n    /**\n     * Detects Ray-Segment intersection - Returns intersection coords\n     * @param {Array} seg - segment vertices\n     * @param {Vector} dir - optional direction to use, otherwise use\n     * this.direction\n     * @return {Object} returns intersection point with body, or false\n     */\n    intersectSegment: function(seg, dir) {\n        let r = dir ?\n            vector(dir.x * this.t, dir.y * this.t) :  // Dir passed to fn\n            vector(this.t * this.direction.x, this.t * this.direction.y);   // Use ray dir\n        let p = vector(this.origin.x, this.origin.y);                           // Ray origin\n        let q = vector(seg[0].x, seg[0].y);                                     // Segment start point\n        let s = vector(seg[1].x - seg[0].x, seg[1].y - seg[0].y);               // Segment vector\n\n        // check for intersection\n        // t = (q − p) x s / (r x s)\n        // u = (q − p) x r / (r x s)\n        let rxs = r.cross(s);\n        let tmp = Vector.subtract(q, p);\n        let tNum = tmp.cross(s),\n            uNum = tmp.cross(r);\n\n        // t, u are distances traveled along vector\n        let t, u;\n        if (rxs !== 0) {\n            t = tNum / rxs;\n            u = uNum / rxs;\n        }\n\n        // TODO: handle collinear case\n        if (rxs === 0 && uNum === 0) {\n            // lines are collinear\n            return;\n        } else if (rxs === 0 && uNum !== 0) {\n            // lines are parallel and non-intersecting\n            return false;\n        } else if (rxs !== 0 && t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n            // Two lines intersect,\n            // and meet at the point\n            // p + tr = q + us\n            let px = p.x,\n                py = p.y,\n                rx = r.x,\n                ry = r.y,\n                ix = px + t * rx,\n                iy = py + t * ry;\n\n            return {\n                intPoint: vector(ix, iy),\n                segVec: s,\n                t\n            };\n        }\n\n        // Line segments do not intersect\n        // if we've gone through all the segments of the body,\n        //intersectionPoint = null;\n        return false;\n    },\n\n    /**\n     * Test for Ray-Hash bucket intersections\n     * @param {SpatialHash} hash - system.hash object\n     * @return {array} list of intersected buckets\n     *\n     * See here: http://www.cse.chalmers.se/edu/year/2011/course/TDA361_Computer_Graphics/grid.pdf\n     * THIS WORKED -> http://www.playchilla.com/ray-casting-spatial-hash-dda\n     */\n    intersectHash: function(hash) {\n        // TODO: Handle case where ray starts outside bounds\n\n        // Initialize variables\n        // Step 1. Initialization - determine starting voxel\n        let bucket = hash.hash(this.origin);\n        let {row, col} = bucket;\n        let X = col,\n            Y = row;\n        let tMaxX, tMaxY, tDeltaX, tDeltaY;\n        let stepX = this.direction.x < 0 ? -1 : 1,\n            stepY = this.direction.y < 0 ? -1 : 1;\n        let cellSize = hash.cellSize;\n\n        // Row and Col offset for picking which horizontal or veritcal segments\n        // to use for intersection tests\n        // let rowOffset = stepY < 1 ? 0 : 1,\n        //     colOffset = stepX < 1 ? 0 : 1;\n\n        tDeltaX = cellSize / Math.abs(this.direction.x);\n        tDeltaY = cellSize / Math.abs(this.direction.y);\n\n        tMaxX = X * cellSize - this.origin.x;\n        tMaxY = Y * cellSize - this.origin.y;\n        if (this.direction.x >= 0) {\n            tMaxX += cellSize;\n        }\n        if (this.direction.y >= 0) {\n            tMaxY += cellSize;\n        }\n\n        tMaxX /= this.direction.x;\n        tMaxY /= this.direction.y;\n\n        while (Y < hash.numRows &&\n                Y > -1 &&\n                X < hash.numCols &&\n                X > -1) {\n            // In debug mode - Draw buckets that ray overlaps\n            if (window.renderer.debug) {\n                window.ctx.beginPath();\n                window.ctx.globalAlpha = 1;\n                window.ctx.strokeStyle = 'orange';\n                window.ctx.lineWidth = 3;\n                window.ctx.strokeRect(X * cellSize, Y * cellSize, cellSize, cellSize);\n            }\n\n            // If we've found some contents in that hash bucket...\n            if (hash.contents[Y] && hash.contents[Y][X] && hash.contents[Y][X].length !== 0) {\n                // TODO: Here's where we need to check if the object is\n                // actually intersecting the ray\n                // Intersect all objects in this voxel only\n                let contents = hash.contents[Y][X];\n                contents.forEach(body => {\n                    if (body.intersectionPoints[this.rayID]) {\n                        // Already tested this body\n                        // It either hit or missed, if it hit, grab the point\n                        if (body.intersectionPoints[this.rayID].status === 'hit') {\n                            this.updateIntersectionPoint(\n                                body.intersectionPoints[this.rayID].intPoint,\n                                body.intersectionPoints[this.rayID].segVec,\n                                body\n                            );\n                            return;\n                        }\n\n                        // It missed, so do nothing;\n                        return;\n                    }\n\n                    // If ray and body haven't been tested, then test\n                    // If it hits the AABB, then perform\n                    // actual intersection tests\n                    let hitsAABB = this.intersectAABB(body.aabb);\n                    if (hitsAABB) {\n                        switch (body.type) {\n                            case 'polygon':\n                            case 'rectangle':\n                                this.intersectPolygon(body);\n                                break;\n                            case 'circle':\n                                this.intersectCircle(body);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n\n                    // Flag body to know we've already tested this ray-body\n                    // combo\n                    if (this.intersectionPoint) {\n                        body.intersectionPoints[this.rayID] = {\n                            status: 'hit',\n                            intPoint: this.intersectionPoint,\n                            segVeg: this.intersectingSegment\n                        };\n                    } else {\n                        // If we missed, flag the body without\n                        // intersectionPoint\n                        body.intersectionPoints[this.rayID] = {status: 'miss'};\n                    }\n                });\n            }\n\n            // Increment X or Y step\n            if (tMaxX === undefined && tMaxY === undefined) {\n                break;\n            } else if (tMaxX === undefined) {\n                tMaxY += tDeltaY;\n                Y += stepY;\n            } else if (tMaxY === undefined) {\n                tMaxX += tDeltaX;\n                X += stepX;\n            } else if (tMaxX < tMaxY) {\n                tMaxX += tDeltaX;\n                X += stepX;\n            } else if (tMaxX >= tMaxY) {\n                tMaxY += tDeltaY;\n                Y += stepY;\n            }\n        }\n\n        return {\n            hashCoordinates: {\n                x: X,\n                y: Y\n            },\n            intPoint: this.intersectionPoint\n        };\n    },\n\n    /**\n     * Axis-Aligned Bounding Box Intersection test\n     * @param {AABB} aabb - the box to test\n     * @return {boolean} true for hit, false for miss\n     */\n    intersectAABB: function(aabb) {\n        let tx1 = (aabb.min.x - this.origin.x) * this.invDirection.x;\n        let tx2 = (aabb.max.x - this.origin.x) * this.invDirection.x;\n\n        let tmin = Math.min(tx1, tx2);\n        let tmax = Math.max(tx1, tx2);\n\n        let ty1 = (aabb.min.y - this.origin.y) * this.invDirection.y;\n        let ty2 = (aabb.max.y - this.origin.y) * this.invDirection.y;\n\n        tmin = Math.max(tmin, Math.min(ty1, ty2));\n        tmax = Math.min(tmax, Math.max(ty1, ty2));\n        let didHit = tmax >= tmin && tmax >= 0;\n        return didHit;\n    },\n\n    /**\n     * Internally used to update point of intersection property\n     * @private\n     * @param {Point} intPoint - object with x and y properties representing\n     * intersection point\n     * @param {Vector} segVec - vector object that was intersected\n     * @param {Body} body - body that was intersected\n     */\n    updateIntersectionPoint: function(intPoint, segVec, body) {\n        let px = this.origin.x;\n        let py = this.origin.y;\n        let ix = intPoint.x;\n        let iy = intPoint.y;\n\n        // If there was a previously stored intersection point,\n        // check if this one is closer,\n        // and if so update it's values\n        if (this.intersectionPoint) {\n            if (distance(px, py, ix, iy) <\n                distance(px, py, this.intersectionPoint.x, this.intersectionPoint.y)) {\n                this.intersectionPoint = {x: ix, y: iy};\n                this.intersectingBody = body;\n                this.intersectingSegment = segVec;\n            }\n        } else {\n            // We don't yet have an intersection point, so make a new\n            // one\n            this.intersectionPoint = {x: ix, y: iy};\n            this.intersectingBody = body;\n            this.intersectingSegment = segVec;\n        }\n    }\n};\n\n/**\n * 'Constructor' function\n * @public\n * @param {number} x - origin x\n * @param {number} y - origin y\n * @param {number} dir - direction in radians (or degrees if 'degrees' param\n * = true)\n * @param {bool} degrees - optional flag, if true, then read direction as\n * degrees\n *\n * @return {object} ray object\n */\nvar ray = function(x, y, dir, degrees) {\n    let R = Object.create(Ray);\n    R.init(x, y, dir, degrees);\n    return R;\n};\n\nexport default ray;\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometries/Ray.js","import hash from '../geometries/SpatialHash';\nimport broadphase from '../collision/Broadphase';\nimport narrowphase from '../collision/Narrowphase';\nimport solver from '../collision/Solver';\nimport Constraint from '../constraints/Constraint';\nimport boundaryConstraint from '../constraints/BoundaryConstraint';\n// import linkConstraint from '../constraints/LinkConstraint';\nimport {GRAVITY} from '../constants/CONSTANTS';\n\n// const System = {};\n// TODO: rename params to options to be consistent with other objects\nconst System = {\n    init: function(loop, params) {\n        // Allow for no loop to be passed\n        if (typeof loop === 'function') {\n            this.loop = loop;\n        } else {\n            params = loop;\n        }\n\n        this._gravityOn = true;\n        this.frames = [];\n        this.waves = [];\n        this.childWaves = [];\n        this.bodies = [];\n        this.points = [];\n        this.anchors = [];\n        this.width = params.width || 600;\n        this.height = params.height || 300;\n        // this.collisionPairs = {};\n        this.nextBodyId = 0;\n        this.collisions = [];\n        this.constraints = [];\n\n        this.collideBoundary = params.collideBoundary === undefined ? true : params.collideBoundary;\n        console.log('can collide with boundary', this.collideBoundary);\n\n        // Cell size will adjust to fit world precisely\n        // May not be exaclty what user initialized\n        // let divisor = params.cellSize ? params.cellSize : 100;\n        this.cellSize = this.calculateCellSize(params.cellSize || 100);\n        // Initialize spatial hash\n        this.hash = this.initializeHash(this.cellSize, this.width, this.height);\n\n        //\n        this._gravity = params.gravity === undefined ? GRAVITY.LIGHT : params.gravity;\n        // Initialize Collision objects\n        this.broadphase = broadphase();\n        this.narrowphase = narrowphase();\n        this.solver = solver();\n        this.worldForce = {\n            x: 0,\n            y: 0\n        };\n\n        // Ray ID Counter\n        this.currentRayId = 0;\n    },\n\n    calculateCellSize: function(cellSize) {\n        let divisor = cellSize ? cellSize : 100;\n        return this.width / Math.floor(this.width / divisor);\n    },\n\n    initializeHash: function(cellSize, width, height) {\n        return hash(cellSize, width, height);\n    },\n\n    addChildWave: function(wave) {\n        this.childWaves.push(wave);\n    },\n\n    addObject: function(obj) {\n        switch (obj.type) {\n            case 'rectangle':\n            case 'circle':\n            case 'polygon':\n                // Initialize new bodies with an ID use for ray intersection\n                // tests\n                obj.id = this.nextBodyId++;\n\n                if (this._gravityOn) {\n                    obj.addForce(0, this.gravity);\n                }\n                // Initialize new bodies with world force\n                // obj.addForce(this.worldForce.x, this.worldForce.y);\n                this.bodies.push(obj);\n                break;\n            case 'point':\n                this.points.push(obj);\n                break;\n            case 'anchor':\n                this.anchors.push(obj);\n                break;\n            case 'incident':\n            case 'wave':\n                this.waves.push(obj);\n                break;\n            case 'link':\n            case 'boundary':\n                this.constraints.push(obj);\n                break;\n            default:\n                throw new Error('tried to add something that you\\'re totally not allowed to add');\n        }\n    },\n\n    /**\n     * Add objects to the system\n     * Objects not added will not be rendered\n     * or updated\n     *\n     * @param {Sci.Object|Sci.Object[]} b - a body or wave, or constraint, or array of any of those things\n     */\n    add: function(obj) {\n        if (typeof obj === 'object' && obj.length !== undefined) {\n            // We have an array\n            obj.forEach(o => {\n                this.addObject(o);\n            });\n        } else {\n            this.addObject(obj);\n        }\n    },\n\n    /**\n     * Remove an object from the system\n     * @param {Body} b - the body object to remove\n     * @return {This} for chaining\n     */\n    remove: function(b) {\n        if (typeof b === 'object' && b.length !== undefined) {\n            // We have an array of things to remove\n            b.forEach(body => {\n                let idx = this.bodies.indexOf(body);\n                if (idx !== -1) {\n                    this.bodies.splice(idx, 1);\n                }\n            });\n        } else {\n            let idx = this.bodies.indexOf(b);\n            if (idx !== -1) {\n                this.bodies.splice(idx, 1);\n            }\n        }\n\n        return this;\n    },\n\n    _integratePosition: function(dt) {\n        this.bodies.forEach(body => {\n            if (!body.static) {\n                body.update(dt)\n            }\n        });\n    },\n\n    _populateGrid: function(bodies) {\n        this.bodies.forEach(body => {\n            this.hash.insertBody(body);\n        });\n    },\n\n    _updateWorldForces: function() {\n        // Update forces if need be\n        if (this.worldForceNeedsSet) {\n            this.bodies.forEach(body => {\n                body.setForce(this.worldForce.x, this.worldForce.y);\n            });\n            this.worldForceNeedsSet = false;\n        }\n        if (this.worldForceNeedsUpdate) {\n            this.bodies.forEach(body => {\n                body.addForce(this.worldForce.x, this.worldForce.y);\n            });\n            this.worldForceNeedsUpdate = false;\n        }\n    },\n    _getCollisionPairs: function() {\n        // Perform broadphase\n        this.pairs = this.broadphase.getCollisionPairs(this.bodies, this.hash);\n\n        // Perform narrowphase detection on potential pairs\n        if (this.pairs && Object.keys(this.pairs).length > 0) {\n            this.collisions = this.narrowphase.checkForCollisions(this.pairs);\n        }\n    },\n    /**\n     * Update loop\n     * Update all bodies, waves, run collision tests if necessary, and keep\n     * track of rayID's on potentially colliding bodies\n     * @param {number} dt - time step for system update (defaults to 16.666 ms)\n     * @return {This} for chaining, or getting checking last state of system\n     */\n    update: function(dt) {\n        // 1. Reset State for next loop\n        this.hash.clear();\n\n        // Update world forces, if necessary\n        this._updateWorldForces();\n\n        // Update bodies with verlet integration\n        // And insert into hash\n        this._integratePosition(dt);\n\n        // Run User Loop (they may want to change position somehow)\n        if (this.loop) { this.loop(); }\n\n        // Add bodies to collision grid\n        this._populateGrid();\n\n        // Get broadphase collision pairs\n        this._getCollisionPairs();\n\n        // Solve collisions and constraints\n        this.solver.solve(this.collisions, this.constraints, dt);\n\n        // Each ray needs a unique ID for collision checking\n        // Reset currentRayID during each update loop so we can reuse these\n        // ID's\n        this.currentRayId = 0;\n\n        // Remove all child waves\n        this.childWaves = [];\n\n        // Update each wave and loop through it's chilren\n        this.waves.forEach(wave => {\n            wave.update(this);\n            this.traverseWaves(wave);\n        });\n\n        return this;\n    },\n\n    /**\n     * Recursively loop through child waves\n     * and add them to the system\n     * @private\n     * @param {Wave} wave - wave object to traverse\n     */\n    traverseWaves: function(wave) {\n        // If the wave has children\n        // Add each child to the system,\n        // then repeat for each child\n        // Exit condition -> When children have no children\n        if (wave.children.length !== 0) {\n            wave.children.forEach(child => {\n                this.addChildWave(child);\n                this.traverseWaves(child);\n            });\n        }\n    },\n\n    addWorldForce: function(x, y) {\n        this.worldForce.x += x;\n        this.worldForce.y += y;\n        this.worldForceNeedsUpdate = true;\n    },\n\n    setWorldForce: function(x, y) {\n        this.worldForce.x = x;\n        this.worldForce.y = y;\n        this.worldForceNeedsSet = true;\n    }\n};\n\nObject.defineProperty(System, 'gravityOn', {\n    get: function() {\n        return this._gravityOn;\n    },\n    set: function(isOn) {\n        if (this._gravityOn && !isOn) {\n            // turn gravity off\n            this._gravityOn = false;\n            this.worldForce.y -= this.gravity;\n            this.bodies.forEach(body => {\n                body.addForce(0, -this.gravity);\n            });\n        } else if (!this._gravityOn && isOn) {\n            // turn gravity on\n            this._gravityOn = true;\n            this.worldForce.y += this.gravity;\n            this.bodies.forEach(body => {\n                body.addForce(0, this.gravity);\n            });\n        }\n    }\n});\n\nObject.defineProperty(System, 'gravity', {\n    get: function() {\n        return this._gravity;\n    },\n    set: function(value) {\n        // Capture current gravity\n        let gravDiff = value - this._gravity;\n        this.worldForce.y += gravDiff;\n        this._gravity += gravDiff;\n        this.bodies.forEach(body => {\n            body.addForce(0, gravDiff);\n        });\n    }\n});\n\n// const CONSTANTS = {\n//     GRAVITY: 0.00004\n// };\n\n/**\n * @public\n * @param {function} loop - your update loop - used to update body states\n * @param {object} params - initialization parameters\n * @return {System}\n *\n * params\n *  - width: int - width of entire system (usually canvas width)\n *  - height: number - height of entire system\n *  - cellSize: number - requested cellSize, (system will choose closest value\n *          that precisely fits into the system width)\n */\nconst system = function(loop, params) {\n    const s = Object.create(System);\n    s.init(loop, params);\n    return s;\n};\n\nexport default system;\n\n\n\n// WEBPACK FOOTER //\n// ./src/system/System.js","const SpatialHash = {\n    init: function(cellSize, width, height) {\n        this.cellSize = cellSize;\n        this.width = width;\n        this.height = height;\n        this.numRows = Math.ceil(height / cellSize);\n        this.numCols = width / cellSize;\n        this.contents = {};\n    },\n\n    /**\n     * Return location that should store this point\n     * @param {object} point - object with x and y properties\n     * @return {object} - bucket which th epoint falls into\n     */\n    hash: function(point) {\n        return {col: Math.floor(point.x / this.cellSize), row: Math.floor(point.y / this.cellSize)};\n    },\n    insertBody: function(body) {\n        // Hash the vertices of the AABB\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                if (this.contents[r]) {\n                    if (this.contents[r][c]) {\n                        this.contents[r][c].push(body);\n                    } else {\n                        this.contents[r][c] = [body];\n                    }\n                } else {\n                    this.contents[r] = {};\n                    this.contents[r][c] = [body];\n                }\n            }\n        }\n    },\n    updateBody: function(body) {\n        this.removeBody(body);\n        this.insertBody(body);\n    },\n    removeBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And remove the object from all found buckets\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                let idx = this.contents[r][c].indexOf(body);\n                if (idx !== -1) {\n                    this.contents[r][c].splice(idx, 1);\n                }\n            }\n        }\n    },\n    queryBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n        let nearby = [];\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                this.contents[r][c].forEach(b => {\n                    if (nearby.indexOf(b) === -1 && b !== body) {\n                        nearby.push(b);\n                    }\n                });\n            }\n        }\n        return nearby;\n    },\n    queryPoint: function(point) {\n        let hash = this.hash(point);\n        return hash;\n    },\n    clear: function() {\n        this.contents = {};\n    }\n};\n\nconst hash = function(cellSize, width, height) {\n    let h = Object.create(SpatialHash);\n    h.init(cellSize, width, height);\n    return h;\n};\n\nexport default hash;\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometries/SpatialHash.js","import pair from './Pair';\nconst Broadphase = {\n    // init: function(system) {\n    //     this.system = system;\n    //     this.pairs = [];\n    //     this.collisionCounter = 0;\n    // },\n    aabbOverlap: function(body1, body2) {\n        return body1.aabb.overlap(body2.aabb);\n    },\n    canCollide: function(body1, body2) {\n        if (body1.canCollide && body2.canCollide) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Get all potential collision pairs -\n     *  1. They are within the same spatial bucket\n     *  2. They're AABB's overlap\n     *  @param {Body[]} bodies - all bodies from system\n     *  @param {SpatialHash} hash - from system\n     *  @return {Object} collision pairs - broadphase\n     */\n    getCollisionPairs: function(bodies, hash) {\n        this.collisionCounter = 0;\n        let collisionPairs = {};\n        // let collisionPairs = [];\n        for (let i = 0; i < bodies.length; i++) {\n            let body = bodies[i];\n            let nearby = hash.queryBody(body);\n\n            for (let j = 0; j < nearby.length; j++) {\n                let otherBody = nearby[j];\n                if (this.canCollide(body, otherBody)) {\n                    if (this.aabbOverlap(body, otherBody)) {\n                        let id;\n                        if (body.id < otherBody.id) {\n                            id = `${body.id}-${otherBody.id}`;\n                        } else {\n                            id = `${otherBody.id}-${body.id}`;\n                        }\n\n                        let p = pair(body, otherBody, id);\n                        // collisionPairs.push(p);\n                        if (!collisionPairs[id]) {\n                            collisionPairs[id] = p;\n                        }\n                    }\n                }\n            }\n        }\n        return collisionPairs;\n    }\n};\n\nconst broadphase = function(system) {\n    let b = Object.create(Broadphase);\n    // b.init(system);\n    return b;\n};\n\nexport default broadphase;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Broadphase.js","const Pair = {\n    init: function(b1, b2, index) {\n        this.bodies = [b1, b2];\n        this.index = index;\n    }\n};\n\nconst pair = function(b1, b2, index) {\n    let p = Object.create(Pair);\n    p.init(b1, b2, index);\n    return p;\n};\n\nexport default pair;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Pair.js","import SAT from './SAT';\nconst Narrowphase = {\n    // init: function(hash) {\n    //     this.hash = hash;\n    // },\n    checkForCollisions: function(pairs) {\n        // Object\n        let collisions = [];\n        if (typeof pairs === 'object' && pairs.length === undefined) {\n            let keys = Object.keys(pairs);\n            for (let i = 0; i < keys.length; i++) {\n                let pair = pairs[keys[i]];\n                let b1 = pair.bodies[0];\n                let b2 = pair.bodies[1];\n                let collision = SAT.intersect(b1, b2);\n\n                if (collision) {\n                    b1.colliderList.push(collision);\n                    b2.colliderList.push(collision);\n                    collisions.push(collision);\n                }\n            }\n        } else if (typeof pairs === 'object' && pairs.length > 0) {\n            // Array\n            for (let i = 0; i < pairs.length; i++) {\n                let pair = pairs[i];\n                let b1 = pair.bodies[0];\n                let b2 = pair.bodies[1];\n                let collision = SAT.intersect(b1, b2);\n\n                if (collision) {\n                    b1.colliderList.push(collision);\n                    collisions.push(collision);\n                }\n            }\n        }\n        return collisions;\n    }\n};\n\nconst narrowphase = function() {\n    let n = Object.create(Narrowphase);\n    // n.init(hash);\n    return n;\n};\n\nexport default narrowphase;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Narrowphase.js","import {Vector} from '../math/Vector';\nimport collision from './Collision';\n\nconst SAT = {};\n\n/**\n * Determine min and max projection components along a\n * given axis\n *\n * @param {Body} b - the body whos vertices to project\n * @param {Vector} axis - the axis to project onto. Should be a unit vector\n *\n * @return {Object} min and max values of projected vertices\n */\nSAT.projectBody = function(b, axis) {\n    if (b.type === 'rectangle' || b.type === 'polygon') {\n        let min = b.vertices[0].scalarProjectUnit(axis);\n        let max = min;\n\n        for (let i = 0; i < b.vertices.length; i++) {\n            let v = b.vertices[i];\n            let p = v.scalarProjectUnit(axis);\n            if (p < min) {\n                min = p;\n            } else if (p > max) {\n                max = p;\n            }\n        }\n        return {min, max};\n    } else if (b.type === 'circle') {\n        let p = b.position.scalarProjectUnit(axis);\n        return {min: p - b.scaledRadius, max: p + b.scaledRadius};\n    }\n};\n\n/**\n * Line Overlap\n * Method to determine if two lines on the same axis have an overlap\n * @param {number} p1min - min point of 1st line\n * @param {number} p1max - max point of 1st line\n * @param {number} p2min - min point of 2nd line\n * @param {number} p2max - max point of 2nd line\n * @return {number} amount of overlap of these two lines\n */\nSAT.lineOverlap = function(p1min, p1max, p2min, p2max) {\n    return Math.max(0, Math.min(p1max, p2max) - Math.max(p1min, p2min));\n};\n\n/**\n * Entry point for SAT tests\n * @param {Sci.Body} b1 - first body\n * @param {Sci.Body} b2 - second body\n * @return {Sci.Collision} collision object\n * see here: https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\n * see here: http://www.dyn4j.org/2010/01/sat/\n */\nSAT.intersect = function(b1, b2) {\n    if (b1.type === 'rectangle' || b1.type === 'polygon') {\n        if (b2.type === 'circle') {\n            return SAT.polycircle(b1, b2);\n        }\n\n        // b2 must then be a Polygon (or a rectangle)\n        return SAT.polypoly(b1, b2);\n    }\n\n    if (b1.type === 'circle') {\n        if (b2.type === 'circle') {\n            return SAT.circlecircle(b1, b2);\n        }\n\n        // b2 Must be a polygon or a rectangle\n        return SAT.polycircle(b1, b2);\n    }\n};\nSAT.circlecircle = function(c1, c2) {\n    let v1 = Vector.subtract(c2.position, c1.position);\n    let d = v1.magnitude();\n    let rplusr = c1.scaledRadius + c2.scaledRadius;\n\n\n    if (d < rplusr) {\n\n        // Ensure mtv axis points from p2 to p1\n        // TODO: Verify this with a few more tests...\n        let c2toc1 = Vector.subtract(c2.position, c1.position);\n        if (v1.dot(c2toc1) >= 0) {\n            v1.negate();\n        }\n\n        return collision(c1, c2, v1.normalize(), rplusr - d);\n    }\n\n    return;\n};\n\n/**\n * @param {Polygon} p1 - first poly\n * @param {Polygon} p2 - second poly\n * @return {Object} Collision results, or undefined if no collision\n *\n * @todo Containment - doesn't appropriately handle containment\n */\nSAT.polypoly = function(p1, p2) {\n    // Gather all axes to test\n    let axes = [],\n        smallestOverlap,\n        MTVAxis,\n        numVerts1 = p1.vertices.length,\n        numVerts2 = p2.vertices.length;\n\n    // Get axes for rect\n    // Only need two sides for testing\n    if (p1.type === 'rectangle') {\n        numVerts1 = 2;\n    }\n    for (let i = 0; i < numVerts1; i++) {\n        let v1 = p1.vertices[i];\n        let v2 = p1.vertices[i + 1 === p1.vertices.length ? 0 : i + 1];\n        let axis = Vector.subtract(v1, v2);\n        axis.normalize().perp();\n        axes.push(axis);\n    }\n\n    if (p2.type === 'rectangle') {\n        numVerts2 = 2;\n    }\n    // Get axes for polygon\n    // Need all sides\n    for (let i = 0; i < numVerts2; i++) {\n        let v1 = p2.vertices[i];\n        let v2 = p2.vertices[i + 1 === p2.vertices.length ? 0 : i + 1];\n        let axis = Vector.subtract(v1, v2);\n        axis.normalize().perp();\n        axes.push(axis);\n    }\n\n    // Perform intersection test along all axes\n    for (let i = 0; i < axes.length; i++) {\n        let axis = axes[i];\n\n        // Get min and max projectsion\n        let p1Projection = this.projectBody(p1, axis);\n        let p2Projection = this.projectBody(p2, axis);\n\n        // Test for overlap of projections\n        let overlap = this.lineOverlap(p1Projection.min, p1Projection.max, p2Projection.min, p2Projection.max);\n\n        // If at any point the overlap is zero, then we're guarenteed\n        // to have no collision, so exit the test\n        if (overlap === 0) {\n            return;\n        }\n\n        if (smallestOverlap) {\n            if (overlap < smallestOverlap) {\n                smallestOverlap = overlap;\n                MTVAxis = axis;\n            }\n        } else {\n            smallestOverlap = overlap;\n            MTVAxis = axis;\n        }\n    }\n\n    // Ensure mtv axis points from p1 to p2\n    // TODO: Verify this with a few more tests...\n    let p2top1 = Vector.subtract(p2.position, p1.position);\n    if (MTVAxis.dot(p2top1) >= 0) {\n        MTVAxis.negate();\n    }\n\n    // TODO: Find support points to determine which points were involved in the\n    // collision!?\n\n    // Will return true if overlap never equals 0, meaning all\n    // projections overlap to some degree, so a collision is happening\n    // return {MTV: {axis: MTVAxis, magnitude: smallestOverlap}};\n    return collision(p1, p2, MTVAxis, smallestOverlap);\n};\n\nSAT.polycircle = function(b1, b2) {\n    let p, c;\n    if (b1.type === 'circle') {\n        c = b1;\n        p = b2;\n    } else {\n        c = b2;\n        p = b1;\n    }\n\n    // Gather all axes to test\n    let axes = [],\n        smallestOverlap,\n        MTVAxis,\n        numVerts1 = p.vertices.length;\n\n    // smallest distance vector from polygon vertex to circle center\n    let d;\n\n    for (let i = 0; i < numVerts1; i++) {\n        let v1 = p.vertices[i];\n        let v2 = p.vertices[i + 1 === p.vertices.length ? 0 : i + 1];\n        let axis = Vector.subtract(v1, v2);\n        axis.normalize().perp();\n        axes.push(axis);\n\n        // Get distance of vertex to circle center\n        let vc = Vector.subtract(v1, c.position);\n        if (d) {\n            if (vc.magnitudeSq() < d.magnitudeSq()) {\n                d = vc;\n            }\n        } else {\n            d = vc;\n        }\n    }\n\n    axes.push(d.normalize());\n\n    // Perform intersection test along all axes\n    for (let i = 0; i < axes.length; i++) {\n        let axis = axes[i];\n\n        // Get min and max projectsion\n        let pProjection = this.projectBody(p, axis);\n        let cProjection = this.projectBody(c, axis);\n\n        // Test for overlap of projections\n        let overlap = this.lineOverlap(pProjection.min, pProjection.max, cProjection.min, cProjection.max);\n\n        // If at any point the overlap is zero, then we're guarenteed\n        // to have no collision, so exit the test\n        if (overlap === 0) {\n            return;\n        }\n\n        if (smallestOverlap) {\n            if (overlap < smallestOverlap) {\n                smallestOverlap = overlap;\n                MTVAxis = axis;\n            }\n        } else {\n            smallestOverlap = overlap;\n            MTVAxis = axis;\n        }\n    }\n\n    // Ensure mtv axis points from p2 to p1\n    // TODO: Verify this with a few more tests...\n    let b2tob1 = Vector.subtract(b2.position, b1.position);\n    if (MTVAxis.dot(b2tob1) >= 0) {\n        MTVAxis.negate();\n    }\n\n    // Will return true if overlap never equals 0, meaning all\n    // projections overlap to some degree, so a collision is happening\n    return collision(b1, b2, MTVAxis, smallestOverlap);\n};\n\nexport default SAT;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/SAT.js","const Collision = {\n    init: function(b1, b2, mtv, overlap) {\n        this.body1 = b1;\n        this.body2 = b2;\n        this.mtvaxis = mtv;\n        this.overlap = overlap;\n        this.penetration = {x: mtv.x * overlap, y: mtv.y * overlap};\n    }\n};\n\nconst collision = function(b1, b2, mtv, overlap) {\n    let c = Object.create(Collision);\n    c.init(b1, b2, mtv, overlap);\n    return c;\n};\n\nexport default collision;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Collision.js","import vector from '../math/Vector';\n\nconst Solver = {\n    // Collision Types\n    INELASTIC: 'inelastic',\n    ELASTIC: 'elastic',\n\n    getCollisionType: function(b1, b2) {\n        if (b1.collisionType === 'inelastic' || b2.collisionType === 'inelastic') {\n            return this.INELASTIC;\n        }\n        return this.ELASTIC;\n    },\n\n    /**\n     * Resolve collision\n     * @param {Collision} collision - collision object to resolve\n     *\n     * @todo: right now just directly manipulates position - things are\n     * very jittery, but it works for now.\n     */\n    solveCollision: function(collision) {\n        // Solve for body collision\n        let {body1, body2, mtvaxis, overlap} = collision;\n        let resolutionVector = vector(mtvaxis.x * overlap, mtvaxis.y * overlap);\n        // let collisionType = this.getCollisionType(body1, body2);\n\n        // if there is an xOverlap\n        let damping = 1;\n\n        // First resolve position entirely (i.e. move it out of collision)\n        body1.position.x += resolutionVector.x / 2 + .001;\n        body1.position.y += resolutionVector.y / 2 + .001;\n        body2.position.x -= resolutionVector.x / 2 + .001;\n        body2.position.y -= resolutionVector.y / 2 + .001;\n\n        // Set previous position (so it's velocity is zero)\n        body1.positionPrev = body1.position.clone();\n        body2.positionPrev = body2.position.clone();\n\n        let e = Math.max(body1.restitution, body2.restitution);\n\n        // Give it some velocity based on coefficient of restitution and some\n        // arbitrary damping (this needs to be tuned so the collision feels\n        // realistic!) TODO: Figure out how to make them more realistic\n        body1.positionPrev.x -= resolutionVector.x / 2 * e * damping;\n        body1.positionPrev.y -= resolutionVector.y / 2 * e * damping;\n        body2.positionPrev.x += resolutionVector.x / 2 * e * damping;\n        body2.positionPrev.y += resolutionVector.y / 2 * e * damping;\n\n        // Preserve impulse? See here: http://codeflow.org/entries/2010/nov/29/verlet-collision-with-impulse-preservation/\n        // let damping = 0.5;\n        // let f1 = (damping*(resolutionVector.x * body1.velocity.x + resolutionVector.y * body1.velocity.y))/resolutionVector.magnitudeSq();\n        // // var f2 = (damping*(resolutionVector.x*v2x+y*v2y))/slength;\n        // let f2 = (damping*(resolutionVector.x * body2.velocity.x + resolutionVector.y * body2.velocity.y))/resolutionVector.magnitudeSq();\n\n        // Swap the projected components\n        // let v1x = body1.velocity.x + f2 * resolutionVector.x - f1 * resolutionVector.x;\n        // let v2x = body2.velocity.x + f1 * resolutionVector.x - f2 * resolutionVector.x;\n        // let v1y = body1.velocity.y + f2 * resolutionVector.y - f1 * resolutionVector.y;\n        // let v2y = body2.velocity.y + f1 * resolutionVector.y - f2 * resolutionVector.y;\n        //\n        // body1.positionPrev.x = body1.position.x - v1x;\n        // body1.positionPrev.y = body1.position.y - v1y;\n        // body2.positionPrev.x = body2.position.x - v2x;\n        // body2.positionPrev.y = body2.position.y - v2y;\n\n        // update vertices and aabb's\n        body1.updateVertices();\n        body2.updateVertices();\n    },\n    solveCollisions: function(collisions) {\n        collisions.forEach(c => this.solveCollision(c));\n    },\n    solveConstraints: function(constraints) {\n        constraints.forEach(c => c.solve());\n    },\n    solve: function(collisions, constraints, dt) {\n        this.dt = dt;\n        this.solveConstraints(constraints);\n        this.solveCollisions(collisions);\n    }\n};\n\nconst solver = function() {\n    let s = Object.create(Solver);\n    return s;\n};\n\nexport default solver;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Solver.js","// import {Vector} from '../math/Vector';\n\nconst Constraint = {\n    init: function(body1, body2, bounds, distance, forces) {\n        this.body1 = body1;\n        this.body2 = body2;\n        this.bounds = bounds;\n        this.distance = distance;\n        this.forces = forces;\n    }\n    // enable: function() {\n    //     if (this.body1) {\n    //         this.body1.constraints.push(this);\n    //     }\n    //     if (this.body2) {\n    //         this.body2.constraints.push(this);\n    //     }\n    // }\n};\n\nconst constraint = function(...args) {\n    let type = args[0];\n    let c = Object.create(Constraint);\n    c.type = args[0];\n\n    switch (type) {\n        case 'boundary':\n            c.init(args[1], null, args[3], null, null);\n            break;\n        case 'link':\n            c.init(args[1], args[2], null, args[3], null);\n            break;\n        default:\n            throw new Error('I don\\'t know how to handle that kind of constraint!');\n    }\n\n    return c;\n};\n\nexport default constraint;\n\n\n\n// WEBPACK FOOTER //\n// ./src/constraints/Constraint.js","import constraint from './Constraint';\nimport {Vector} from '../math/Vector';\n\nconst boundaryConstraint = function(body, bounds, distance) {\n    let C = constraint('boundary', body, null, bounds, distance);\n\n    C.solve = function() {\n        let minX = body.aabb.min.x;\n        let minY = body.aabb.min.y;\n        let maxX = body.aabb.max.x;\n        let maxY = body.aabb.max.y;\n        switch (body.type) {\n            case 'circle': {\n                let minX = body.aabb.min.x;\n                let minY = body.aabb.min.y;\n                let maxX = body.aabb.max.x;\n                let maxY = body.aabb.max.y;\n                let radius = body.radius;\n                // Instead of setting position directly, can we apply a force?\n                // get the normal direction of the velocity...\n                // let normal = Vector.perp(body.velocity);\n                // Satisfy condition where\n                if (minX < 0) { body.setX(radius); }\n                if (minY < 0) { body.setY(radius); }\n                if (maxX > bounds.width) { body.setX(bounds.width - radius); }\n                if (maxY > bounds.height) { body.setY(bounds.height - radius); }\n                break;\n            }\n            case 'rectangle': {\n                let width = maxX - minX;\n                let height = maxY - minY;\n                if (minX < 0) { body.setX((width - body.width) / 2); }\n                if (minY < 0) { body.setY(height - body.height) / 2; }\n                if (maxX > bounds.width) { body.setX(bounds.width - body.width - (width - body.width) / 2); }\n                if (maxY > bounds.height) { body.setY(bounds.height - body.height - (height - body.height) / 2); }\n                break;\n            }\n            case 'polygon': {\n                let width = maxX - minX;\n                let height = maxY - minY;\n                if (minX < 0) { body.setX(0); }\n                if (minY < 0) { body.setY(0); }\n                if (maxX > bounds.width) { body.setX(bounds.width - body.width - (width - body.width ) / 2); }\n                if (maxY > bounds.height) { body.setY(bounds.height - body.height - (height - body.height ) / 2); }\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    return C;\n};\n\nexport default boundaryConstraint;\n\n\n\n// WEBPACK FOOTER //\n// ./src/constraints/BoundaryConstraint.js","// Physical Constants\nconst GRAVITY = {\n    LIGHT: 0.00004,\n    MEDIUM: 0.0001,\n    HEAVY: 0.0004\n};\nconst MATERIALS = {\n    Rock: {density: 0.6, restitution: 0.1},\n    Wood: {density: 0.3, restitution: 0.2},\n    Metal: {density: 1.2, restitution: 0.05},\n    BouncyBall: {density: 0.3, restitution: 0.8},\n    SuperBall: {density: 0.3, restitution: 0.95},\n    Pillow: {density: 0.1, restitution: 0.2},\n    Static: {density: 0.0, restitution: 0.4}\n};\n\nexport {\n    MATERIALS,\n    GRAVITY\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants/CONSTANTS.js","import * as math from '../math/math';\n// TODO: rename params to options to be consistent with other objects\nconst Renderer = {\n    init: function(system, params) {\n        this.clearBackground = params.clearBackground === undefined ? true : params.clearBackground;\n        console.log(this.clearBackground);\n        this.background = params.background || 'black';\n        this.borderColor = params.borderColor;\n        this.system = system;\n        // this.loop = loop;\n\n        // Initialize Canvas element\n        // Pardon the ugly ternary...\n        this.canvas = (typeof params.canvas === 'undefined') ?\n            (function() {\n                let c = document.createElement('canvas');\n                c.id = 'canvas';\n                // Set default size\n                document.body.appendChild(c);\n                return c;\n            })() : (function() {\n                // Default values for canvas size\n                let c = document.getElementById(params.canvas);\n                return c;\n            })();\n\n        // Set canvas based on system size\n        this.canvas.width = this.system.width;\n        this.canvas.height = this.system.height;\n        this.ctx = this.canvas.getContext('2d');\n\n        // Draw background\n        this.ctx.beginPath();\n        this.ctx.globalAlpha = 1;\n        this.ctx.fillStyle = this.background;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        // Timing for render loop\n        this.frameTimestep = 0;\n        this.fps = 60;\n        this.dt = 1000 / this.fps;\n\n        // Debug Params\n        this.debug = params.debug === undefined ? false : params.debug;\n        if (this.debug) {\n            window.renderer = this;\n            window.ctx = this.canvas.getContext('2d');\n        }\n    },\n\n    /**\n     * Resize the canvas\n     * @param {number} width - new width of canvas\n     * @param {number} height - new height of canvas\n     * @param {number} [cellSize] - optional. set a new cell size for the\n     * spatial hash\n     */\n    resize: function(width, height, cellSize) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.system.width = width;\n        this.system.height = height;\n        this.system.cellSize = this.system.calculateCellSize(cellSize || this.system.cellSize);\n        this.system.hash = this.system.initializeHash(this.system.cellSize, width, height);\n    },\n\n    drawPoint: function(point) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(point.position.x, point.position.y, 3, 3, 0, 0, Math.PI * 2);\n        this.ctx.strokeStyle = 'red';\n        this.ctx.lineWidth = 1;\n        this.ctx.stroke();\n    },\n    drawConstraints: function(constraints) {\n        constraints.forEach(c => this.drawConstraint(c));\n    },\n    drawConstraint: function(constraint) {\n        switch (constraint.type) {\n            case 'link':\n                this.ctx.beginPath();\n                this.ctx.moveTo(constraint.body1.centroid.x, constraint.body1.centroid.y);\n                this.ctx.lineTo(constraint.body2.centroid.x, constraint.body2.centroid.y);\n                this.ctx.stroke();\n        }\n    },\n    drawBodies: function(bodies) {\n        bodies.forEach(b => this.drawBody(b));\n    },\n    /**\n     * Draw a body object\n     * @private\n     * @param {Body} body - phys.system object containing all objects\n     */\n    drawBody: function(body, pct) {\n        if (body.debug) {\n            if (body.type === 'circle') {\n                this.ctx.beginPath();\n                let cx = body.position.x;\n                let cy = body.position.y;\n                let rx = Math.cos(body.rotation) * body.radius;\n                let ry = Math.sin(body.rotation) * body.radius;\n                this.ctx.moveTo(cx, cy);\n                this.ctx.lineTo(cx + rx, cy + ry);\n                this.ctx.strokeStyle = 'red';\n                this.ctx.stroke();\n            }\n            this.ctx.beginPath();\n            let aabb = body.aabb;\n            let x = aabb.min.x;\n            let y = aabb.min.y;\n            let w = aabb.max.x - x;\n            let h = aabb.max.y - y;\n            this.ctx.rect(x, y, w, h);\n            this.ctx.strokeStyle = 'red';\n            this.ctx.lineWidth = .5;\n            this.ctx.stroke();\n        }\n        if (this.debug) {\n            this.ctx.beginPath();\n            this.ctx.globalAlpha = 1;\n            this.ctx.strokeStyle = 'red';\n            this.ctx.lineWidth = 1;\n\n            let aabb = body.aabb;\n            let x = aabb.min.x;\n            let y = aabb.min.y;\n            let w = aabb.max.x - x;\n            let h = aabb.max.y - y;\n            this.ctx.rect(x, y, w, h);\n            this.ctx.stroke();\n\n            if (body.vertices) {\n                body.vertices.forEach(vert => {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = 'magenta';\n                    this.ctx.lineWidth = 2;\n                    this.ctx.ellipse(vert.x, vert.y, 4, 4, 0, 0, Math.PI * 2);\n                    this.ctx.stroke();\n                });\n            }\n            if (body.centroid) {\n                this.ctx.beginPath();\n                this.ctx.strokeStyle = 'red';\n                this.ctx.lineWidth = 3;\n                this.ctx.ellipse(body.centroid.x, body.centroid.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.stroke();\n            }\n        }\n\n        // Start a new path for each body\n        this.ctx.beginPath();\n        this.ctx.globalAlpha = 1;\n        switch (body.type) {\n            case 'rectangle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                this.ctx.lineJoin = 'miter';\n                if (body.debug) {\n                    if (body.colliderList.length > 0) {\n                        this.ctx.strokeStyle = 'green';\n                    } else {\n                        this.ctx.strokeStyle = 'white';\n                    }\n                }\n                this.ctx.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (let i = 1; i < body.vertices.length; i++) {\n                    let v = body.vertices[i];\n                    this.ctx.lineTo(v.x, v.y);\n                }\n                this.ctx.closePath();\n                this.ctx.fill();\n                this.ctx.stroke();\n                break;\n            }\n            case 'circle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n\n                if (body.debug) {\n                    if (body.colliderList.length > 0) {\n                        this.ctx.strokeStyle = 'green';\n                    } else {\n                        this.ctx.strokeStyle = 'white';\n                    }\n                }\n\n                this.ctx.ellipse(\n                    body.position.x,\n                    body.position.y,\n                    body.scaledRadius,\n                    body.scaledRadius,\n                    0,\n                    0,\n                    Math.PI * 2\n                );\n                // this.ctx.closePath();\n                this.ctx.stroke();\n                // this.ctx.fill();\n                break;\n            }\n            case 'polygon': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                this.ctx.lineJoin = 'miter';\n                this.ctx.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (let i = 1; i < body.vertices.length; i++) {\n                    let v = body.vertices[i];\n                    this.ctx.lineTo(v.x, v.y);\n                }\n                this.ctx.closePath();\n                this.ctx.fill();\n                this.ctx.stroke();\n                break;\n            }\n            default:\n                break;\n        }\n    },\n    drawWave: function(wave) {\n        // No matter what the angle mode, always use radians\n        let angle = wave.mode === 'DEGREES' ? math.degToRad(wave.direction) : wave.direction;\n\n        // Set wave style properties\n        this.ctx.fillStyle = wave.style.fillStyle;\n        this.ctx.lineWidth = wave.style.lineWidth;\n        this.ctx.strokeStyle = wave.style.strokeStyle;\n        this.ctx.globalAlpha = math.map(wave.intensity, 0, 1, 0.1, 1);\n\n        // If debug == true, draw waves in certain colors\n        if (this.debug) {\n            if (wave.type === 'incident') {\n                // Draw starting circle\n                this.ctx.beginPath();\n                this.ctx.fillStyle = 'yellow';\n                this.ctx.ellipse(wave.position.x, wave.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.fill();\n                this.ctx.stroke();\n                this.ctx.strokeStyle = 'green';\n            } else if (wave.type === 'refracted') {\n                this.ctx.strokeStyle = 'blue';\n            } else if (wave.type === 'reflected') {\n                this.ctx.strokeStyle = 'orange';\n            }\n        }\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(wave.position.x, wave.position.y);\n\n        // If the wave intersects an object ahead, then\n        // only draw to that object. Otherwise draw an arbitrary length\n        if (wave.ray.intersectionPoint) {\n            this.ctx.lineTo(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y);\n            this.ctx.stroke();\n\n            // Draw intersection points as circles\n            // when in debug mode\n            if (this.debug) {\n                this.ctx.beginPath();\n                this.ctx.strokeStyle = 'red';\n                this.ctx.lineWidth = 0.5;\n                this.ctx.ellipse(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.stroke();\n            }\n        } else {\n            this.ctx.lineTo(2000 * Math.cos(angle) + wave.position.x, 2000 * Math.sin(angle) + wave.position.y);\n            this.ctx.stroke();\n        }\n    },\n\n    // Combined Patterns from Matter.js\n    // - https://github.com/liabru/matter-js/blob/master/src/core/Runner.js\n    // and this tutorial:\n    // https://gamedevelopment.tutsplus.com/tutorials/how-to-create-a-custom-2d-physics-engine-the-core-engine--gamedev-7493#timestepping\n    run: function() {\n        let self = this;\n        this.lastTick = 0;\n        let animate = time => {\n            this._requestID = window.requestAnimationFrame(animate);\n\n            if (time) {\n                this.tick(time);\n            }\n        };\n        animate();\n    },\n\n    // Clamping frameTimestep make a gigantic difference\n    tick: function(time) {\n        // Get time between this and the previous ticks\n        let elapsedTime = time - this.lastTick;\n\n        // Add the time to a counter\n        this.frameTimestep += elapsedTime;\n\n        // Update previous tick time\n        this.lastTick = time;\n\n        // Magic happens here\n        // if the elapsed time between this tick and the last tick is large\n        // (because the update or render code took a long time), then the\n        // engine would stall out.  Nothing would update while we're waiting\n        // for the long running code to finish.  So we clamp down the frame\n        // timestep to a small value.\n        if (this.frameTimestep > 50) {\n            this.frameTimestep = 50;\n        }\n\n        // If there's a large difference between the time of this frame and the\n        // previous frame, then this code will run a bunch of times,\n        // essentially stalling the renderer.  The engine can't render while\n        // the physics is updating, after all.  To combat this, we clamp down\n        // the frameTimestep above so that only a few updates run before\n        // everything renders.\n        while (this.frameTimestep > this.dt) {\n            this.system.update(this.dt);\n            this.frameTimestep -= this.dt;\n        }\n\n        // In the case where the frameTimestep is some in between value between\n        // 0 and dt, we can linearly interpolate rendered values of the bodies\n        // this won't actually effect the physics, but it'll make things look\n        // smoother\n        // pct is the fraction between 0 and dt, thus we should interpolate\n        // the position by that percentage\n        let pct = this.frameTimestep / this.dt;\n        // Render the system\n        this.render(pct);\n    },\n\n    drawBackground: function() {\n         this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // Draw background\n        this.ctx.beginPath();\n        this.ctx.globalAlpha = 1;\n        this.ctx.lineWidth = 1;\n        this.ctx.fillStyle = this.background;\n        this.ctx.strokeStyle = this.borderColor;\n        this.ctx.rect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.fill();\n        this.ctx.stroke();\n    },\n\n    render: function(pct) {\n        // Clear background\n        if (this.clearBackground) { this.drawBackground(); }\n\n        // Draw all objects\n        this.drawBodies(this.system.bodies);\n        this.drawConstraints(this.system.constraints);\n        if (this.debug) {\n            this.system.anchors.forEach(point => {\n                    this.drawPoint(point);\n            });\n        }\n\n        // Update all waves\n        this.system.waves.forEach(wave => {\n            this.drawWave(wave, pct);\n        });\n\n        // Update all child waves\n        this.system.childWaves.forEach(wave => {\n            this.drawWave(wave, pct);\n        });\n\n        // If in debug mode, draw spatial hash\n        // and highlight nodes that contain items in red\n        if (this.debug === true) {\n            let cellSize = this.system.hash.cellSize;\n            this.ctx.globalAlpha = 1;\n            this.ctx.lineWidth = 1;\n            for (let i = 0; i < this.system.hash.width; i += cellSize) {\n                for (let j = 0; j < this.system.hash.height; j += cellSize) {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = 'green';\n                    this.ctx.rect(i, j, cellSize, cellSize);\n                    this.ctx.stroke();\n                }\n            }\n            Object.keys(this.system.hash.contents).forEach(row => {\n                Object.keys(this.system.hash.contents[row]).forEach(col => {\n                    // Draw all squares\n                    // this.ctx.strokeStyle = 'green';\n                    if (this.system.hash.contents[row][col].length !== 0) {\n                        this.ctx.beginPath();\n                        this.ctx.strokeStyle = 'red';\n                        this.ctx.lineWidth = 1;\n                        this.ctx.rect(col * cellSize, row * cellSize, cellSize, cellSize);\n                        this.ctx.stroke();\n                    }\n                });\n            });\n        }\n    },\n\n    /**\n     * Set's size of renderers canvas\n     * @param {number} width - width of canvas\n     * @param {number} height - height of canvas\n     */\n    setSize: function(width, height) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    },\n    /**\n     * Stop animation cycle\n     */\n    stop: function() {\n        cancelAnimationFrame(this._requestID);\n    },\n\n    /**\n     * Restart animation cycle\n     */\n    start: function() {\n        this.render(this.system);\n    }\n};\n\nvar renderer = function(system, params) {\n    let R = Object.create(Renderer);\n    R.init(system, params);\n    return R;\n};\n\nexport default renderer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/renderer/Renderer.js","/* eslint\n    \"no-multi-spaces\": \"off\"\n */\nimport Body from './Body';\nimport aabb from '../geometries/AABB';\nimport vector from '../math/Vector';\n\nvar rect = function(options) {\n    options = options || {};\n\n    let B = Object.create(Body);\n    B.init(options);\n    B.type = 'rectangle';\n    B._mode = options.mode || 'LEFT';\n\n    B.inertia = (B.mass / 12) * (B.height * B.height + B.width * B.width);\n    B.invInertia = 1 / B.inertia;\n\n    // Define getters and setters for mode\n    Object.defineProperty(B, 'mode', {\n        get: function() {\n            return this._mode;\n        },\n        set: function(m) {\n            if (this._mode !== m && this.type === 'rectangle') {\n                switch (m) {\n                    case 'LEFT':\n                    case 'CENTER':\n                    case 'RIGHT':\n                        this._mode = m;\n                        this.updateVertices();\n                        break;\n                    default:\n                        console.warn(`Cannot set mode to ${m}`);\n                        break;\n                }\n            } else {\n                console.warn(`'mode' is only available on rectangles`);\n            }\n        }\n    });\n\n    /**\n     * Update location of vertices - used in update loop\n     * @todo Move this onto the Body\n     */\n    // B.updateVertices = function() {\n    //     let w = this.width,\n    //         h = this.height,\n    //         x = this.position.x,\n    //         y = this.position.y;\n    //     switch (this._mode) {\n    //         case 'CENTER':\n    //             x -= (w / 2);\n    //             y -= (h / 2);\n    //             break;\n    //         case 'RIGHT':\n    //             x -= w;\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    //\n    //     //Get centroid\n    //     let centroid = vector(\n    //         (x + (x + w)) / 2,      // <-- x value\n    //         (y + (y + h)) / 2       // <-- y value\n    //     );\n    //     B.centroid = centroid;\n    //\n    //     B.vertices = [\n    //         vector(x, y),\n    //         vector(x + w, y),\n    //         vector(x + w, y + h),\n    //         vector(x, y + h)\n    //     ];\n    //\n    //     // To perform a rotation, we have to first translate to the origin,\n    //     // then rotate, then translate back to the centroid\n    //     if (B.angularVelocity !== 0 || B._rotation !== 0 || B._scale !== 0) {\n    //         B.vertices.forEach(vertex => {\n    //             vertex.translate(-centroid.x, -centroid.y)\n    //                 .rotate(this._rotation)\n    //                 .multiply(this._scale)\n    //                 .translate(centroid.x, centroid.y);\n    //         });\n    //     }\n    // };\n\n    B.isPointInterior = function(x, y) {\n        let bx = B.position.x,\n            by = B.position.y;\n\n        if (x >= bx &&\n            x <= bx + B.width &&\n            y >= by &&\n            y <= by + B.height) {\n            return true;\n        }\n        return false;\n    };\n\n    B.updateVertices();\n    B.aabb = aabb(B);\n    return B;\n};\n\nexport default rect;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Rect.js","/* eslint \"no-unused-vars\": \"off\" */\n// What should a body be able to do?\n// 1. Attach to other bodies or surfaces\n// 2. Respond to forces (spring, friction)\n// 3. Move according to velocity and acceleration\n\nimport materials from '../extras/materials.json';\nimport vector, {Vector} from '../math/Vector';\nimport * as math from '../math/math';\n\n/**\n * Convenience Function so user doesn't have use 'new' keyword\n * @param {object} options - initialization options\n * @return {Body} instance of Body\n */\n\nlet Body = {\n    init: function(options) {\n        options = options || {};\n\n        // Warn user if a body object is initialized with nothing or an empty\n        // object\n        if (Object.keys(options).length === 0 && options.constructor === Object) {\n            console.warn('You probably should initialize body objects with some values...just sayin');\n        }\n\n        // STYLE //\n        this.style = {\n            fillStyle: options.fillStyle || 'rgba(0,0,0,0)',\n            lineWidth: options.lineWidth || 2,\n            strokeStyle: options.strokeStyle || '#abcabc'\n        };\n        this.height = options.height || 10;\n        this.width = options.width || 10;\n\n        // PHYSICAL Properties //\n        // Mass = density * volume;\n        this._mass = options.mass || 1;\n        this.invMass = 1 / this._mass;\n        // Inertial is calculated on a shape by shape basis, check specific\n        // shape files\n\n        // MOTION Properties //\n        this.positionImpulse = {x: 0, y: 0};\n        this.position = vector(options.x || 0, options.y || 0);\n        this.positionPrev = this.position.clone();\n        this.interpolatedPosition = this.position.clone();\n        this.velocity = vector(\n            (options.velocity && options.velocity.x) || 0,\n            (options.velocity && options.velocity.y) || 0\n        );\n        // this.acceleration = vector(\n        //     (options.acceleration && options.acceleration.x) || 0,\n        //     (options.acceleration && options.acceleration.y) || 0,\n        // );\n        this.force = vector(\n            (options.force && options.force.x) || 0,\n            (options.force && options.force.y) || 0\n        );\n        this.torque = options.torque === undefined ? 0 : options.torque;\n        this._scale = 1;\n        this._rotation = options.rotation === undefined ? 0 : options.rotation; // <-- Private prop - DO NOT SET THIS DIRECTLY, use getter and setter for\n        this.interpolatedRotation = this.rotation;\n        this.rotationPrev = this._rotation;\n        this.angularVelocity = options.angularVelocity === undefined ? 0 : options.angularVelocity;\n\n        // COLLISION Properties //\n        this.static = options.static === true;\n        this.canCollide = options.canCollide !== false;\n        this.collisionType = options.collisionType || 'elastic';\n        this.colliderList = [];\n        this.restitution = 1;\n\n        // OPTICAL Properties //\n        this.refractiveIndex = options.refractiveIndex || 1;\n        this.material = options.material || 'GLASS';\n        this.materialColor = options.fillStyle || 'black';\n        this.mirror = options.mirror || false;\n        this.intersectionPoints = {};\n\n        // If debug = true, bounding box will be drawn\n        this.debug = options.debug === undefined ? false : options.debug;\n\n        // If the material is provided, set refractive index based on materials\n        // database\n        // TODO: Make setting either refractive index or material possible!!!\n        if (options.material && options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n            this.material = options.material;\n            console.warn('Setting both the material and the refractive index at the same time may cause some unexpected behavior'); //eslint-disable-line\n        } else if (options.material) {\n            // Check to make sure the material exists in the database\n            if (materials[this.material]) {\n                this.refractiveIndex = materials[this.material].refractiveIndex;\n            } else if (this.material === undefined || this.material === null) {\n                this.material = 'default';\n                this.refractiveIndex = 1;\n            } else {\n                console.error('the material ' + this.material + ' is not recognized. See the docs for supported default materials'); //eslint-disable-line\n            }\n        } else if (options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n        } else {\n            this.refractiveIndex = 1.33;\n        }\n        return this;\n    },\n\n    freeze: function() {\n        this.setPosition(this.position.x, this.position.y);\n        // this.static = true;\n        // this._cachedVelocity = this.velocity.clone();\n        // this.velocity.x = 0;\n        // this.velocity.y = 0;\n        return this;\n    },\n\n    unfreeze: function() {\n        this.static = false;\n        // if (this._cachedVelocity) {\n        //     this.velocity.x = this._cachedVelocity.x;\n        //     this.velocity.y = this._cachedVelocity.y;\n        // } else {\n        //     console.warn('cannot unfreeze a non-frozen object');\n        // }\n        return this;\n    },\n\n    translate: function(...args) {\n        if (args.length === 1) {\n            if (typeof args[0] === 'object') {\n                // Assume we have a vector object\n                this.position.add(args[0]);\n            }\n        } else if (args.length === 2) {\n            if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n                this.position.x += args[0];\n                this.position.y += args[1];\n            }\n        }\n\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n        return this;\n    },\n\n    rotate: function(angle) {\n        this.rotation += angle;\n        return this;\n    },\n\n    updateVertices: function() {\n        switch (this.type) {\n            case 'rectangle': {\n                let w = this.width,\n                    h = this.height,\n                    x = this.position.x,\n                    y = this.position.y;\n                switch (this._mode) {\n                    case 'CENTER':\n                        x -= (w / 2);\n                        y -= (h / 2);\n                        break;\n                    case 'RIGHT':\n                        x -= w;\n                        break;\n                    default:\n                        break;\n                }\n\n                //Get centroid\n                this.centroid = vector(\n                    (x + (x + w)) / 2,      // <-- x value\n                    (y + (y + h)) / 2       // <-- y value\n                );\n\n                this.vertices = [\n                    vector(x, y),\n                    vector(x + w, y),\n                    vector(x + w, y + h),\n                    vector(x, y + h)\n                ];\n\n                // To perform a rotation, we have to first translate to the origin,\n                // then rotate, then translate back to the centroid\n                if (this.angularVelocity !== 0 || this._rotation !== 0 || this._scale !== 0) {\n                    this.vertices.forEach(vertex => {\n                        vertex.translate(-this.centroid.x, -this.centroid.y)\n                            .rotate(this._rotation)\n                            .multiply(this._scale)\n                            .translate(this.centroid.x, this.centroid.y);\n                    });\n                }\n                break;\n            }\n            case 'polygon': {\n                this.centroid = {x: 0, y: 0};\n                this.vertices.forEach((vert, index) => {\n                    let relVert = this._relativeVertices[index];\n                    vert.x = relVert.x + this.position.x;\n                    vert.y = relVert.y + this.position.y;\n\n                    this.centroid.x += vert.x;\n                    this.centroid.y += vert.y;\n                });\n\n                this.centroid.x /= this.vertices.length;\n                this.centroid.y /= this.vertices.length;\n\n                // Update rotate vertices if necessary\n                if (this.angularVelocity !== 0 || this._rotation !== 0 || this._scale !== 0) {\n                    this.vertices.forEach(vert => {\n                        vert.translate(-this.centroid.x, -this.centroid.y)\n                            .rotate(this._rotation)\n                            .multiply(this._scale)\n                            .translate(this.centroid.x, this.centroid.y);\n                    });\n                }\n                break;\n            }\n            case 'circle':\n                this.centroid = {x: this.position.x, y: this.position.y};\n                break;\n            default:\n                break;\n        }\n        if (this.aabb) {\n            this.aabb.update();\n        }\n    },\n\n    addForce: function(x, y) {\n        this.force.x += x;\n        this.force.y += y;\n    },\n\n    setForce: function(x, y) {\n        this.force.x = x;\n        this.force.y = y;\n    },\n\n    // Instantaneously set position without verlet integration\n    setPosition: function(x, y) {\n        this.position.x = x;\n        this.position.y = y;\n        this.positionPrev.x = x;\n        this.positionPrev.y = y;\n    },\n\n    // Instantaneously set x position without verlet integration\n    setX: function(x) {\n        this.position.x = x;\n        this.positionPrev.x = x;\n    },\n    setY: function(y) {\n        this.position.y = y;\n        this.positionPrev.y = y;\n    },\n    setRotation: function(angle) {\n        this.rotation = angle;\n        this.rotationPrev = angle;\n    },\n\n    // TODO: 1/4 Fix the update loop -> body is accelerating WAY too fast.\n    update: function(dt) {\n        // if (!this.static) {\n        //     this.velocity.add(this.acceleration);\n        //     this.position.add(this.velocity);\n        //     this.rotation += this.angularVelocity;\n        // var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n        let deltaTimeSquared = dt * dt;\n\n        // Verlet integration\n        if (this.colliderList.length > 0) {\n        }\n\n        // Calculate previous velocity using change in position during one step\n        let velocityPrevX = this.position.x - this.positionPrev.x,\n            velocityPrevY = this.position.y - this.positionPrev.y;\n\n        // update velocity with Verlet integration\n        this.velocity.x = velocityPrevX + (this.force.x * this.invMass) * deltaTimeSquared;\n        this.velocity.y = velocityPrevY + (this.force.y * this.invMass) * deltaTimeSquared;\n        this.angularVelocity = (this.rotation - this.rotationPrev) + (this.torque * this.invInertia) * deltaTimeSquared;\n\n        // Save previous position\n        this.positionPrev.x = this.position.x;\n        this.positionPrev.y = this.position.y;\n\n        // Update position with calculated velocity\n        this.position.add(this.velocity);\n        this.rotationPrev = this.rotation;\n        this.rotation += this.angularVelocity * deltaTimeSquared;\n\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n\n        // For each update loop, reset intersection points to zero\n        // These are used for wave intersections, not collisions\n        this.intersectionPoints = {};\n\n        this.colliderList = [];\n        // this.aabb.update();\n        return this;\n    }\n};\n\nObject.defineProperty(Body, 'rotation', {\n    get: function() {\n        return this._rotation;\n    },\n    set: function(angle) {\n        this._rotation = angle;\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n    }\n});\n\nObject.defineProperty(Body, 'scale', {\n    get: function() {\n        return this._scale;\n    },\n    set: function(scaleFactor) {\n        this._scale = scaleFactor;\n        if (this.updateVertices) {\n            this.updateVertices();\n        } else if (this.type === 'circle') {\n            this.scaledRadius = this.radius * scaleFactor;\n        }\n    }\n});\n\nObject.defineProperty(Body, 'mass', {\n    get: function() {\n        return this._mass;\n    },\n    set: function(m) {\n        this._mass = m;\n        this.invMass = 1 / m;\n    }\n});\n\nexport default Body;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Body.js","module.exports = {\n\t\"GLASS\": {\n\t\t\"refractiveIndex\": 1.5\n\t},\n\t\"AIR\": {\n\t\t\"refractiveIndex\": 1.000277\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/extras/materials.json\n// module id = 21\n// module chunks = 0","/* eslint\n    \"no-else-return\": \"off\"\n */\nlet AABB = {\n    init: function(body) {\n        this.body = body;\n        let {min, max} = this.findMinMax(body);\n        this.max = max;\n        this.min = min;\n    },\n    /**\n     * Finds bounds of AABB\n     * Does not set any properties\n     * If you want to find and set, call AABB.update()\n     * @return {object} bounds\n     */\n    findMinMax: function() {\n        // Only deal with two types of bodies...Those with vertices, and\n        // circles\n        if (this.body.vertices) {\n            let minx,\n                miny,\n                maxx,\n                maxy;\n            this.body.vertices.forEach(v => {\n                let x = v.x,\n                    y = v.y;\n\n                // If nothing has been set, then set it\n                if (typeof minx === 'undefined') {\n                    minx = x;\n                } else if (typeof minx !== 'undefined' && x < minx) {\n                    // Something's already there, only update if x < minx\n                    minx = x;\n                }\n\n                if (typeof miny === 'undefined') {\n                    miny = y;\n                } else if (typeof miny !== 'undefined' && y < miny) {\n                    miny = y;\n                }\n\n                if (typeof maxx === 'undefined') {\n                    maxx = x;\n                } else if (typeof maxx !== 'undefined' && x > maxx) {\n                    maxx = x;\n                }\n\n                if (typeof maxy === 'undefined') {\n                    maxy = y;\n                } else if (typeof maxy !== 'undefined' && y > maxy) {\n                    maxy = y;\n                }\n            });\n\n            return {\n                max: {\n                    x: maxx,\n                    y: maxy\n                },\n                min: {\n                    x: minx,\n                    y: miny\n                }\n            };\n        } else {\n            // Assume it's a circle\n            let cx = this.body.position.x,\n                cy = this.body.position.y,\n                r = this.body.scaledRadius;\n            return {\n                max: {\n                    x: cx + r,\n                    y: cy + r\n                },\n                min: {\n                    x: cx - r,\n                    y: cy - r\n                }\n            };\n        }\n    },\n\n    /**\n     * Returns true of point is inside AABB\n     * @param {Point} point - must contain x and y props\n     * @return {bool} true if point is inside AABB\n     */\n    contains: function(point) {\n        let x = point.x,\n            y = point.y;\n        if (x >= this.min.x &&\n            x <= this.max.x &&\n            y >= this.min.y &&\n            y <= this.max.y) {\n            return true;\n        }\n\n        return false;\n    },\n\n    /**\n     * Check if two AABB's intersect\n     * @param {AABB} aabb - other bounding box\n     * @return {bool} true for overlap, false otherwise\n     */\n    overlap: function(aabb) {\n        if (this.max.x < aabb.min.x) {return false;} // a is left of b\n        if (this.min.x > aabb.max.x) {return false;} // a is right of b\n        if (this.max.y < aabb.min.y) {return false;} // a is above b\n        if (this.min.y > aabb.max.y) {return false;} // a is below b\n        return true; // boxes overlap\n    },\n\n    /**\n     * Updates the AABB\n     */\n    update: function() {\n        let {max, min} = this.findMinMax();\n        this.max = max;\n        this.min = min;\n    }\n};\n\nlet aabb = function(body) {\n    let ab = Object.create(AABB);\n    ab.init(body);\n    return ab;\n};\n\nexport default aabb;\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometries/AABB.js","/* eslint \"no-unused-vars\": \"off\" */\nimport {degToRad, radToDeg, crossProduct2D, dotProduct2D, distance, map} from '../math/math';\nimport vector, {Vector} from '../math/Vector';\nimport ray from '../geometries/Ray';\n\nlet Wave = {\n    init: function(options) {\n        options = options || {};\n        const speedOfLight = 299792458;\n        this.children = [];\n        //this.outerBodies = [];\n        this.style = {\n            lineWidth: options.lineWidth || 1,\n            strokeStyle: options.strokeStyle || '#456abc',\n            opacity: options.opacity || 1.0\n        };\n\n        this.x = options.x || 10;\n        this.y = options.y || 10;\n        this.position = vector(options.x, options.y);\n        this.waveSpeed = options.waveSpeed || speedOfLight;\n        this.frequency = options.frequency || 1000;\n        this.wavelength = this.waveSpeed / this.frequency;  // Computed Property\n        this.velocity = options.velocity || vector(0, 0);\n        this.direction = options.direction || 0;\n        this.mode = options.mode || 'RADIAN';\n        this.intensity = options.intensity || 1;\n        this.type = options.type || 'incident';\n        this.parent = options.parent || null;\n        this.n1 = options.n1 || 1;\n        this.n2 = options.n2 || 1;\n        this.lastIntersection = {};\n\n        // create ray for detecting body intersections\n        this.ray = ray(this.position.x, this.y, this.direction, this.mode === 'DEGREES' || null);\n    },\n\n    update: function(system) {\n        this.ray.trace(system);\n\n        // Remove children on every update\n        this.children = [];\n        // If the ray intersected a point...\n        if (this.ray.intersectionPoint) {\n            this.lastIntersection = this.ray.intersectionPoint;\n            this.children = this.createChildren();\n\n            this.children.forEach(child => {\n                child.update(system);\n            });\n        }\n    },\n    createChildren: function() {\n        //Vector implementation of reflected and refracted waves here:\n        //http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf\n        //Normalize ray vector = this.ray.direction\n\n        // Find the normal vector (method of which depends on type of body)\n        // There are two possible normal vectors, but\n        // which one do we want?\n        // one which dot product with ray vector < 0 is what we want\n        // http://gamedev.stackexchange.com/questions/85850/collision-intersection-of-2d-ray-to-line-segment\n        let normal;\n\n        //selectNormal();\n        // TODO: Wrap this in it's own function (i.e. findNormal function)\n        let bType = this.ray.intersectingBody.type;\n        if (bType === 'rectangle' || bType === 'polygon') {\n            let intSeg = this.ray.intersectingSegment;\n\n            intSeg.normalize();\n            let dot = intSeg.dot(this.ray.direction);\n            let normals = [vector(-intSeg.y, intSeg.x), vector(intSeg.y, -intSeg.x)];\n\n            let that = this;\n            normals.forEach(n => {\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n        } else if (bType === 'circle') {\n            let cx = this.ray.intersectingBody.position.x;\n            let cy = this.ray.intersectingBody.position.y;\n            let ix = this.ray.intersectionPoint.x;\n            let iy = this.ray.intersectionPoint.y;\n            let v1 = vector(ix - cx, iy - cy),\n                v2 = vector(cx - ix, cy - iy);\n            v1.normalize();\n            v2.normalize();\n            let normals = [\n                v1,\n                v2\n            ];\n            let that = this;\n            normals.forEach(function(n) {\n                //n.normalize();\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n            if (normal === undefined) {\n                // We intersect at a tangent on a circle???\n                // TODO: Fix this!!!\n                normal = normals[0];\n            }\n        }\n\n        // child waves - reflected and refracted\n        // Calculate reflected vector\n        // https://en.wikipedia.org/wiki/Snell%27s_law#Vector_form\n        // http://stackoverflow.com/questions/5454661/reflection-how-do-i-do-it\n        // Reflected vector looks like this:\n        // r = a - 2(a dot n) * n\n        let tmpTerm = 2 * this.ray.direction.dot(normal);\n        let tmpVec = normal.clone();\n        tmpVec.multiply(2 * this.ray.direction.dot(normal));\n        let rVec = this.ray.direction.clone();\n        rVec.subtract(tmpVec);\n\n        // Refracted vector\n        // Are we inside a body?\n        // get origin points of wave, check if they are interior to the\n        // intersecting body, if so, n1 = body.refractiveIndex, if not, n1\n        // takes on refractive index of outer context,\n        // which we can find from it's parent wave\n        // If we have a body to intersect with...\n        if (this.type === 'incident' && this.ray.outerBodies.length > 0) {\n            //Grab the last one (the body on top)\n            this.n1 = this.ray.outerBodies[this.ray.outerBodies.length - 1].refractiveIndex;\n        }\n\n        // TODO: Figure out how to handle picking proper refractive index\n        // values\n        // for child rays\n        if (this.ray.intersectingBody) {\n            switch (this.type) {\n                case 'refracted':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.ray.intersectingBody) {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.parent.n1;\n                    } else {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'reflected':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.intersectingBody) {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.parent.n2;\n                    } else {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'incident':\n                    this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            // There's no intersection point ahead of this ray, so it's\n            // refractive indices are irrelevant\n            this.n1 = 1;\n            this.n2 = 1;\n            // If the ray won't intersect another body,\n            // then it must be outside of a body\n            //n2 = 1;\n\n            // n1 must take on the index of where the parent ray currently\n            // exists\n            //n1 = props.parent.intersectingBody.refractiveIndex;\n        }\n\n        let theta1 = Math.PI - this.ray.direction.angleTo(normal);\n        let theta2 = Math.asin(this.n1 * Math.sin(theta1) / this.n2);\n\n        // Vector formulation for refracted wave\n        // t = n1/n2 * rayVector + (n1/n2 * cos(theta1) - sqrt(1\n        // - sin2(theta2))) * normal\n        let sin2theta2 = (this.n1 / this.n2) * (this.n1 / this.n2) * (1 - (Math.cos(theta1) * Math.cos(theta1)));\n        let tVec = Vector.multiply((this.n1 / this.n2), this.ray.direction);\n        let normCopy = Vector.multiply(normal, (this.n1 / this.n2) * Math.cos(theta1) - Math.sqrt(1 - sin2theta2));\n        tVec.add(normCopy);\n\n        // Reflection Coefficient\n        // R = R0 + (1 - R0) * (1 - cos(theta1))^5 where R0 = (n1 - n2 / n1\n        // + n2)^2\n        let _r0 = (this.n1 - this.n2) / (this.n1 + this.n2);\n        let R0 = _r0 * _r0;\n        let _r0tmp;\n\n        // Angles must be positive, so if we get a negative value for an\n        // angle, just flip it\n        if (this.n1 <= this.n2) {\n            _r0tmp = (1 - (Math.cos(theta1) < 0 ? -Math.cos(theta1) : Math.cos(theta1)));\n        } else if (this.n1 > this.n2) {\n            _r0tmp = (1 - (Math.cos(theta2) < 0 ? -Math.cos(theta2) : Math.cos(theta2)));\n        }\n\n        // TODO: Refactor this to eliminate some checks if body is a mirror\n        let R = R0 + (1 - R0) * Math.pow(_r0tmp, 5);\n        let T = 1 - R;  // Refracion Coefficient\n        // Total Internal Reflection\n        if (Math.sin(theta1) > this.n2 / this.n1) {\n            R = 0.95;\n            T = 0;\n        }\n\n        // If the material should be treated as a mirror\n        if (this.ray.intersectingBody.mirror === true) {\n            R = 0.9;\n            T = 0;\n        }\n\n        let RI = this.intensity * R;\n        let TI = this.intensity * T;\n\n        // Add 2 child waves - reflected and refracted\n        // Trace reflected wave\n        // Have to offset the waves by at least a pixel,\n        // otherwise we'll end up in a never ending\n        // call stack when each child wave always produces\n        // 2 new child waves, forever...\n        let rVecAngle = rVec.getAngle();\n        let tVecAngle = tVec.getAngle();\n        let children = [];\n        if (RI > 0.01) {\n            let reflectedWave = wave({ // eslint-disable-line\n                x: this.ray.intersectionPoint.x + Math.cos(rVecAngle),\n                y: this.ray.intersectionPoint.y + Math.sin(rVecAngle),\n                direction: rVecAngle,\n                intensity: RI,\n                type: 'reflected',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(reflectedWave);\n        }\n\n        if (TI > 0.01) {\n            let refractedWave = wave({  // eslint-disable-line\n                x: this.ray.intersectionPoint.x - normal.x,\n                y: this.ray.intersectionPoint.y - normal.y,\n                direction: tVecAngle,\n                intensity: TI,\n                type: 'refracted',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(refractedWave);\n        }\n        return children;\n    }\n};\n\nconst wave = function(options) {\n    let W = Object.create(Wave);\n    W.init(options);\n    return W;\n};\n\nexport default wave;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Wave.js","import Body from './Body';\nimport aabb from '../geometries/AABB';\nimport {distance} from '../math/math';\n\nlet circle = function(options) {\n    options = options || {};\n    let B = Object.create(Body);\n    B.init(options);\n\n    B.radius = options.radius || 10;\n    B.scaledRadius = B.radius;\n    B.type = 'circle';\n    B.aabb = aabb(B);\n\n    B.inertia = B.mass * B.radius * B.radius / 2;\n    B.invInertia = 1 / B.inertia;\n\n    B.isPointInterior = function(x, y) {\n        let bx = B.position.x,\n            by = B.position.y;\n        if (distance(x, y, bx, by) <= B.scaledRadius) {\n            return true;\n        }\n        return false;\n    };\n\n    return B;\n};\n\nexport default circle;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Circle.js","import Body from './Body';\nimport aabb from '../geometries/AABB';\nimport vector from '../math/Vector';\n\nvar polygon = function(options) {\n    options = options || {};\n\n    var B = Object.create(Body);\n    if (!options.vertices) {\n        throw new Error('Polygons MUST be initialized with vertices. See docs.');\n    }\n    B.init(options);\n\n    // Set type\n    B.type = 'polygon';\n    // TODO: Find one of the (many) algorithms for subdividing a convex polygon\n    // into triangles (graphics needs to do this a lot). Calculate the moment\n    // of each triangle. Add them all up.\n    B.inertia = 1;\n    B.invInertia = 1 / B.inertia;\n\n    //Initialize vetices as vectors\n    // private vertices, relative to x and y\n    B._relativeVertices = [];\n\n    // public vertices, (contain world coords);\n    B.vertices = [];\n\n    options.vertices.forEach(vert => {\n        B._relativeVertices.push(vector(vert.x, vert.y));\n        B.vertices.push(vector(options.x + vert.x, options.y + vert.y));\n    });\n\n    B.isPointInterior = function(x, y) {\n        var inside = false;\n        for (var i = 0, j = B.vertices.length - 1; i < B.vertices.length; j = i++) {\n            let vi = B.vertices[i];\n            let vj = B.vertices[j];\n            var xi = vi.x,\n                yi = vi.y;\n            var xj = vj.x,\n                yj = vj.y;\n\n            var intersect = ((yi > y) !== (yj > y)) &&\n                (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return inside;\n    };\n\n    // Initialize...\n    B.updateVertices();\n    B.aabb = aabb(B);\n    return B;\n};\n\nexport default polygon;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Polygon.js","import vector from '../math/Vector';\n\nconst Anchor = {\n    init: function(x, y) {\n        this.position = vector(x, y);\n        this.type = 'anchor';\n        this.static = true;\n        this.centroid = {x:this.position.x, y: this.position.y};\n    }\n};\n\nconst anchor = function(x, y) {\n    let p = Object.create(Anchor);\n    p.init(x, y);\n    return p;\n};\n\nexport default anchor;\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometries/Anchor.js","import constraint from './Constraint';\nimport vector, {Vector} from '../math/Vector';\n\nconst linkConstraint = function(body1, body2, dist) {\n    let C = constraint('link', body1, body2, dist);\n    C.type = 'link';\n\n    C.solve = function() {\n        // Just try and solve this one constraint\n        if (body2.type === 'point') {\n            // let fc = {x: 0, y: 0};\n            let p = body2.position.clone();\n            p.subtract(body1.interpolatedPosition);\n            let v = body1.velocity;\n            let fext = body1.force;\n            let mass = body1.mass;\n\n            let lambda = (p.dot(fext) - (v.dot(v) * mass)) / (p.dot(p));\n            // let lambda = -(p.x * v.x + p.y * v.y + 1)*mass / (2 * (p.x * p.x + p.y * p.y));\n\n            let pc = {\n                x: p.x * lambda,\n                y: p.y * lambda\n            };\n        };\n\n    };\n\n    return C;\n};\n\nexport default linkConstraint;\n\n\n\n// WEBPACK FOOTER //\n// ./src/constraints/LinkConstraint.js","import vector, {Vector} from '../math/Vector';\nimport {Simplex} from './Simplex';\n\nconst GJK = {\n    intersect: function(body1, body2) {\n        if (body1.type === 'rectangle') {\n            if (body2.type === 'rectangle' || body2.type === 'polygon') { return this.polypoly(body1, body2); }\n            if (body2.type === 'circle') { return this.polycircle(body1, body2); }\n        }\n\n        if (body1.type === 'circle') {\n            if (body2.type === 'rectangle' || body2.type === 'polygon') { return this.polycircle(body2, body1); }\n            if (body2.type === 'circle') { return this.circlecircle(body1, body2); }\n        }\n\n        if (body1.type === 'polygon') {\n            if (body2.type === 'rect' || body2.type === 'polygon') { return polypoly(body1, body2); }\n            if (body2.type === 'circle') { return this.polycircle(body1, body2); }\n        }\n    },\n\n    polypoly: function(b1, b2) {\n\n    },\n\n    polycircle: function(b1, b2) {\n\n    },\n\n    circlecircle: function(b1, b2) {\n\n    },\n\n    pointPoly: function(body, x, y) {\n        debugger;\n        // Steps\n\n        // Create a simplex and query point\n        let simplex = Object.create(Simplex);\n        let q = vector(x, y);\n        let vertices = body.vertices;\n\n        // 1. Pick a random vertex on the body\n        let randVertex = Math.floor(Math.random() * vertices.length);\n\n        // Evolve the simplex for the first time\n        simplex.evolve(vertices[randVertex]);\n\n        // 2. Build a search vector from vertex to point\n        let searchVector = simplex.getSearchDirection();\n\n        // 3. Determine support point by taking dot product with each vertex\n        //    and search vector, and take the largest one\n        let supportIndex = simplex.calculateSupportPoint(searchVector, vertices);\n\n        // 4. Evolve the simplex\n        simplex.evolve(vertices[supportIndex]);\n\n        // 5. Find the closest point on the 1-simplex (i.e. straight line\n        //    between 0-simplex and support point\n        let p = simplex.line(x, y);\n\n        // 6. Build a line from p to q\n        searchVector = Vector.subtract(q, p);\n\n        // 7. Get new support point and evolve the simplex to a 2-simplex\n        support = this.calculateSupportPoint(searchVector, vertices);\n        simplex.vertexC = support.clone();\n\n        debugger;\n    },\n\n    calculateSupportPoint: function(d, vertices) {\n        let index = 0;\n        let maxValue = vertices[index].dot(d);\n        for (let i = 1; i < vertices.length; i++) {\n            let value = vertices[i].dot(d);\n            if (value > maxValue) {\n                index = i;\n                maxValue = value;\n            }\n        }\n        return vertices[index];\n    },\n\n\n    getVoronoiRegions: function(b) {\n        // Implementation\n    }\n};\n\n// const Simplex = {\n//     init: function(vertexA, vertexB, vertexC) {\n//         this.vertexA = vertexA;\n//         this.vertexB = vertexB;\n//         this.vertexC = vertexC;\n//     },\n//\n//     point: function(x, y) {\n//         if (this.vertexA) {\n//             return this.vertexA;\n//         }\n//     },\n\n//     line: function(x, y) {\n//         if (this.vertexA && this.vertexB) {\n//             // Return the closest point on the line\n// //             First, we compute the barycentric coordinates.\n// // From those we determine the Voronoi region and the closest point P.\n//\n//             // v = (q - a) dot n / (B - A).mag\n//             // u = (b - q) dot n / (B - A).mag\n//             let q = vector(x, y);\n//             let diff = Vector.subtract(this.vertexB, this.vertexA);\n//             let diffMag = diff.magnitude();\n//             let n = diff.clone();\n//             n.normalize();\n//             let v = (Vector.subtract(q, this.vertexA)).dot(n) / diffMag;\n//             let u = (Vector.subtract(this.vertexB, q)).dot(n) / diffMag;\n//\n//             if (u <= 0) {\n//                 return this.vertexB;\n//             }\n//             else if (v <= 0) {\n//                 return this.vertexA;\n//             }\n//             else {\n//                 let g1 = Vector.multiply(this.vertexA, u)\n//                 let g2 = Vector.multiply(this.vertexB, v);\n//\n//                 return Vector.add(g1, g2);\n//             }\n//\n//             debugger;\n//         }\n//     },\n\n    // Voronoi regions A, B, C, AB, BC, CA, ABC\n//     triangle: function(x, y) {\n//         let q = vector(x, y);\n//\n//         let A = this.vertexA,\n//             B = this.vertexB,\n//             C = this.vertexC;\n//\n//         let qb = Vector.subtract(q, B),\n//             qa = Vector.subtract(q, A),\n//             qc = Vector.subtract(q, C),\n//             ab = Vector.subtract(A, B),\n//             ba = Vector.subtract(B, A),\n//             bc = Vector.subtract(B, C),\n//             cb = Vector.subtract(C, B),\n//             ca = Vector.subtract(C, A),\n//             ac = Vector.subtract(A, C);\n//\n//         // Compute edge barycentric coordinates (pre-division)\n//         // float uAB = Dot(Q - B, A - B);\n//         // float vAB = Dot(Q - A, B - A);\n//         //\n//         // float uBC = Dot(Q - C, B - C);\n//         // float vBC = Dot(Q - B, C - B);\n//         //\n//         // float uCA = Dot(Q - A, C - A);\n//         // float vCA = Dot(Q - C, A - C);\n//         let uAB = Vector.dot(qb, ab),\n//             vAB = Vector.dot(qa, ba);\n//\n//         let uBC = Vector.dot(qc, bc),\n//             vBC = Vector.dot(qb, cb);\n//\n//         let uCA = Vector.dot(qa, ca),\n//             vCA = Vector.dot(qc, ac);\n//\n//         // Region A\n//     if (vAB <= 0 && uCA <= 0) {\n//     {\n//         m_vertexA.u = 1.0f;\n//         m_divisor = 1.0f;\n//         m_count = 1;\n//         return;\n//     }\n//\n//     // Region B\n//     if (uAB <= 0 && vBC <= 0) {\n//         // m_vertexA = m_vertexB;\n//         // m_vertexA.u = 1.0f;\n//         // m_divisor = 1.0f;\n//         // m_count = 1;\n//         return;\n//     }\n//\n//     // Region C\n//     if (uBC <= 0.0f && vCA <= 0.0f)\n//     {\n//         m_vertexA = m_vertexC;\n//         m_vertexA.u = 1.0f;\n//         m_divisor = 1.0f;\n//         m_count = 1;\n//         return;\n//     }\n//     }\n// };\n\nexport default GJK;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/GJK.js","/*\n * Simplex.js\n * Copyright (C) 2017 jamiecharry <jamiecharry@Jamies-Air-2.home>\n *\n * Distributed under terms of the MIT license.\n */\nimport vector, {Vector} from '../math/Vector';\n\nlet calculateSupportPoint = function(d, vertices) {\n}\n\n/// Simplex used by the GJK algorithm.\nexport const Simplex = {\n    evolve: function(point) {\n        debugger;\n        // We can only put three points onto the simplex\n        if (this.count < 2) {\n            if (this.vertexA === undefined) {\n                this.vertexA = simplexVertex(point);\n            } else if (this.vertexB === undefined) {\n                this.vertexB = simplexVertex(point);\n            } else if (this.vertexC === undefined) {\n                this.vertexC = simplexVertex(point);\n            }\n            this.count++;\n        } else {\n            throw new Error('cannot evolve a simplex beyond 3 points');\n        }\n    },\n\n    getSupportPoint: function(d, vertices) {\n        let index = 0;\n        let maxValue = vertices[index].dot(d);\n        for (let i = 1; i < vertices.length; i++) {\n            let value = vertices[i].dot(d);\n            if (value > maxValue) {\n                index = i;\n                maxValue = value;\n            }\n        }\n        return index;\n    },\n\n    getSearchDirection: function() {\n        switch (this.count) {\n            case 1:\n                return Vector.negate(this.vertexA);\n            case 2:\n                let edgeAB = Vector.subtract(vertexB.point, vertexA.point);\n                // let sgn = edgeAb.cross()\n        }\n        // return vector\n    },\n    getClosestPoint: function() {\n        // return vector\n    },\n    getWitnessPoints: function(point1, point2) {\n\n    },\n    solve2: function(P) {\n\n    },\n    solve3: function(P) {\n\n    },\n    divisor: 0,\n    count: 0\n};\n\nlet simplexVertex = function(point1, point2, u, index1, index2) {\n    return {\n        point1,\n        point2,\n        point: Vector.subtract(point1, point2),\n        index1,\n        index2\n    }\n};\n\n/// Output for the distance function.\n// struct Output\n// {\n//     enum\n//     {\n//         e_maxSimplices = 20\n//     };\n//\n//     Vec2 point1;\t\t///< closest point on polygon 1\n//     Vec2 point2;\t\t///< closest point on polygon 2\n//     float distance;\n//     int iterations;\t\t///< number of GJK iterations used\n//\n//     Simplex simplices[e_maxSimplices];\n//     int simplexCount;\n// };\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Simplex.js","export default {\n    ELASTIC: 'elastic',\n    INELASTIC: 'inelastic',\n    STATIC: 'static'\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/collisionTypes.js"],"sourceRoot":""}