{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap a43e328dd82a1b8bde80","webpack:///(webpack)/hot/dev-server.js","webpack:///./src/extras/polyfills.js","webpack:///./src/sciplay.js","webpack:///./src/math/Vector.js","webpack:///./src/math/math.js","webpack:///./src/geometries/Ray.js","webpack:///./src/system/System.js","webpack:///./src/geometries/SpatialHash.js","webpack:///./src/collision/Broadphase.js","webpack:///./src/collision/Pair.js","webpack:///./src/collision/Narrowphase.js","webpack:///./src/collision/SAT.js","webpack:///./src/collision/Collision.js","webpack:///./src/collision/Solver.js","webpack:///./src/constraints/BoundaryConstraint.js","webpack:///./src/constraints/Constraint.js","webpack:///./src/constraints/LinkConstraint.js","webpack:///./src/constants/CONSTANTS.js","webpack:///./src/renderer/Renderer.js","webpack:///./src/bodies/Rect.js","webpack:///./src/bodies/Body.js","webpack:///./src/extras/materials.json","webpack:///./src/geometries/AABB.js","webpack:///./src/bodies/Wave.js","webpack:///./src/bodies/Circle.js","webpack:///./src/bodies/Polygon.js","webpack:///./src/geometries/Point.js","webpack:///./src/collision/GJK.js","webpack:///./src/collision/collisionTypes.js"],"names":["lastTime","vendors","x","length","window","requestAnimationFrame","cancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","constants","sciplay","Vector","vector","renderer","ray","system","wave","rect","point","polygon","circle","collisionTypes","boundaryConstraint","linkConstraint","dev","GJK","y","prototype","clone","set","prop","val","add","vec","subtract","multiply","magnitude","sqrt","magnitudeSq","negate","rotate","angle","sin","cos","dot","cross","angleTo","a","b","d","theta","acos","getAngle","mode","atan","atan2","PI","normalize","mag","perp","side","tmp","distanceTo","scalarProject","scalarProjectUnit","vectorProject","scalarComp","vectorProjectUnit","translate","v1","v2","angleBetween","degToRad","radToDeg","distance","x1","y1","x2","y2","map","value","low1","high1","low2","high2","Ray","init","dir","degrees","origin","direction","invDirection","outerBodies","t","innerWidth","innerHeight","x0","y0","slope","numTests","trace","intersectionPoint","intersectingBody","intersectingSegment","rayID","currentRayId","intersectHash","hash","intersectCircle","radius","f","position","c","desc","t1","t2","ix","iy","updateIntersectionPoint","intersectPolygon","poly","isPointInterior","push","vertices","vertLength","intersection","forEach","vert","index","verts","seg2","intersectSegment","intPoint","segVec","seg","r","p","q","s","rxs","tNum","uNum","u","px","py","rx","ry","bucket","row","col","X","Y","tMaxX","tMaxY","tDeltaX","tDeltaY","stepX","stepY","cellSize","abs","numRows","numCols","debug","ctx","beginPath","globalAlpha","strokeStyle","lineWidth","strokeRect","contents","body","intersectionPoints","status","hitsAABB","intersectAABB","aabb","type","segVeg","undefined","hashCoordinates","tx1","min","tx2","tmin","tmax","ty1","ty2","didHit","R","Object","create","System","loop","params","frames","waves","childWaves","bodies","points","width","height","collisionPairs","nextBodyId","collideBoundary","console","log","calculateCellSize","initializeHash","_gravity","gravity","LIGHT","broadphase","narrowphase","solver","worldForce","divisor","floor","addChildWave","addObject","obj","addForce","Error","remove","idx","indexOf","splice","update","dt","clear","constraints","insertBody","worldForceNeedsSet","setForce","worldForceNeedsUpdate","pairs","getCollisionPairs","collisions","keys","checkForCollisions","solveCollision","coll","solveConstraint","velocity","traverseWaves","children","child","addWorldForce","setWorldForce","defineProperty","get","_gravityOn","isOn","gravDiff","SpatialHash","ceil","updateBody","removeBody","queryBody","nearby","queryPoint","h","Broadphase","aabbOverlap","body1","body2","overlap","canCollide","collisionCounter","i","j","otherBody","Pair","b1","b2","pair","Narrowphase","collision","intersect","colliderList","n","SAT","projectBody","axis","v","interpolatedPosition","scaledRadius","lineOverlap","p1min","p1max","p2min","p2max","polycircle","polypoly","circlecircle","c1","c2","rplusr","p1","p2","axes","smallestOverlap","MTVAxis","numVerts1","numVerts2","p1Projection","p2Projection","vc","pProjection","cProjection","Collision","mtv","mtvaxis","Solver","INELASTIC","ELASTIC","getCollisionType","collisionType","xOverlap","yOverlap","resolutionVector","xDir","static","yDir","constraint","solve","bounds","C","minX","minY","maxX","maxY","setX","setY","Constraint","forces","enable","dist","fext","force","mass","lambda","pc","GRAVITY","MEDIUM","HEAVY","MATERIALS","Rock","density","restitution","Wood","Metal","BouncyBall","SuperBall","Pillow","Static","math","Renderer","clearBackground","background","borderColor","canvas","document","createElement","appendChild","getElementById","getContext","fillStyle","fillRect","frameTimestep","fps","resize","drawPoint","ellipse","stroke","drawBody","pct","cx","cy","rotation","moveTo","lineTo","w","centroid","style","lineJoin","closePath","fill","drawWave","intensity","run","self","lastTick","animate","_requestID","time","tick","elapsedTime","render","clearRect","setSize","stop","start","options","B","_mode","inertia","invInertia","m","updateVertices","warn","bx","by","Body","constructor","_mass","invMass","positionPrev","torque","_scale","_rotation","rotationPrev","angularVelocity","refractiveIndex","material","materialColor","mirror","error","freeze","setPosition","unfreeze","vertex","relVert","_relativeVertices","setRotation","deltaTimeSquared","velocityPrevX","velocityPrevY","scaleFactor","AABB","findMinMax","minx","miny","maxx","maxy","contains","ab","Wave","speedOfLight","opacity","waveSpeed","frequency","wavelength","parent","n1","n2","lastIntersection","createChildren","normal","bType","intSeg","normals","that","tmpTerm","tmpVec","rVec","theta1","theta2","asin","sin2theta2","tVec","normCopy","_r0","R0","_r0tmp","pow","T","RI","TI","rVecAngle","tVecAngle","reflectedWave","refractedWave","W","inside","vi","vj","xi","yi","xj","yj","Point","pointPoly","simplex","Simplex","randVertex","random","vertexA","searchVector","support","calculateSupportPoint","vertexB","line","vertexC","maxValue","getVoronoiRegions","diff","diffMag","g1","g2","triangle","A","qb","qa","qc","ba","bc","cb","ca","ac","uAB","vAB","uBC","vBC","uCA","vCA","STATIC"],"mappings":"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","file":"sciplay.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sciplay\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sciplay\"] = factory();\n\telse\n\t\troot[\"sciplay\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a43e328dd82a1b8bde80","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n/*globals window __webpack_hash__ */\r\nif(module.hot) {\r\n\tvar lastData;\r\n\tvar upToDate = function upToDate() {\r\n\t\treturn lastData.indexOf(__webpack_hash__) >= 0;\r\n\t};\r\n\tvar check = function check() {\r\n\t\tmodule.hot.check(true, function(err, updatedModules) {\r\n\t\t\tif(err) {\r\n\t\t\t\tif(module.hot.status() in {\r\n\t\t\t\t\t\tabort: 1,\r\n\t\t\t\t\t\tfail: 1\r\n\t\t\t\t\t}) {\r\n\t\t\t\t\tconsole.warn(\"[HMR] Cannot apply update. Need to do a full reload!\");\r\n\t\t\t\t\tconsole.warn(\"[HMR] \" + err.stack || err.message);\r\n\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"[HMR] Update failed: \" + err.stack || err.message);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(!updatedModules) {\r\n\t\t\t\tconsole.warn(\"[HMR] Cannot find update. Need to do a full reload!\");\r\n\t\t\t\tconsole.warn(\"[HMR] (Probably because of restarting the webpack-dev-server)\");\r\n\t\t\t\twindow.location.reload();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(!upToDate()) {\r\n\t\t\t\tcheck();\r\n\t\t\t}\r\n\r\n\t\t\trequire(\"./log-apply-result\")(updatedModules, updatedModules);\r\n\r\n\t\t\tif(upToDate()) {\r\n\t\t\t\tconsole.log(\"[HMR] App is up to date.\");\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t};\r\n\tvar addEventListener = window.addEventListener ? function(eventName, listener) {\r\n\t\twindow.addEventListener(eventName, listener, false);\r\n\t} : function(eventName, listener) {\r\n\t\twindow.attachEvent(\"on\" + eventName, listener);\r\n\t};\r\n\taddEventListener(\"message\", function(event) {\r\n\t\tif(typeof event.data === \"string\" && event.data.indexOf(\"webpackHotUpdate\") === 0) {\r\n\t\t\tlastData = event.data;\r\n\t\t\tif(!upToDate() && module.hot.status() === \"idle\") {\r\n\t\t\t\tconsole.log(\"[HMR] Checking for updates on the server...\");\r\n\t\t\t\tcheck();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tconsole.log(\"[HMR] Waiting for update signal from WDS...\");\r\n} else {\r\n\tthrow new Error(\"[HMR] Hot Module Replacement is disabled.\");\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/hot/dev-server.js\n// module id = 1\n// module chunks = 0","/* eslint \"max-len\": \"off\" */\n// Request animation frame shim\n(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./src/extras/polyfills.js","/* MATH OBJECTS */\nimport vector, {Vector} from './math/Vector';\nimport ray from './geometries/Ray';\n\n/* CORE OBJECTS */\nimport system from './system/System';\nimport renderer from './renderer/Renderer';\n\n/* BODIES */\nimport rect from './bodies/Rect';\nimport wave from './bodies/Wave';\nimport circle from './bodies/Circle';\nimport polygon from './bodies/Polygon';\nimport point from './geometries/Point';\nimport * as constants from './constants/CONSTANTS';\n\n/* Constraints */\nimport boundaryConstraint from './constraints/BoundaryConstraint';\nimport linkConstraint from './constraints/LinkConstraint';\n\nimport GJK from './collision/GJK';\n\n/* CONSTANTS */\nimport collisionTypes from './collision/collisionTypes.js';\n\nlet sciplay = function() {\n    return {\n        Vector, // for operations that return a new vector\n        vector, // actual vector constructor\n        renderer,\n        ray,\n        system,\n        wave,\n        rect,\n        point,\n        polygon,\n        circle,\n        collisionTypes,\n        constants,\n        boundaryConstraint,\n        linkConstraint,\n        dev: {\n            GJK\n        }\n    };\n};\n\nexport default sciplay;\n\n\n\n// WEBPACK FOOTER //\n// ./src/sciplay.js","/**\n * Generic Vector class\n *\n *\n * @example\n * import vector, {Vector} from 'Vector';\n *\n * Instantiate new objects in the following ways\n *  1. use vector convenience function like so: vector(x, y);\n *  2. use Vector object directly like: new Vector(x, y);\n *\n * Methods on a newly created vector, such as .add or .subtract\n * modify the x and y properties on that vector, changing them forever\n * i.e.\n *      let vec1 = vector(0, 0);\n *      let vec2 = vector(10, 20);\n *      vec1.add(vec2);\n *\n * Results in vec1.x = 10 and vec1.y = 20.  vec2 is unmodified\n *\n * To perform an operation on two vectors and return a new vector,\n * without modifying the input vectors, use the methods on {Vector}\n * i.e.\n *      let vec1 = vector(0, 0);\n *      let vec2 = vector(10, 20);\n *      let vec3 = Vector.add(vec1, vec2);\n *\n * Results in vec1 and vec2 remining unmodified,\n * and vec3.x = 10 and vec3.y = 20\n *\n */\n\nimport {radToDeg} from './math';\n\n/**\n * Base Vector constructor\n * @constructor\n * @param {number} x - x coordinate\n * @param {number} y - y coordinate\n */\nexport const Vector = function(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n};\n\n/**\n * Prototype object for all Vectors\n */\nVector.prototype = {\n    /**\n     * Return a copy of a vector\n     * @method\n     * @return {Vector} a new vector object\n     */\n    clone: function() {\n        return new Vector(this.x, this.y);\n    },\n\n    /**\n     * Generic Setter\n     * @method\n     * @param {string} prop - property to set\n     * @param {*} val - value to set\n     * @return {This} for chaining\n     */\n    set: function(prop, val) {\n        if (prop === 'x') {\n            this.x = val;\n        } else if (prop === 'y') {\n            this.y = val;\n        }\n        return this;\n    },\n\n    /**\n     * Add another vector to this vector, modifying internal\n     * properties\n     * @method\n     * @param {Vector} vec - vector to add\n     * @return {This} for chaining\n     */\n    add: function(...args) {\n        let x, y;\n        if (args.length === 1) {\n            let vec = args[0];\n            if (typeof vec === 'object') {\n                x = vec.x;\n                y = vec.y;\n            }\n        } else if (args.length === 2) {\n            if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n                x = args[0];\n                y = args[1];\n            }\n        }\n\n        this.x += x;\n        this.y += y;\n\n        return this;\n    },\n\n    /**\n     * Subtract another vector from this vector\n     * @method\n     * @param {Vector} vec - vector to subtract\n     * @return {This} for chaining\n     */\n    subtract: function(vec) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        return this;\n    },\n\n    /**\n     * Multiply another vector by this vector or scalar\n     * modifies internal properties\n     * @param {Vector|number} vec - either Vector object or single scalar\n     * @return {This} for chaining\n     */\n    multiply: function(vec) {\n        if (typeof vec === 'object') {\n            this.x *= vec.x;\n            this.y *= vec.y;\n        } else if (typeof vec === 'number') {\n            this.x *= vec;\n            this.y *= vec;\n        }\n\n        return this;\n    },\n\n    /**\n     * Gives the magnitude (length, essentially) of the vector\n     * @method\n     * @return {number} magnitude of the vector\n     */\n    magnitude: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    /**\n     * Magnitude squared - useful when trying to save on computation\n     * @method\n     * @return {number} mag squared\n     */\n    magnitudeSq: function() {\n        return this.x * this.x + this.y * this.y;\n    },\n\n    /**\n     * Negate both x and y values (essentially rotate vector 180 degrees)\n     * @method\n     * @return {Vector} for method chaining\n     */\n    negate: function() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    },\n\n    /**\n     * Translate to specified x and y points\n     * @param {number} x - amount to move in the x\n     * @param {number} y - amount to move in the y\n     * @return {This} for chaining\n     */\n    // translate:\n    // function(x, y) {\n    //     this.x += x;\n    //     this.y += y;\n    //     return this;\n    // },\n\n    /**\n     * Rotate vector around specified point of rotation\n     * Note: Will rotate around origin\n     * @param {number} angle - amount of rotation in radians\n     * @return {This} for chaining\n     */\n    rotate: function(angle) {\n        let sin = Math.sin(angle);\n        let cos = Math.cos(angle);\n        let x = (this.x * cos) - (this.y * sin);\n        let y = (this.x * sin) + (this.y * cos);\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    /**\n     * Dot product between two vectors\n     * Does NOT modify internal state\n     * @param {Vector} vec - the vector to dot with\n     * @return {number} dot product\n     */\n    dot: function(vec) {\n        return this.x * vec.x + this.y * vec.y;\n    },\n\n    /**\n     * Cross product between two vectors\n     * Does NOT modify internal state\n     * @method\n     * @param {Vector} vec - the vec to cross with\n     * @return {number} cross product\n     */\n    cross: function(vec) {\n        return this.x * vec.y - this.y * vec.x;\n    },\n\n    /**\n     * Return angle between two vectors in radians\n     * @param {Vector} vec - vector to find angle to\n     * @return {number} theta - radians between two vectors\n     */\n    angleTo: function(vec) {\n        let a = this.magnitude();\n        let b = vec.magnitude();\n        let d = this.dot(vec);\n\n        let theta = Math.acos(d / (a * b));\n        return theta;\n    },\n\n    /**\n     * Return angle from 0 of this vector\n     * @method\n     * @param {string} [mode] - if mode = 'DEGREES', return value will be in\n     * degrees, otherwise radians\n     * @return {number} angle in degrees or radians (depending on mode)\n     *\n     */\n    getAngle: function(mode) {\n        if (mode === 'DEGREES') {\n            return radToDeg(Math.atan(this.y / this.x));\n        }\n        let a = Math.atan2(this.y, this.x);\n        //return a;\n        return a < 0 ? Math.PI * 2 + a : a;\n    },\n\n    /**\n     * Convert to a unit vector\n     * i.e. change length of vector to 1\n     * @method\n     * @return {This} for chaining\n     */\n    normalize: function() {\n        let mag = this.magnitude();\n        this.x /= mag;\n        this.y /= mag;\n        return this;\n    },\n\n    /**\n     * Create normal vector based on current vector\n     * Modifies internal state!\n     * @param {string} side - specify 'left' or 'right' normal\n     * @return {This} for chaining\n     */\n    perp: function(side) {\n        if (side === 'right') {\n            let tmp = this.x;\n            this.x = this.y;\n            this.y = -tmp;\n        } else {\n            let tmp = this.x;\n            this.x = -this.y;\n            this.y = tmp;\n        }\n        return this;\n    },\n\n    /**\n     * Calculate euclidian distance between two vectors\n     * @param {Vector} vec - vector to find distance to\n     * @return {number} euclidean distance\n     */\n    distanceTo: function(vec) {\n        return Math.sqrt((vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y));\n    },\n\n    /**\n     * Scalar Projection of A onto B assuming B is NOT a unit vector\n     * @param {Vector} vec - the vector to project onto\n     * @return {number} component of A on B\n     */\n    scalarProject: function(vec) {\n        return this.dot(vec) / vec.magnitude();\n    },\n\n    /**\n     * Calculate Scalar projection of A onto B assuming that B is a unit vector\n     * This is more efficient assuming we already have a unit vector\n     * @param {Vector} vec - the unit vector to project onto\n     * @return {number} component of A on B\n     */\n    scalarProjectUnit: function(vec) {\n        return this.dot(vec);\n    },\n\n    /**\n     * Vector Projection of A onto B assuming B is NOT a unit vector\n     * @param {Vector} vec - vector to project onto\n     * @return {This} for chaining\n     */\n    vectorProject: function(vec) {\n        let scalarComp = this.dot(vec) / vec.magnitudeSq();\n        this.x = vec.x * scalarComp;\n        this.y = vec.y * scalarComp;\n        return this;\n    },\n\n    /**\n     * Vector Projection of A onto B assuming B IS a unit vector\n     * @param {Vector} vec - vector to project onto\n     * @return {This} for chaining\n     */\n    vectorProjectUnit: function(vec) {\n        let scalarComp = this.dot(vec);\n        this.x = vec.x * scalarComp;\n        this.y = vec.y * scalarComp;\n        return this;\n    }\n};\n\nVector.prototype.translate = Vector.prototype.add;\n\n/**\n * Convenience function so we can ignore the 'new' keyword\n * @param {number} x - initial x value\n * @param {number} y - initial y value\n * @return {Vector} a new vector object\n */\nvar vector = function(x, y) {\n    return new Vector(x, y);\n};\n\n// ---------- Static Methods -----------//\n/**\n * @static\n * @param {Vector} v1 - first Vector obj\n * @param {Vector} v2 - second Vector obj\n * @return {Vector}\n *\n * Adds two vectors, and returns a new one\n */\nVector.add = function(v1, v2) {\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\n};\nVector.subtract = function(v1, v2) {\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\n};\nVector.multiply = function(v1, v2) {\n    if (typeof v1 === 'number' && typeof v2 === 'number') {\n        return v1 * v2;\n    }\n\n    if (typeof v1 === 'object' && typeof v2 === 'number') {\n        return new Vector(v1.x * v2, v1.y * v2);\n    }\n\n    if (typeof v2 === 'object' && typeof v1 === 'number') {\n        return new Vector(v1 * v2.x, v1 * v2.y);\n    }\n\n    return new Vector(v1.x * v2.x, v1.y * v2.y);\n};\nVector.dot = function(v1, v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n};\nVector.angleBetween = function(v1, v2) {\n    let a = v1.magnitude();\n    let b = v2.magnitude();\n    let d = v1.dot(v2);\n\n    let theta = Math.acos(d / (a * b));\n    return theta;\n};\nVector.perp = function(v1, side) {\n    switch (side) {\n        case 'right':\n            return new Vector(v1.y, -v1.x);\n        default:\n            return new Vector(-v1.y, v1.x);\n    }\n};\n\nexport default vector;\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/Vector.js","export const degToRad = function(angle) {\n    return angle * Math.PI / 180;\n};\n\nexport const radToDeg = function(angle) {\n    return angle * 180 / Math.PI;\n};\n\nexport const distance = function(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n};\n\nexport const map = function(value, low1, high1, low2, high2) {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/math/math.js","/* eslint\n    \"no-unused-vars\": \"off\",\n */\nimport {distance, degToRad} from '../math/math';\nimport vector, {Vector} from '../math/Vector.js';\n\nlet Ray = {\n    /**\n     * Ray object for tracing\n     * @constructs\n     * @param {number} x - origin x\n     * @param {number} y - origin y\n     * @param {number} dir - direction in radians (or degrees if 'degrees' param\n     * = true)\n     * @param {bool} degrees - optional flag, if true, then read direction as\n     * degrees\n     */\n    init: function(x, y, dir, degrees) {\n        if (degrees) {\n            dir = degToRad(dir);\n        }\n\n        this.origin = vector(x, y);\n        this.direction = vector(Math.cos(dir), Math.sin(dir));\n        this.invDirection = vector(1 / this.direction.x, 1 / this.direction.y);\n        this.outerBodies = [];\n        this.t = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;\n        let x0 = this.origin.x,\n            y0 = this.origin.y,\n            x1 = this.origin.x + this.direction.x * this.t,\n            y1 = this.origin.y + this.direction.y * this.t;\n        this.slope = (y1 - y0) / (x1 - x0);\n        // TODO: Figure out a way to give each ray a unique ID\n        this.numTests = 0;\n    },\n\n    /**\n     * Return the objects from spatial hash to perform collision detection on\n     * @param {SpatialHash} hash - hash from the System\n     */\n\n    trace: function(system) {\n        // Always use radians, regardless of mode\n        // Also angle should be in range 0 <= angle <= 2PI\n        //let angle = this.direction.getAngle();\n        this.intersectionPoint = null;\n        this.intersectingBody = null;\n        this.intersectingSegment = null;\n\n        // Iterate the rayID to ensure no duplicates\n        this.rayID = system.currentRayId++;\n        this.numTests = 0;      // debugging param - how many tests are run\n        this.intersectHash(system.hash);\n\n        // After going through all bodies and segments,\n        // if an intersection point was found...\n        if (this.intersectionPoint) {\n            return true;\n        }\n    },\n\n    /**\n     * Detect if ray intersects circle\n     * http://stackoverflow.com/questions/1073336/circle-line-segment-collision-detection-algorithm\n     *\n     * Using the following formula\n     * t^2 * (r DOT r) + 2t*( f DOT r ) + ( f DOT f - radius^2 ) = 0\n     * at^2 + bt + c where a = d.dot(d), b = 2*f.dot(d), c = f.dot(f)\n     * - radius^2\n     *      where:\n     *          d = end point of ray - start point of ray\n     *          t = scalar value - what we're solving for\n     *          r = ray vector\n     *          f = vector from center of sphere to origin of ray\n     *          radius = radius of circle\n     *\n     * 3x HIT cases:\n     *  -o->                    --|-->  |            |  --|->\n     * Impale(t1 hit,t2 hit), Poke(t1 hit,t2>1), ExitWound(t1<0, t2 hit),\n     *\n     * 3x MISS cases:\n     *     ->  o                     o ->              | -> |\n     * FallShort (t1>1,t2>1), Past (t1<0,t2<0), CompletelyInside(t1<0, t2>1)\n     *\n     * @param {Body} circle - circle body object\n     * @param {Vector} p - point of origin\n     * @param {Vector} r - ray vector\n     * @return {boolean} true if intersection was found, false otherwise\n     */\n    intersectCircle: function(circle) {\n        this.numTests += 1;\n        let radius = circle.radius;\n\n        let d = vector(this.direction.x * this.t, this.direction.y * this.t);\n        let f = Vector.subtract(this.origin, circle.position);//this.origin.clone();\n\n        // Solve the quadratic equation\n        let a = d.dot(d);\n        let b = 2 * f.dot(d);\n        let c = f.dot(f) - radius * radius;\n\n        // Descriminant b^2 - 4ac\n        let desc = (b * b) - (4 * a * c);\n\n        if (desc < 0) {\n            // No intersection\n        } else {\n            // Ray hit circle\n            // Two possible solutions\n            desc = Math.sqrt(desc);\n            let t1 = (-b - desc) / (2 * a);\n            let t2 = (-b + desc) / (2 * a);\n            let ix, iy;\n\n            // If t1 intersected the circle...\n            // Note: t1 is always closer than t2\n            if (t1 >= 0 && t1 <= 1) {\n                ix = this.origin.x + d.x * t1;\n                iy = this.origin.y + d.y * t1;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n\n            // If t1 doesn't intersect, check t2\n            if (t2 >= 0 && t2 <= 1) {\n                ix = this.origin.x + d.x * t2;\n                iy = this.origin.y + d.y * t2;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Handles case of ray-polygon intersection\n     * If an intersecting segment is found,\n     * set the props accordingly\n     * @private\n     * @param {Polygon} poly - rect body object\n     * @return {bool} true if intersected, otherwise false\n     */\n    intersectPolygon: function(poly) {\n        this.numTests += 1;\n        if (poly.isPointInterior(this.origin)) {\n            this.outerBodies.push(poly);\n        }\n        let vertices = poly.vertices;\n        let vertLength = vertices.length;\n        let intersection;\n        vertices.forEach((vert, index, verts) => {\n            let seg2;\n            if (index === vertLength - 1) {\n                seg2 = verts[0];\n            } else {\n                seg2 = verts[index + 1];\n            }\n\n            intersection = this.intersectSegment([vert, seg2]);\n            if (intersection) {\n                this.updateIntersectionPoint(intersection.intPoint, intersection.segVec, poly);\n            }\n        });\n\n        return typeof intersection !== 'undefined';\n    },\n    /**\n     * Detects Ray-Segment intersection - Returns intersection coords\n     * @param {Array} seg - segment vertices\n     * @param {Vector} dir - optional direction to use, otherwise use\n     * this.direction\n     * @return {Object} returns intersection point with body, or false\n     */\n    intersectSegment: function(seg, dir) {\n        let r = dir ?\n            vector(dir.x * this.t, dir.y * this.t) :  // Dir passed to fn\n            vector(this.t * this.direction.x, this.t * this.direction.y);   // Use ray dir\n        let p = vector(this.origin.x, this.origin.y);                           // Ray origin\n        let q = vector(seg[0].x, seg[0].y);                                     // Segment start point\n        let s = vector(seg[1].x - seg[0].x, seg[1].y - seg[0].y);               // Segment vector\n\n        // check for intersection\n        // t = (q − p) x s / (r x s)\n        // u = (q − p) x r / (r x s)\n        let rxs = r.cross(s);\n        let tmp = Vector.subtract(q, p);\n        let tNum = tmp.cross(s),\n            uNum = tmp.cross(r);\n\n        // t, u are distances traveled along vector\n        let t, u;\n        if (rxs !== 0) {\n            t = tNum / rxs;\n            u = uNum / rxs;\n        }\n\n        // TODO: handle collinear case\n        if (rxs === 0 && uNum === 0) {\n            // lines are collinear\n            return;\n        } else if (rxs === 0 && uNum !== 0) {\n            // lines are parallel and non-intersecting\n            return false;\n        } else if (rxs !== 0 && t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n            // Two lines intersect,\n            // and meet at the point\n            // p + tr = q + us\n            let px = p.x,\n                py = p.y,\n                rx = r.x,\n                ry = r.y,\n                ix = px + t * rx,\n                iy = py + t * ry;\n\n            return {\n                intPoint: vector(ix, iy),\n                segVec: s,\n                t\n            };\n        }\n\n        // Line segments do not intersect\n        // if we've gone through all the segments of the body,\n        //intersectionPoint = null;\n        return false;\n    },\n\n    /**\n     * Test for Ray-Hash bucket intersections\n     * @param {SpatialHash} hash - system.hash object\n     * @return {array} list of intersected buckets\n     *\n     * See here: http://www.cse.chalmers.se/edu/year/2011/course/TDA361_Computer_Graphics/grid.pdf\n     * THIS WORKED -> http://www.playchilla.com/ray-casting-spatial-hash-dda\n     */\n    intersectHash: function(hash) {\n        // TODO: Handle case where ray starts outside bounds\n\n        // Initialize variables\n        // Step 1. Initialization - determine starting voxel\n        let bucket = hash.hash(this.origin);\n        let {row, col} = bucket;\n        let X = col,\n            Y = row;\n        let tMaxX, tMaxY, tDeltaX, tDeltaY;\n        let stepX = this.direction.x < 0 ? -1 : 1,\n            stepY = this.direction.y < 0 ? -1 : 1;\n        let cellSize = hash.cellSize;\n\n        // Row and Col offset for picking which horizontal or veritcal segments\n        // to use for intersection tests\n        // let rowOffset = stepY < 1 ? 0 : 1,\n        //     colOffset = stepX < 1 ? 0 : 1;\n\n        tDeltaX = cellSize / Math.abs(this.direction.x);\n        tDeltaY = cellSize / Math.abs(this.direction.y);\n\n        tMaxX = X * cellSize - this.origin.x;\n        tMaxY = Y * cellSize - this.origin.y;\n        if (this.direction.x >= 0) {\n            tMaxX += cellSize;\n        }\n        if (this.direction.y >= 0) {\n            tMaxY += cellSize;\n        }\n\n        tMaxX /= this.direction.x;\n        tMaxY /= this.direction.y;\n\n        while (Y < hash.numRows &&\n                Y > -1 &&\n                X < hash.numCols &&\n                X > -1) {\n            // In debug mode - Draw buckets that ray overlaps\n            if (window.renderer.debug) {\n                window.ctx.beginPath();\n                window.ctx.globalAlpha = 1;\n                window.ctx.strokeStyle = 'orange';\n                window.ctx.lineWidth = 3;\n                window.ctx.strokeRect(X * cellSize, Y * cellSize, cellSize, cellSize);\n            }\n\n            // If we've found some contents in that hash bucket...\n            if (hash.contents[Y] && hash.contents[Y][X] && hash.contents[Y][X].length !== 0) {\n                // TODO: Here's where we need to check if the object is\n                // actually intersecting the ray\n                // Intersect all objects in this voxel only\n                let contents = hash.contents[Y][X];\n                contents.forEach(body => {\n                    if (body.intersectionPoints[this.rayID]) {\n                        // Already tested this body\n                        // It either hit or missed, if it hit, grab the point\n                        if (body.intersectionPoints[this.rayID].status === 'hit') {\n                            this.updateIntersectionPoint(\n                                body.intersectionPoints[this.rayID].intPoint,\n                                body.intersectionPoints[this.rayID].segVec,\n                                body\n                            );\n                            return;\n                        }\n\n                        // It missed, so do nothing;\n                        return;\n                    }\n\n                    // If ray and body haven't been tested, then test\n                    // If it hits the AABB, then perform\n                    // actual intersection tests\n                    let hitsAABB = this.intersectAABB(body.aabb);\n                    if (hitsAABB) {\n                        switch (body.type) {\n                            case 'polygon':\n                            case 'rectangle':\n                                this.intersectPolygon(body);\n                                break;\n                            case 'circle':\n                                this.intersectCircle(body);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n\n                    // Flag body to know we've already tested this ray-body\n                    // combo\n                    if (this.intersectionPoint) {\n                        body.intersectionPoints[this.rayID] = {\n                            status: 'hit',\n                            intPoint: this.intersectionPoint,\n                            segVeg: this.intersectingSegment\n                        };\n                    } else {\n                        // If we missed, flag the body without\n                        // intersectionPoint\n                        body.intersectionPoints[this.rayID] = {status: 'miss'};\n                    }\n                });\n            }\n\n            // Increment X or Y step\n            if (tMaxX === undefined && tMaxY === undefined) {\n                break;\n            } else if (tMaxX === undefined) {\n                tMaxY += tDeltaY;\n                Y += stepY;\n            } else if (tMaxY === undefined) {\n                tMaxX += tDeltaX;\n                X += stepX;\n            } else if (tMaxX < tMaxY) {\n                tMaxX += tDeltaX;\n                X += stepX;\n            } else if (tMaxX >= tMaxY) {\n                tMaxY += tDeltaY;\n                Y += stepY;\n            }\n        }\n\n        return {\n            hashCoordinates: {\n                x: X,\n                y: Y\n            },\n            intPoint: this.intersectionPoint\n        };\n    },\n\n    /**\n     * Axis-Aligned Bounding Box Intersection test\n     * @param {AABB} aabb - the box to test\n     * @return {boolean} true for hit, false for miss\n     */\n    intersectAABB: function(aabb) {\n        let tx1 = (aabb.min.x - this.origin.x) * this.invDirection.x;\n        let tx2 = (aabb.max.x - this.origin.x) * this.invDirection.x;\n\n        let tmin = Math.min(tx1, tx2);\n        let tmax = Math.max(tx1, tx2);\n\n        let ty1 = (aabb.min.y - this.origin.y) * this.invDirection.y;\n        let ty2 = (aabb.max.y - this.origin.y) * this.invDirection.y;\n\n        tmin = Math.max(tmin, Math.min(ty1, ty2));\n        tmax = Math.min(tmax, Math.max(ty1, ty2));\n        let didHit = tmax >= tmin && tmax >= 0;\n        return didHit;\n    },\n\n    /**\n     * Internally used to update point of intersection property\n     * @private\n     * @param {Point} intPoint - object with x and y properties representing\n     * intersection point\n     * @param {Vector} segVec - vector object that was intersected\n     * @param {Body} body - body that was intersected\n     */\n    updateIntersectionPoint: function(intPoint, segVec, body) {\n        let px = this.origin.x;\n        let py = this.origin.y;\n        let ix = intPoint.x;\n        let iy = intPoint.y;\n\n        // If there was a previously stored intersection point,\n        // check if this one is closer,\n        // and if so update it's values\n        if (this.intersectionPoint) {\n            if (distance(px, py, ix, iy) <\n                distance(px, py, this.intersectionPoint.x, this.intersectionPoint.y)) {\n                this.intersectionPoint = {x: ix, y: iy};\n                this.intersectingBody = body;\n                this.intersectingSegment = segVec;\n            }\n        } else {\n            // We don't yet have an intersection point, so make a new\n            // one\n            this.intersectionPoint = {x: ix, y: iy};\n            this.intersectingBody = body;\n            this.intersectingSegment = segVec;\n        }\n    }\n};\n\n/**\n * 'Constructor' function\n * @public\n * @param {number} x - origin x\n * @param {number} y - origin y\n * @param {number} dir - direction in radians (or degrees if 'degrees' param\n * = true)\n * @param {bool} degrees - optional flag, if true, then read direction as\n * degrees\n *\n * @return {object} ray object\n */\nvar ray = function(x, y, dir, degrees) {\n    let R = Object.create(Ray);\n    R.init(x, y, dir, degrees);\n    return R;\n};\n\nexport default ray;\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometries/Ray.js","import hash from '../geometries/SpatialHash';\nimport broadphase from '../collision/Broadphase';\nimport narrowphase from '../collision/Narrowphase';\nimport solver from '../collision/Solver';\nimport boundaryConstraint from '../constraints/BoundaryConstraint';\nimport linkConstraint from '../constraints/LinkConstraint';\nimport {GRAVITY} from '../constants/CONSTANTS';\n\n// const System = {};\n// TODO: rename params to options to be consistent with other objects\nconst System = {\n    init: function(loop, params) {\n        // Allow for no loop to be passed\n        if (typeof loop === 'function') {\n            this.loop = loop;\n        } else {\n            params = loop;\n        }\n\n        this.frames = [];\n        this.waves = [];\n        this.childWaves = [];\n        this.bodies = [];\n        this.points = [];\n        this.width = params.width || 600;\n        this.height = params.height || 300;\n        this.collisionPairs = {};\n        this.nextBodyId = 0;\n\n        this.collideBoundary = params.collideBoundary === undefined ? true : params.collideBoundary;\n        console.log('can collide with boundary', this.collideBoundary);\n\n        // Cell size will adjust to fit world precisely\n        // May not be exaclty what user initialized\n        // let divisor = params.cellSize ? params.cellSize : 100;\n        this.cellSize = this.calculateCellSize(params.cellSize || 100);\n        // Initialize spatial hash\n        this.hash = this.initializeHash(this.cellSize, this.width, this.height);\n\n        //\n        this._gravity = params.gravity === undefined ? GRAVITY.LIGHT : params.gravity;\n        // Initialize Collision objects\n        this.broadphase = broadphase();\n        this.narrowphase = narrowphase();\n        this.solver = solver();\n        this.worldForce = {\n            x: 0,\n            y: 0\n        };\n\n        // Ray ID Counter\n        this.currentRayId = 0;\n    },\n\n    calculateCellSize: function(cellSize) {\n        let divisor = cellSize ? cellSize : 100;\n        return this.width / Math.floor(this.width / divisor);\n    },\n\n    initializeHash: function(cellSize, width, height) {\n        return hash(cellSize, width, height);\n    },\n\n    addChildWave: function(wave) {\n        this.childWaves.push(wave);\n    },\n\n    addObject: function(obj) {\n        switch (obj.type) {\n            case 'rectangle':\n            case 'circle':\n            case 'polygon':\n                // Initialize new bodies with an ID use for ray intersection\n                // tests\n                obj.id = this.nextBodyId++;\n\n                // Initialize new bodies with world force\n                obj.addForce(this.worldForce.x, this.worldForce.y);\n                this.bodies.push(obj);\n                break;\n            case 'point':\n                this.points.push(obj);\n                break;\n            case 'incident':\n            case 'wave':\n                this.waves.push(obj);\n                break;\n            default:\n                throw new Error('tried to add something that\\'s not a body or a wave');\n        }\n    },\n\n    /**\n     * Add objects to the system\n     * Objects not added will not be rendered\n     * or updated\n     *\n     * @param {Sci.Object|Sci.Object[]} b - a body or wave object, or array of body objects\n     */\n    add: function(b) {\n        if (typeof b === 'object' && b.length !== undefined) {\n            b.forEach(body => {\n                this.addObject(body);\n            });\n        } else {\n            this.addObject(b);\n        }\n    },\n\n    /**\n     * Remove an object from the system\n     * @param {Body} b - the body object to remove\n     * @return {This} for chaining\n     */\n    remove: function(b) {\n        if (typeof b === 'object' && b.length !== undefined) {\n            // We have an array of things to remove\n            b.forEach(body => {\n                let idx = this.bodies.indexOf(body);\n                if (idx !== -1) {\n                    this.bodies.splice(idx, 1);\n                }\n            });\n        } else {\n            let idx = this.bodies.indexOf(b);\n            if (idx !== -1) {\n                this.bodies.splice(idx, 1);\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Update loop\n     *  For order of operations - see this deck: http://box2d.org/files/GDC2014/ErwinCoumans_ExploringMLCPSolversAndFeatherstone.pdf\n     *  1. Compute collision contacts\n     *  2. Inertia Update\n     *  3. Contact Constraints\n     *  4. Friction Constraints\n     *  5. Constraint Solver\n     *  6. Integrate position and velocity\n     *  7. Perform ray intersection tests\n     *  8. Restart\n     * Update all bodies, waves, run collision tests if necessary, and keep\n     * track of rayID's on potentially colliding bodies\n     * @param {number} dt - time step for system update (defaults to 16.666 ms)\n     * @return {This} for chaining, or getting checking last state of system\n     */\n    update: function(dt) {\n        // 1. Reset State for next loop\n        this.hash.clear();\n        this.bodies.forEach(body => {\n            // Clear out constraints\n            body.constraints = [];\n\n            // Add each body to the hash\n            this.hash.insertBody(body);\n        });\n\n        // Reset point constraints\n        // Reset constriants\n        this.points.forEach(point => {\n            point.constraints = [];\n        });\n\n        // Run User Loop\n        if (this.loop) {\n            this.loop();\n        }\n\n        // 1. Compute contacts\n        // Update forces if need be\n        if (this.worldForceNeedsSet) {\n            this.bodies.forEach(body => {\n                body.setForce(this.worldForce.x, this.worldForce.y);\n            });\n            this.worldForceNeedsSet = false;\n        }\n        if (this.worldForceNeedsUpdate) {\n            this.bodies.forEach(body => {\n                body.addForce(this.worldForce.x, this.worldForce.y);\n            });\n            this.worldForceNeedsUpdate = false;\n        }\n\n        // Update each body with Verlet Integration\n        // Put bodies into hash, check for boundary constraint if\n        // necessary\n        this.bodies.forEach(body => {\n            // And boundary collision constraint if needed\n            if (this.collideBoundary) {\n                let c = boundaryConstraint(body, this);\n                body.constraints.push(c);\n            }\n\n            // Update physics for each body\n            body.update(dt);\n        });\n\n        // Get broad collision pairs\n        let pairs = this.broadphase.getCollisionPairs(this.bodies, this.hash);\n        let collisions;\n\n        // Perform narrowphase detection on potential pairs\n        if (pairs && Object.keys(pairs).length > 0) {\n            collisions = this.narrowphase.checkForCollisions(pairs);\n        }\n\n        // If we found actual collisions\n        if (collisions && collisions.length > 0) {\n            // Solve for collisions!\n            collisions.forEach(coll => {\n                this.solver.solveCollision(coll);\n                // let {MTVAxis, overlap, body2} = coll;\n                // body2.position.add(MTVAxis.multiply(overlap));\n            });\n        }\n\n        // Solve constraints\n        this.bodies.forEach(body => {\n            body.constraints.forEach(c => {\n                this.solver.solveConstraint(c);\n                // body.velocity.add(v.multiply(dt));\n                // c.solve();\n            });\n        });\n\n        // After all velocities are resolved:\n        this.bodies.forEach(body => {\n            body.position.add(body.velocity);\n        });\n\n        // Each ray needs a unique ID for collision checking\n        // Reset currentRayID during each update loop so we can reuse these\n        // ID's\n        this.currentRayId = 0;\n\n        // Remove all child waves\n        this.childWaves = [];\n\n        // Update each wave and loop through it's chilren\n        this.waves.forEach(wave => {\n            wave.update(this);\n            this.traverseWaves(wave);\n        });\n\n        return this;\n    },\n\n    /**\n     * Recursively loop through child waves\n     * and add them to the system\n     * @private\n     * @param {Wave} wave - wave object to traverse\n     */\n    traverseWaves: function(wave) {\n        // If the wave has children\n        // Add each child to the system,\n        // then repeat for each child\n        // Exit condition -> When children have no children\n        if (wave.children.length !== 0) {\n            wave.children.forEach(child => {\n                this.addChildWave(child);\n                this.traverseWaves(child);\n            });\n        }\n    },\n\n    addWorldForce: function(x, y) {\n        this.worldForce.x += x;\n        this.worldForce.y += y;\n        this.worldForceNeedsUpdate = true;\n    },\n\n    setWorldForce: function(x, y) {\n        this.worldForce.x = x;\n        this.worldForce.y = y;\n        this.worldForceNeedsSet = true;\n    }\n};\n\nObject.defineProperty(System, 'gravityOn', {\n    get: function() {\n        return this._gravityOn;\n    },\n    set: function(isOn) {\n        if (this._gravityOn && !isOn) {\n            // turn gravity off\n            this._gravityOn = false;\n            this.worldForce.y -= this.gravity;\n            this.bodies.forEach(body => {\n                body.addForce(0, -this.gravity);\n            });\n        } else if (!this._gravityOn && isOn) {\n            // turn gravity on\n            this._gravityOn = true;\n            this.worldForce.y += this.gravity;\n            this.bodies.forEach(body => {\n                body.addForce(0, this.gravity);\n            });\n        }\n    }\n});\n\nObject.defineProperty(System, 'gravity', {\n    get: function() {\n        return this._gravity;\n    },\n    set: function(value) {\n        // Capture current gravity\n        let gravDiff = value - this._gravity;\n        this.worldForce.y += gravDiff;\n        this._gravity += gravDiff;\n        this.bodies.forEach(body => {\n            body.addForce(0, gravDiff);\n        });\n    }\n});\n\n// const CONSTANTS = {\n//     GRAVITY: 0.00004\n// };\n\n/**\n * @public\n * @param {function} loop - your update loop - used to update body states\n * @param {object} params - initialization parameters\n * @return {System}\n *\n * params\n *  - width: int - width of entire system (usually canvas width)\n *  - height: number - height of entire system\n *  - cellSize: number - requested cellSize, (system will choose closest value\n *          that precisely fits into the system width)\n */\nconst system = function(loop, params) {\n    const s = Object.create(System);\n    s.init(loop, params);\n    return s;\n};\n\nexport default system;\n\n\n\n// WEBPACK FOOTER //\n// ./src/system/System.js","const SpatialHash = {\n    init: function(cellSize, width, height) {\n        this.cellSize = cellSize;\n        this.width = width;\n        this.height = height;\n        this.numRows = Math.ceil(height / cellSize);\n        this.numCols = width / cellSize;\n        this.contents = {};\n    },\n\n    /**\n     * Return location that should store this point\n     * @param {object} point - object with x and y properties\n     * @return {object} - bucket which th epoint falls into\n     */\n    hash: function(point) {\n        return {col: Math.floor(point.x / this.cellSize), row: Math.floor(point.y / this.cellSize)};\n    },\n    insertBody: function(body) {\n        // Hash the vertices of the AABB\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                if (this.contents[r]) {\n                    if (this.contents[r][c]) {\n                        this.contents[r][c].push(body);\n                    } else {\n                        this.contents[r][c] = [body];\n                    }\n                } else {\n                    this.contents[r] = {};\n                    this.contents[r][c] = [body];\n                }\n            }\n        }\n    },\n    updateBody: function(body) {\n        this.removeBody(body);\n        this.insertBody(body);\n    },\n    removeBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And remove the object from all found buckets\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                let idx = this.contents[r][c].indexOf(body);\n                if (idx !== -1) {\n                    this.contents[r][c].splice(idx, 1);\n                }\n            }\n        }\n    },\n    queryBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n        let nearby = [];\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                this.contents[r][c].forEach(b => {\n                    if (nearby.indexOf(b) === -1 && b !== body) {\n                        nearby.push(b);\n                    }\n                });\n            }\n        }\n        return nearby;\n    },\n    queryPoint: function(point) {\n        let hash = this.hash(point);\n        return hash;\n    },\n    clear: function() {\n        this.contents = {};\n    }\n};\n\nconst hash = function(cellSize, width, height) {\n    let h = Object.create(SpatialHash);\n    h.init(cellSize, width, height);\n    return h;\n};\n\nexport default hash;\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometries/SpatialHash.js","import pair from './Pair';\nconst Broadphase = {\n    // init: function(system) {\n    //     this.system = system;\n    //     this.pairs = [];\n    //     this.collisionCounter = 0;\n    // },\n    aabbOverlap: function(body1, body2) {\n        return body1.aabb.overlap(body2.aabb);\n    },\n    canCollide: function(body1, body2) {\n        if (body1.canCollide && body2.canCollide) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Get all potential collision pairs -\n     *  1. They are within the same spatial bucket\n     *  2. They're AABB's overlap\n     *  @param {Body[]} bodies - all bodies from system\n     *  @param {SpatialHash} hash - from system\n     *  @return {Object} collision pairs - broadphase\n     */\n    getCollisionPairs: function(bodies, hash) {\n        this.collisionCounter = 0;\n        let collisionPairs = {};\n        // let collisionPairs = [];\n        for (let i = 0; i < bodies.length; i++) {\n            let body = bodies[i];\n            let nearby = hash.queryBody(body);\n\n            for (let j = 0; j < nearby.length; j++) {\n                let otherBody = nearby[j];\n                if (this.canCollide(body, otherBody)) {\n                    if (this.aabbOverlap(body, otherBody)) {\n                        let id;\n                        if (body.id < otherBody.id) {\n                            id = `${body.id}-${otherBody.id}`;\n                        } else {\n                            id = `${otherBody.id}-${body.id}`;\n                        }\n\n                        let p = pair(body, otherBody, id);\n                        // collisionPairs.push(p);\n                        if (!collisionPairs[id]) {\n                            collisionPairs[id] = p;\n                        }\n                    }\n                }\n            }\n        }\n        return collisionPairs;\n    }\n};\n\nconst broadphase = function(system) {\n    let b = Object.create(Broadphase);\n    // b.init(system);\n    return b;\n};\n\nexport default broadphase;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Broadphase.js","const Pair = {\n    init: function(b1, b2, index) {\n        this.bodies = [b1, b2];\n        this.index = index;\n    }\n};\n\nconst pair = function(b1, b2, index) {\n    let p = Object.create(Pair);\n    p.init(b1, b2, index);\n    return p;\n};\n\nexport default pair;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Pair.js","import SAT from './SAT';\nconst Narrowphase = {\n    // init: function(hash) {\n    //     this.hash = hash;\n    // },\n    checkForCollisions: function(pairs) {\n        // Object\n        let collisions = [];\n        if (typeof pairs === 'object' && pairs.length === undefined) {\n            let keys = Object.keys(pairs);\n            for (let i = 0; i < keys.length; i++) {\n                let pair = pairs[keys[i]];\n                let b1 = pair.bodies[0];\n                let b2 = pair.bodies[1];\n                let collision = SAT.intersect(b1, b2);\n\n                if (collision) {\n                    b1.colliderList.push(collision);\n                    b2.colliderList.push(collision);\n                    collisions.push(collision);\n                }\n            }\n        } else if (typeof pairs === 'object' && pairs.length > 0) {\n            // Array\n            for (let i = 0; i < pairs.length; i++) {\n                let pair = pairs[i];\n                let b1 = pair.bodies[0];\n                let b2 = pair.bodies[1];\n                let collision = SAT.intersect(b1, b2);\n\n                if (collision) {\n                    b1.colliderList.push(collision);\n                    collisions.push(collision);\n                }\n            }\n        }\n        return collisions;\n    }\n};\n\nconst narrowphase = function() {\n    let n = Object.create(Narrowphase);\n    // n.init(hash);\n    return n;\n};\n\nexport default narrowphase;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Narrowphase.js","import {Vector} from '../math/Vector';\nimport collision from './Collision';\n\nconst SAT = {};\n\n/**\n * Determine min and max projection components along a\n * given axis\n *\n * @param {Body} b - the body whos vertices to project\n * @param {Vector} axis - the axis to project onto. Should be a unit vector\n *\n * @return {Object} min and max values of projected vertices\n */\nSAT.projectBody = function(b, axis) {\n    if (b.type === 'rectangle' || b.type === 'polygon') {\n        let min = b.vertices[0].scalarProjectUnit(axis);\n        let max = min;\n\n        for (let i = 0; i < b.vertices.length; i++) {\n            let v = b.vertices[i];\n            let p = v.scalarProjectUnit(axis);\n            if (p < min) {\n                min = p;\n            } else if (p > max) {\n                max = p;\n            }\n        }\n        return {min, max};\n    } else if (b.type === 'circle') {\n        let p = b.interpolatedPosition.scalarProjectUnit(axis);\n        return {min: p - b.scaledRadius, max: p + b.scaledRadius};\n    }\n};\n\n/**\n * @param {number} p1min - min point of 1st line\n * @param {number} p1max - max point of 1st line\n * @param {number} p2min - min point of 2nd line\n * @param {number} p2max - max point of 2nd line\n * @return {number} amount of overlap of these two lines\n *\n */\nSAT.lineOverlap = function(p1min, p1max, p2min, p2max) {\n    return Math.max(0, Math.min(p1max, p2max) - Math.max(p1min, p2min));\n};\n\n/**\n * Rect-Rect intersection test\n * @param {Sci.Rect} b1 - first body\n * @param {Sci.Rect} b2 - second body\n * @return {bool} true or false, if intersection occurred\n * @todo optimize like crazy, we only need to do four axes, not eight\n * see here: https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\n *\n * @todo should return collision data, not just true or false\n * see here: http://www.dyn4j.org/2010/01/sat/\n */\n\nSAT.intersect = function(b1, b2) {\n    if (b1.type === 'rectangle' || b1.type === 'polygon') {\n        if (b2.type === 'circle') {\n            return SAT.polycircle(b1, b2);\n        }\n\n        // b2 must then be a Polygon (or a rectangle)\n        return SAT.polypoly(b1, b2);\n    }\n\n    if (b1.type === 'circle') {\n        if (b2.type === 'circle') {\n            return SAT.circlecircle(b1, b2);\n        }\n\n        // b2 Must be a polygon or a rectangle\n        return SAT.polycircle(b1, b2);\n    }\n};\nSAT.circlecircle = function(c1, c2) {\n    let v1 = Vector.subtract(c2.interpolatedPosition, c1.interpolatedPosition);\n    let d = v1.magnitude();\n    let rplusr = c1.scaledRadius + c2.scaledRadius;\n\n    if (d < rplusr) {\n        // return {MTVAxis: v1.normalize(), overlap: rplusr - d};\n        return collision(c1, c2, v1.normalize(), rplusr - d);\n    }\n    return;\n};\n\n/**\n * @param {Polygon} p1 - first poly\n * @param {Polygon} p2 - second poly\n * @return {Object} Collision results, or undefined if no collision\n *\n * @todo Containment - doesn't appropriately handle containment\n */\nSAT.polypoly = function(p1, p2) {\n    // Gather all axes to test\n    let axes = [],\n        smallestOverlap,\n        MTVAxis,\n        numVerts1 = p1.vertices.length,\n        numVerts2 = p2.vertices.length;\n\n    // Get axes for rect\n    // Only need two sides for testing\n    if (p1.type === 'rectangle') {\n        numVerts1 = 2;\n    }\n    for (let i = 0; i < numVerts1; i++) {\n        let v1 = p1.vertices[i];\n        let v2 = p1.vertices[i + 1 === p1.vertices.length ? 0 : i + 1];\n        let axis = Vector.subtract(v2, v1);\n        axis.normalize().perp();\n        axes.push(axis);\n    }\n\n    if (p2.type === 'rectangle') {\n        numVerts2 = 2;\n    }\n    // Get axes for polygon\n    // Need all sides\n    for (let i = 0; i < numVerts2; i++) {\n        let v1 = p2.vertices[i];\n        let v2 = p2.vertices[i + 1 === p2.vertices.length ? 0 : i + 1];\n        let axis = Vector.subtract(v2, v1);\n        axis.normalize().perp();\n        axes.push(axis);\n    }\n\n    // Perform intersection test along all axes\n    for (let i = 0; i < axes.length; i++) {\n        let axis = axes[i];\n\n        // Get min and max projectsion\n        let p1Projection = this.projectBody(p1, axis);\n        let p2Projection = this.projectBody(p2, axis);\n\n        // Test for overlap of projections\n        let overlap = this.lineOverlap(p1Projection.min, p1Projection.max, p2Projection.min, p2Projection.max);\n\n        // If at any point the overlap is zero, then we're guarenteed\n        // to have no collision, so exit the test\n        if (overlap === 0) {\n            return;\n        }\n\n        if (smallestOverlap) {\n            if (overlap < smallestOverlap) {\n                smallestOverlap = overlap;\n                MTVAxis = axis;\n            }\n        } else {\n            smallestOverlap = overlap;\n            MTVAxis = axis;\n        }\n    }\n\n    // Will return true if overlap never equals 0, meaning all\n    // projections overlap to some degree, so a collision is happening\n    // return {MTV: {axis: MTVAxis, magnitude: smallestOverlap}};\n    return collision(p1, p2, MTVAxis, smallestOverlap);\n};\n\nSAT.polycircle = function(b1, b2) {\n    let p, c;\n    if (b1.type === 'circle') {\n        c = b1;\n        p = b2;\n    } else {\n        c = b2;\n        p = b1;\n    }\n\n    // Gather all axes to test\n    let axes = [],\n        smallestOverlap,\n        MTVAxis,\n        numVerts1 = p.vertices.length;\n\n    // smallest distance vector from polygon vertex to circle center\n    let d;\n\n    for (let i = 0; i < numVerts1; i++) {\n        let v1 = p.vertices[i];\n        let v2 = p.vertices[i + 1 === p.vertices.length ? 0 : i + 1];\n        let axis = Vector.subtract(v2, v1);\n        axis.normalize().perp();\n        axes.push(axis);\n\n        // Get distance of vertex to circle center\n        let vc = Vector.subtract(c.interpolatedPosition, v1);\n        if (d) {\n            if (vc.magnitudeSq() < d.magnitudeSq()) {\n                d = vc;\n            }\n        } else {\n            d = vc;\n        }\n    }\n\n    axes.push(d.normalize());\n\n    // Perform intersection test along all axes\n    for (let i = 0; i < axes.length; i++) {\n        let axis = axes[i];\n\n        // Get min and max projectsion\n        let pProjection = this.projectBody(p, axis);\n        let cProjection = this.projectBody(c, axis);\n\n        // Test for overlap of projections\n        let overlap = this.lineOverlap(pProjection.min, pProjection.max, cProjection.min, cProjection.max);\n\n        // If at any point the overlap is zero, then we're guarenteed\n        // to have no collision, so exit the test\n        if (overlap === 0) {\n            return;\n        }\n\n        if (smallestOverlap) {\n            if (overlap < smallestOverlap) {\n                smallestOverlap = overlap;\n                MTVAxis = axis;\n            }\n        } else {\n            smallestOverlap = overlap;\n            MTVAxis = axis;\n        }\n    }\n\n    // Will return true if overlap never equals 0, meaning all\n    // projections overlap to some degree, so a collision is happening\n    return collision(b1, b2, MTVAxis, smallestOverlap);\n};\n\nexport default SAT;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/SAT.js","const Collision = {\n    init: function(b1, b2, mtv, overlap) {\n        this.body1 = b1;\n        this.body2 = b2;\n        this.mtvaxis = mtv;\n        this.overlap = overlap;\n    }\n};\n\nconst collision = function(b1, b2, mtv, overlap) {\n    let c = Object.create(Collision);\n    c.init(b1, b2, mtv, overlap);\n    return c;\n};\n\nexport default collision;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Collision.js","import vector, {Vector} from '../math/Vector';\n\nconst Solver = {\n    // Collision Types\n    INELASTIC: 'inelastic',\n    ELASTIC: 'elastic',\n\n    getCollisionType: function(b1, b2) {\n        if (b1.collisionType === 'inelastic' || b2.collisionType === 'inelastic') {\n            return this.INELASTIC;\n        }\n        return this.ELASTIC;\n    },\n\n\n    /**\n     * Resolve collision\n     * @param {Collision} collision - collision object to resolve\n     *\n     * @todo: right now just directly manipulates position - things are\n     * very jittery, but it works for now.\n     */\n    solveCollision: function(collision) {\n        // Solve for body collision\n        let {body1, body2, mtvaxis, overlap} = collision;\n        let xOverlap = Math.abs(mtvaxis.x * overlap);\n        let yOverlap = Math.abs(mtvaxis.y * overlap);\n        let resolutionVector = vector(xOverlap, yOverlap);\n        let collisionType = this.getCollisionType(body1, body2);\n\n        // SEE HERE:\n        // https://gamedevelopment.tutsplus.com/tutorials/how-to-create-a-custom-2d-physics-engine-the-basics-and-impulse-resolution--gamedev-6331\n        // let b1Mass = body1.mass;\n        // let b1InvMass = body1.invMass;\n        // let b2Mass = body2.mass;\n        // let b2InvMass = body2.invMass;\n        // //\n        // // Vec2 rv = B.velocity - A.velocity\n        // let relVel = Vector.subtract(body2.velocity, body1.velocity);\n        //\n        // // Calculate relative velocity in terms of the normal direction\n        // // float velAlongNormal = DotProduct( rv, normal )\n        // let velAlongNormal = Vector.dot(relVel, mtvaxis);\n        //\n        // if (velAlongNormal > 0) {\n        //     return;\n        // }\n        //\n        // // Min restitution\n        // let e = Math.min(body1.restitution, body2.restitution);\n        //\n        // let j = -(1 + e) * velAlongNormal;\n        // j /= body1.invMass + body2.invMass;\n        //\n        // // impulse vector\n        // let impulse = Vector.multiply(mtvaxis, j);\n        //\n        // // Apply impulse\n        // body1.velocity.x -= impulse.x * body1.invMass;\n        // body1.velocity.y -= impulse.y * body1.invMass;\n        // body2.velocity.x += impulse.x * body2.invMass;\n        // body2.velocity.y += impulse.y * body2.invMass;\n\n        // body2.velocity.add()\n\n\n        // // Calculate impulse scalar\n        // float j = -(1 + e) * velAlongNormal\n        // j /= 1 / A.mass + 1 / B.mass\n        //\n        // // Apply impulse\n        // Vec2 impulse = j * normal\n        // A.velocity -= 1 / A.mass * impulse\n        // B.velocity += 1 / B.mass * impulse\n\n\n\n\n        // if there is an xOverlap\n        if (xOverlap !== 0) {\n            let xDir = 1;\n            if (body1.aabb.min.x < body2.aabb.min.x) {\n                // Move body1 to the left and body2 to the right\n                xDir = -1;\n            }\n\n            if (!body1.static) {\n                body1.interpolatedPosition.x += resolutionVector.x / 2 * xDir;\n            }\n            if (!body2.static) {\n                body2.interpolatedPosition.x -= resolutionVector.x / 2 * xDir;\n            }\n        }\n\n        // If there's a y overlap\n        if (yOverlap !== 0) {\n            let yDir = 1;\n            // And body1 is lower on screen than body 2\n            if (body1.aabb.min.y < body2.aabb.min.y) {\n                // Move body 1 up and body 2 down\n                yDir = -1;\n            }\n\n            if (!body1.static) {\n                body1.interpolatedPosition.y += resolutionVector.y / 2 * yDir;\n            }\n            if (!body2.static) {\n                body2.interpolatedPosition.y -= resolutionVector.y / 2 * yDir;\n            }\n        }\n\n        // body1.constraints.forEach(constraint => {\n        //     constraint.solve();\n        // });\n        // body2.constraints.forEach(constraint => {\n        //     constraint.solve();\n        // });\n    },\n    solveConstraint: function(constraint) {\n        constraint.solve();\n    }\n};\n\nconst solver = function() {\n    let s = Object.create(Solver);\n    return s;\n};\n\nexport default solver;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/Solver.js","import constraint from './Constraint';\nimport {Vector} from '../math/Vector';\n\nconst boundaryConstraint = function(body, bounds, distance) {\n    let C = constraint('boundary', body, null, bounds, distance);\n\n    C.solve = function() {\n        let minX = body.aabb.min.x;\n        let minY = body.aabb.min.y;\n        let maxX = body.aabb.max.x;\n        let maxY = body.aabb.max.y;\n        switch (body.type) {\n            case 'circle': {\n                let minX = body.aabb.min.x;\n                let minY = body.aabb.min.y;\n                let maxX = body.aabb.max.x;\n                let maxY = body.aabb.max.y;\n                let radius = body.radius;\n                // Instead of setting position directly, can we apply a force?\n                // get the normal direction of the velocity...\n                // let normal = Vector.perp(body.velocity);\n                // Satisfy condition where\n                if (minX < 0) { body.setX(radius); }\n                if (minY < 0) { body.setY(radius); }\n                if (maxX > bounds.width) { body.setX(bounds.width - radius); }\n                if (maxY > bounds.height) { body.setY(bounds.height - radius); }\n                break;\n            }\n            case 'rectangle': {\n                let width = maxX - minX;\n                let height = maxY - minY;\n                if (minX < 0) { body.setX((width - body.width) / 2); }\n                if (minY < 0) { body.setY(height - body.height) / 2; }\n                if (maxX > bounds.width) { body.setX(bounds.width - body.width - (width - body.width) / 2); }\n                if (maxY > bounds.height) { body.setY(bounds.height - body.height - (height - body.height) / 2); }\n                break;\n            }\n            case 'polygon': {\n                let width = maxX - minX;\n                let height = maxY - minY;\n                if (minX < 0) { body.setX(0); }\n                if (minY < 0) { body.setY(0); }\n                if (maxX > bounds.width) { body.setX(bounds.width - body.width - (width - body.width ) / 2); }\n                if (maxY > bounds.height) { body.setY(bounds.height - body.height - (height - body.height ) / 2); }\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    return C;\n};\n\nexport default boundaryConstraint;\n\n\n\n// WEBPACK FOOTER //\n// ./src/constraints/BoundaryConstraint.js","// import {Vector} from '../math/Vector';\n\nconst Constraint = {\n    init: function(body1, body2, bounds, distance, forces) {\n        this.body1 = body1;\n        this.body2 = body2;\n        this.bounds = bounds;\n        this.distance = distance;\n        this.forces = forces;\n    },\n    enable: function() {\n        if (this.body1) {\n            this.body1.constraints.push(this);\n        }\n        if (this.body2) {\n            this.body2.constraints.push(this);\n        }\n    }\n};\n\nconst constraint = function(...args) {\n    let type = args[0];\n    let c = Object.create(Constraint);\n    c.type = args[0];\n\n    switch (type) {\n        case 'boundary':\n            c.init(args[1], null, args[3], null, null);\n            break;\n        case 'link':\n            c.init(args[1], args[2], null, args[3], null);\n            break;\n        default:\n            throw new Error('I don\\'t know how to handle that kind of constraint!');\n    }\n\n    return c;\n};\n\nexport default constraint;\n\n\n\n// WEBPACK FOOTER //\n// ./src/constraints/Constraint.js","import constraint from './Constraint';\n\nconst linkConstraint = function(body1, body2, dist) {\n    let C = constraint('link', body1, body2, dist);\n    C.type = 'link';\n\n    C.solve = function() {\n        // Just try and solve this one constraint\n        if (body2.type === 'point') {\n            // let fc = {x: 0, y: 0};\n            let p = body2.position.clone();\n            p.subtract(body1.interpolatedPosition);\n            let v = body1.velocity;\n            let fext = body1.force;\n            let mass = body1.mass;\n\n            let lambda = (p.dot(fext) - (v.dot(v) * mass)) / (p.dot(p));\n            // let lambda = -(p.x * v.x + p.y * v.y + 1)*mass / (2 * (p.x * p.x + p.y * p.y));\n\n            let pc = {\n                x: p.x * lambda,\n                y: p.y * lambda\n            };\n\n            // let la\n            body1.velocity.add(pc);\n            console.log(p.magnitude());\n        }\n\n    };\n\n    return C;\n};\n\nexport default linkConstraint;\n\n\n\n// WEBPACK FOOTER //\n// ./src/constraints/LinkConstraint.js","// Physical Constants\nconst GRAVITY = {\n    LIGHT: 0.00004,\n    MEDIUM: 0.0001,\n    HEAVY: 0.0004\n};\nconst MATERIALS = {\n    Rock: {density: 0.6, restitution: 0.1},\n    Wood: {density: 0.3, restitution: 0.2},\n    Metal: {density: 1.2, restitution: 0.05},\n    BouncyBall: {density: 0.3, restitution: 0.8},\n    SuperBall: {density: 0.3, restitution: 0.95},\n    Pillow: {density: 0.1, restitution: 0.2},\n    Static: {density: 0.0, restitution: 0.4}\n};\n\nexport {\n    MATERIALS,\n    GRAVITY\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants/CONSTANTS.js","import * as math from '../math/math';\n// TODO: rename params to options to be consistent with other objects\nconst Renderer = {\n    init: function(system, params) {\n        this.clearBackground = params.clearBackground === undefined ? true : params.clearBackground;\n        console.log(this.clearBackground);\n        this.background = params.background || 'black';\n        this.borderColor = params.borderColor;\n        this.system = system;\n        // this.loop = loop;\n\n        // Initialize Canvas element\n        // Pardon the ugly ternary...\n        this.canvas = (typeof params.canvas === 'undefined') ?\n            (function() {\n                let c = document.createElement('canvas');\n                c.id = 'canvas';\n                // Set default size\n                document.body.appendChild(c);\n                return c;\n            })() : (function() {\n                // Default values for canvas size\n                let c = document.getElementById(params.canvas);\n                return c;\n            })();\n\n        // Set canvas based on system size\n        this.canvas.width = this.system.width;\n        this.canvas.height = this.system.height;\n        this.ctx = this.canvas.getContext('2d');\n\n        // Draw background\n        this.ctx.beginPath();\n        this.ctx.globalAlpha = 1;\n        this.ctx.fillStyle = this.background;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        // Timing for render loop\n        this.frameTimestep = 0;\n        this.fps = 60;\n        this.dt = 1000 / this.fps;\n\n        // Debug Params\n        this.debug = params.debug === undefined ? false : params.debug;\n        if (this.debug) {\n            window.renderer = this;\n            window.ctx = this.canvas.getContext('2d');\n        }\n    },\n\n    /**\n     * Resize the canvas\n     * @param {number} width - new width of canvas\n     * @param {number} height - new height of canvas\n     * @param {number} [cellSize] - optional. set a new cell size for the\n     * spatial hash\n     */\n    resize: function(width, height, cellSize) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.system.width = width;\n        this.system.height = height;\n        this.system.cellSize = this.system.calculateCellSize(cellSize || this.system.cellSize);\n        this.system.hash = this.system.initializeHash(this.system.cellSize, width, height);\n    },\n\n    drawPoint: function(point) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(point.position.x, point.position.y, 3, 3, 0, 0, Math.PI * 2);\n        this.ctx.strokeStyle = 'red';\n        this.ctx.lineWidth = 1;\n        this.ctx.stroke();\n    },\n    /**\n     * Draw a body object\n     * @private\n     * @param {Body} body - phys.system object containing all objects\n     */\n    drawBody: function(body, pct) {\n        if (body.debug) {\n            if (body.type === 'circle') {\n                this.ctx.beginPath();\n                let cx = body.position.x;\n                let cy = body.position.y;\n                let rx = Math.cos(body.rotation) * body.radius;\n                let ry = Math.sin(body.rotation) * body.radius;\n                this.ctx.moveTo(cx, cy);\n                this.ctx.lineTo(cx + rx, cy + ry);\n                this.ctx.strokeStyle = 'red';\n                this.ctx.stroke();\n            }\n            this.ctx.beginPath();\n            let aabb = body.aabb;\n            let x = aabb.min.x;\n            let y = aabb.min.y;\n            let w = aabb.max.x - x;\n            let h = aabb.max.y - y;\n            this.ctx.rect(x, y, w, h);\n            this.ctx.strokeStyle = 'red';\n            this.ctx.lineWidth = .5;\n            this.ctx.stroke();\n        }\n        if (this.debug) {\n            this.ctx.beginPath();\n            this.ctx.globalAlpha = 1;\n            this.ctx.strokeStyle = 'red';\n            this.ctx.lineWidth = 1;\n\n            let aabb = body.aabb;\n            let x = aabb.min.x;\n            let y = aabb.min.y;\n            let w = aabb.max.x - x;\n            let h = aabb.max.y - y;\n            this.ctx.rect(x, y, w, h);\n            this.ctx.stroke();\n\n            if (body.vertices) {\n                body.vertices.forEach(vert => {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = 'magenta';\n                    this.ctx.lineWidth = 2;\n                    this.ctx.ellipse(vert.x, vert.y, 4, 4, 0, 0, Math.PI * 2);\n                    this.ctx.stroke();\n                });\n            }\n            if (body.centroid) {\n                this.ctx.beginPath();\n                this.ctx.strokeStyle = 'red';\n                this.ctx.lineWidth = 3;\n                this.ctx.ellipse(body.centroid.x, body.centroid.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.stroke();\n            }\n        }\n\n        // Start a new path for each body\n        this.ctx.beginPath();\n        this.ctx.globalAlpha = 1;\n        switch (body.type) {\n            case 'rectangle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                this.ctx.lineJoin = 'miter';\n                if (body.debug) {\n                    if (body.colliderList.length > 0) {\n                        this.ctx.strokeStyle = 'green';\n                    } else {\n                        this.ctx.strokeStyle = 'white';\n                    }\n                }\n                this.ctx.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (let i = 1; i < body.vertices.length; i++) {\n                    let v = body.vertices[i];\n                    this.ctx.lineTo(v.x, v.y);\n                }\n                this.ctx.closePath();\n                this.ctx.fill();\n                this.ctx.stroke();\n                break;\n            }\n            case 'circle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n\n                if (body.debug) {\n                    if (body.colliderList.length > 0) {\n                        this.ctx.strokeStyle = 'green';\n                    } else {\n                        this.ctx.strokeStyle = 'white';\n                    }\n                }\n\n                this.ctx.ellipse(\n                    body.position.x,\n                    body.position.y,\n                    body.scaledRadius,\n                    body.scaledRadius,\n                    0,\n                    0,\n                    Math.PI * 2\n                );\n                // this.ctx.closePath();\n                this.ctx.stroke();\n                // this.ctx.fill();\n                break;\n            }\n            case 'polygon': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                this.ctx.lineJoin = 'miter';\n                this.ctx.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (let i = 1; i < body.vertices.length; i++) {\n                    let v = body.vertices[i];\n                    this.ctx.lineTo(v.x, v.y);\n                }\n                this.ctx.closePath();\n                this.ctx.fill();\n                this.ctx.stroke();\n                break;\n            }\n            default:\n                break;\n        }\n    },\n    drawWave: function(wave) {\n        // No matter what the angle mode, always use radians\n        let angle = wave.mode === 'DEGREES' ? math.degToRad(wave.direction) : wave.direction;\n\n        // Set wave style properties\n        this.ctx.fillStyle = wave.style.fillStyle;\n        this.ctx.lineWidth = wave.style.lineWidth;\n        this.ctx.strokeStyle = wave.style.strokeStyle;\n        this.ctx.globalAlpha = math.map(wave.intensity, 0, 1, 0.1, 1);\n\n        // If debug == true, draw waves in certain colors\n        if (this.debug) {\n            if (wave.type === 'incident') {\n                // Draw starting circle\n                this.ctx.beginPath();\n                this.ctx.fillStyle = 'yellow';\n                this.ctx.ellipse(wave.position.x, wave.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.fill();\n                this.ctx.stroke();\n                this.ctx.strokeStyle = 'green';\n            } else if (wave.type === 'refracted') {\n                this.ctx.strokeStyle = 'blue';\n            } else if (wave.type === 'reflected') {\n                this.ctx.strokeStyle = 'orange';\n            }\n        }\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(wave.position.x, wave.position.y);\n\n        // If the wave intersects an object ahead, then\n        // only draw to that object. Otherwise draw an arbitrary length\n        if (wave.ray.intersectionPoint) {\n            this.ctx.lineTo(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y);\n            this.ctx.stroke();\n\n            // Draw intersection points as circles\n            // when in debug mode\n            if (this.debug) {\n                this.ctx.beginPath();\n                this.ctx.strokeStyle = 'red';\n                this.ctx.lineWidth = 0.5;\n                this.ctx.ellipse(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.stroke();\n            }\n        } else {\n            this.ctx.lineTo(2000 * Math.cos(angle) + wave.position.x, 2000 * Math.sin(angle) + wave.position.y);\n            this.ctx.stroke();\n        }\n    },\n\n    // Combined Patterns from Matter.js\n    // - https://github.com/liabru/matter-js/blob/master/src/core/Runner.js\n    // and this tutorial:\n    // https://gamedevelopment.tutsplus.com/tutorials/how-to-create-a-custom-2d-physics-engine-the-core-engine--gamedev-7493#timestepping\n    run: function() {\n        let self = this;\n        this.lastTick = 0;\n        let animate = time => {\n            this._requestID = window.requestAnimationFrame(animate);\n\n            if (time) {\n                this.tick(time);\n            }\n        };\n        animate();\n    },\n\n    // Clamping frameTimestep make a gigantic difference\n    tick: function(time) {\n        // Get time between this and the previous ticks\n        let elapsedTime = time - this.lastTick;\n\n        // Add the time to a counter\n        this.frameTimestep += elapsedTime;\n\n        // Update previous tick time\n        this.lastTick = time;\n\n        // Magic happens here\n        // if the elapsed time between this tick and the last tick is large\n        // (because the update or render code took a long time), then the\n        // engine would stall out.  Nothing would update while we're waiting\n        // for the long running code to finish.  So we clamp down the frame\n        // timestep to a small value.\n        if (this.frameTimestep > 50) {\n            this.frameTimestep = 50;\n        }\n\n        // If there's a large difference between the time of this frame and the\n        // previous frame, then this code will run a bunch of times,\n        // essentially stalling the renderer.  The engine can't render while\n        // the physics is updating, after all.  To combat this, we clamp down\n        // the frameTimestep above so that only a few updates run before\n        // everything renders.\n        while (this.frameTimestep > this.dt) {\n            this.system.update(this.dt);\n            this.frameTimestep -= this.dt;\n        }\n\n        // In the case where the frameTimestep is some in between value between\n        // 0 and dt, we can linearly interpolate rendered values of the bodies\n        // this won't actually effect the physics, but it'll make things look\n        // smoother\n        // pct is the fraction between 0 and dt, thus we should interpolate\n        // the position by that percentage\n        let pct = this.frameTimestep / this.dt;\n        // Render the system\n        this.render(pct);\n    },\n\n    render: function(pct) {\n        // Clear background\n        if (this.clearBackground) {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n            // Draw background\n            this.ctx.beginPath();\n            this.ctx.globalAlpha = 1;\n            this.ctx.lineWidth = 1;\n            this.ctx.fillStyle = this.background;\n            this.ctx.strokeStyle = this.borderColor;\n            this.ctx.rect(0, 0, this.canvas.width, this.canvas.height);\n            this.ctx.fill();\n            this.ctx.stroke();\n        }\n\n        // Update the system\n        // FIXME: this.laststate isn't doing anything right now\n        // this.lastState = this.system.update(this.timing);\n\n        // Draw all objects + waves\n        this.system.bodies.forEach(body => {\n\n            this.drawBody(body, pct);\n        });\n\n        if (this.debug) {\n            this.system.points.forEach(point => {\n                    this.drawPoint(point);\n            });\n        }\n\n        // Update all waves\n        this.system.waves.forEach(wave => {\n            this.drawWave(wave, pct);\n        });\n\n        // Update all child waves\n        this.system.childWaves.forEach(wave => {\n            this.drawWave(wave, pct);\n        });\n\n        // If in debug mode, draw spatial hash\n        // and highlight nodes that contain items in red\n        if (this.debug === true) {\n            let cellSize = this.system.hash.cellSize;\n            this.ctx.globalAlpha = 1;\n            this.ctx.lineWidth = 1;\n            for (let i = 0; i < this.system.hash.width; i += cellSize) {\n                for (let j = 0; j < this.system.hash.height; j += cellSize) {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = 'green';\n                    this.ctx.rect(i, j, cellSize, cellSize);\n                    this.ctx.stroke();\n                }\n            }\n            Object.keys(this.system.hash.contents).forEach(row => {\n                Object.keys(this.system.hash.contents[row]).forEach(col => {\n                    // Draw all squares\n                    // this.ctx.strokeStyle = 'green';\n                    if (this.system.hash.contents[row][col].length !== 0) {\n                        this.ctx.beginPath();\n                        this.ctx.strokeStyle = 'red';\n                        this.ctx.lineWidth = 1;\n                        this.ctx.rect(col * cellSize, row * cellSize, cellSize, cellSize);\n                        this.ctx.stroke();\n                    }\n                });\n            });\n        }\n    },\n\n    /**\n     * Set's size of renderers canvas\n     * @param {number} width - width of canvas\n     * @param {number} height - height of canvas\n     */\n    setSize: function(width, height) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    },\n    /**\n     * Stop animation cycle\n     */\n    stop: function() {\n        cancelAnimationFrame(this._requestID);\n    },\n\n    /**\n     * Restart animation cycle\n     */\n    start: function() {\n        this.render(this.system);\n    }\n};\n\nvar renderer = function(system, params) {\n    let R = Object.create(Renderer);\n    R.init(system, params);\n    return R;\n};\n\nexport default renderer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/renderer/Renderer.js","/* eslint\n    \"no-multi-spaces\": \"off\"\n */\nimport Body from './Body';\nimport aabb from '../geometries/AABB';\nimport vector from '../math/Vector';\n\nvar rect = function(options) {\n    options = options || {};\n\n    let B = Object.create(Body);\n    B.init(options);\n    B.type = 'rectangle';\n    B._mode = options.mode || 'LEFT';\n\n    B.inertia = (B.mass / 12) * (B.height * B.height + B.width * B.width);\n    B.invInertia = 1 / B.inertia;\n\n    // Define getters and setters for mode\n    Object.defineProperty(B, 'mode', {\n        get: function() {\n            return this._mode;\n        },\n        set: function(m) {\n            if (this._mode !== m && this.type === 'rectangle') {\n                switch (m) {\n                    case 'LEFT':\n                    case 'CENTER':\n                    case 'RIGHT':\n                        this._mode = m;\n                        this.updateVertices();\n                        break;\n                    default:\n                        console.warn(`Cannot set mode to ${m}`);\n                        break;\n                }\n            } else {\n                console.warn(`'mode' is only available on rectangles`);\n            }\n        }\n    });\n\n    /**\n     * Update location of vertices - used in update loop\n     * @todo Move this onto the Body\n     */\n    // B.updateVertices = function() {\n    //     let w = this.width,\n    //         h = this.height,\n    //         x = this.position.x,\n    //         y = this.position.y;\n    //     switch (this._mode) {\n    //         case 'CENTER':\n    //             x -= (w / 2);\n    //             y -= (h / 2);\n    //             break;\n    //         case 'RIGHT':\n    //             x -= w;\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    //\n    //     //Get centroid\n    //     let centroid = vector(\n    //         (x + (x + w)) / 2,      // <-- x value\n    //         (y + (y + h)) / 2       // <-- y value\n    //     );\n    //     B.centroid = centroid;\n    //\n    //     B.vertices = [\n    //         vector(x, y),\n    //         vector(x + w, y),\n    //         vector(x + w, y + h),\n    //         vector(x, y + h)\n    //     ];\n    //\n    //     // To perform a rotation, we have to first translate to the origin,\n    //     // then rotate, then translate back to the centroid\n    //     if (B.angularVelocity !== 0 || B._rotation !== 0 || B._scale !== 0) {\n    //         B.vertices.forEach(vertex => {\n    //             vertex.translate(-centroid.x, -centroid.y)\n    //                 .rotate(this._rotation)\n    //                 .multiply(this._scale)\n    //                 .translate(centroid.x, centroid.y);\n    //         });\n    //     }\n    // };\n\n    B.isPointInterior = function(x, y) {\n        let bx = B.position.x,\n            by = B.position.y;\n\n        if (x >= bx &&\n            x <= bx + B.width &&\n            y >= by &&\n            y <= by + B.height) {\n            return true;\n        }\n        return false;\n    };\n\n    B.updateVertices();\n    B.aabb = aabb(B);\n    return B;\n};\n\nexport default rect;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Rect.js","/* eslint \"no-unused-vars\": \"off\" */\n// What should a body be able to do?\n// 1. Attach to other bodies or surfaces\n// 2. Respond to forces (spring, friction)\n// 3. Move according to velocity and acceleration\n\nimport materials from '../extras/materials.json';\nimport vector, {Vector} from '../math/Vector';\nimport * as math from '../math/math';\n\n/**\n * Convenience Function so user doesn't have use 'new' keyword\n * @param {object} options - initialization options\n * @return {Body} instance of Body\n */\n\nlet Body = {\n    init: function(options) {\n        options = options || {};\n\n        // Warn user if a body object is initialized with nothing or an empty\n        // object\n        if (Object.keys(options).length === 0 && options.constructor === Object) {\n            console.warn('You probably should initialize body objects with some values...just sayin');\n        }\n\n        // STYLE //\n        this.style = {\n            fillStyle: options.fillStyle || 'rgba(0,0,0,0)',\n            lineWidth: options.lineWidth || 2,\n            strokeStyle: options.strokeStyle || '#abcabc'\n        };\n        this.height = options.height || 10;\n        this.width = options.width || 10;\n\n        // PHYSICAL Properties //\n        // Mass = density * volume;\n        this._mass = options.mass || 1;\n        this.invMass = 1 / this._mass;\n        // Inertial is calculated on a shape by shape basis, check specific\n        // shape files\n\n        // MOTION Properties //\n        this.position = vector(options.x || 0, options.y || 0);\n        this.positionPrev = this.position.clone();\n        this.interpolatedPosition = this.position.clone();\n        this.velocity = vector(\n            (options.velocity && options.velocity.x) || 0,\n            (options.velocity && options.velocity.y) || 0\n        );\n        // this.acceleration = vector(\n        //     (options.acceleration && options.acceleration.x) || 0,\n        //     (options.acceleration && options.acceleration.y) || 0,\n        // );\n        this.force = vector(\n            (options.force && options.force.x) || 0,\n            (options.force && options.force.y) || 0\n        );\n        this.torque = options.torque === undefined ? 0 : options.torque;\n        this._scale = 1;\n        this._rotation = options.rotation === undefined ? 0 : options.rotation; // <-- Private prop - DO NOT SET THIS DIRECTLY, use getter and setter for\n        this.rotationPrev = this._rotation;\n        this.angularVelocity = options.angularVelocity === undefined ? 0 : options.angularVelocity;\n\n        // COLLISION Properties //\n        this.static = options.static === true;\n        this.canCollide = options.canCollide !== false;\n        this.collisionType = options.collisionType || 'elastic';\n        this.colliderList = [];\n        this.restitution = 0.1;\n\n        // OPTICAL Properties //\n        this.refractiveIndex = options.refractiveIndex || 1;\n        this.material = options.material || 'GLASS';\n        this.materialColor = options.fillStyle || 'black';\n        this.mirror = options.mirror || false;\n        this.intersectionPoints = {};\n\n        // If debug = true, bounding box will be drawn\n        this.debug = options.debug === undefined ? false : options.debug;\n\n        // If the material is provided, set refractive index based on materials\n        // database\n        // TODO: Make setting either refractive index or material possible!!!\n        if (options.material && options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n            this.material = options.material;\n            console.warn('Setting both the material and the refractive index at the same time may cause some unexpected behavior'); //eslint-disable-line\n        } else if (options.material) {\n            // Check to make sure the material exists in the database\n            if (materials[this.material]) {\n                this.refractiveIndex = materials[this.material].refractiveIndex;\n            } else if (this.material === undefined || this.material === null) {\n                this.material = 'default';\n                this.refractiveIndex = 1;\n            } else {\n                console.error('the material ' + this.material + ' is not recognized. See the docs for supported default materials'); //eslint-disable-line\n            }\n        } else if (options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n        } else {\n            this.refractiveIndex = 1.33;\n        }\n        return this;\n    },\n\n    freeze: function() {\n        this.setPosition(this.position.x, this.position.y);\n        // this.static = true;\n        // this._cachedVelocity = this.velocity.clone();\n        // this.velocity.x = 0;\n        // this.velocity.y = 0;\n        return this;\n    },\n\n    unfreeze: function() {\n        this.static = false;\n        // if (this._cachedVelocity) {\n        //     this.velocity.x = this._cachedVelocity.x;\n        //     this.velocity.y = this._cachedVelocity.y;\n        // } else {\n        //     console.warn('cannot unfreeze a non-frozen object');\n        // }\n        return this;\n    },\n\n    translate: function(...args) {\n        if (args.length === 1) {\n            if (typeof args[0] === 'object') {\n                // Assume we have a vector object\n                this.position.add(args[0]);\n            }\n        } else if (args.length === 2) {\n            if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n                this.position.x += args[0];\n                this.position.y += args[1];\n            }\n        }\n\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n        return this;\n    },\n\n    rotate: function(angle) {\n        this.rotation += angle;\n        return this;\n    },\n\n    updateVertices: function() {\n        switch (this.type) {\n            case 'rectangle': {\n                let w = this.width,\n                    h = this.height,\n                    x = this.interpolatedPosition.x,\n                    y = this.interpolatedPosition.y;\n                switch (this._mode) {\n                    case 'CENTER':\n                        x -= (w / 2);\n                        y -= (h / 2);\n                        break;\n                    case 'RIGHT':\n                        x -= w;\n                        break;\n                    default:\n                        break;\n                }\n\n                //Get centroid\n                this.centroid = vector(\n                    (x + (x + w)) / 2,      // <-- x value\n                    (y + (y + h)) / 2       // <-- y value\n                );\n\n                this.vertices = [\n                    vector(x, y),\n                    vector(x + w, y),\n                    vector(x + w, y + h),\n                    vector(x, y + h)\n                ];\n\n                // To perform a rotation, we have to first translate to the origin,\n                // then rotate, then translate back to the centroid\n                if (this.angularVelocity !== 0 || this._rotation !== 0 || this._scale !== 0) {\n                    this.vertices.forEach(vertex => {\n                        vertex.translate(-this.centroid.x, -this.centroid.y)\n                            .rotate(this._rotation)\n                            .multiply(this._scale)\n                            .translate(this.centroid.x, this.centroid.y);\n                    });\n                }\n                break;\n            }\n            case 'polygon': {\n                this.updateVertices = function() {\n                    this.centroid = {x: 0, y: 0};\n                    this.vertices.forEach((vert, index) => {\n                        let relVert = this._relativeVertices[index];\n                        vert.x = relVert.x + this.interpolatedPosition.x;\n                        vert.y = relVert.y + this.interpolatedPosition.y;\n\n                        this.centroid.x += vert.x;\n                        this.centroid.y += vert.y;\n                    });\n\n                    this.centroid.x /= this.vertices.length;\n                    this.centroid.y /= this.vertices.length;\n\n                    // Update rotate vertices if necessary\n                    if (this.angularVelocity !== 0 || this._rotation !== 0 || this._scale !== 0) {\n                        this.vertices.forEach(vert => {\n                            vert.translate(-this.centroid.x, -this.centroid.y)\n                                .rotate(this._rotation)\n                                .multiply(this._scale)\n                                .translate(this.centroid.x, this.centroid.y);\n                        });\n                    }\n                };\n                break;\n            }\n            default:\n                return;\n        }\n    },\n\n    addForce: function(x, y) {\n        this.force.x += x;\n        this.force.y += y;\n    },\n\n    setForce: function(x, y) {\n        this.force.x = x;\n        this.force.y = y;\n    },\n\n    // Instantaneously set position without verlet integration\n    setPosition: function(x, y) {\n        this.position.x = x;\n        this.position.y = y;\n        this.positionPrev.x = x;\n        this.positionPrev.y = y;\n    },\n\n    // Instantaneously set x position without verlet integration\n    setX: function(x) {\n        this.position.x = x;\n        this.positionPrev.x = x;\n    },\n    setY: function(y) {\n        this.position.y = y;\n        this.positionPrev.y = y;\n    },\n    setRotation: function(angle) {\n        this.rotation = angle;\n        this.rotationPrev = angle;\n    },\n\n    // TODO: 1/4 Fix the update loop -> body is accelerating WAY too fast.\n    update: function(dt) {\n        // if (!this.static) {\n        //     this.velocity.add(this.acceleration);\n        //     this.position.add(this.velocity);\n        //     this.rotation += this.angularVelocity;\n        // var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n        let deltaTimeSquared = dt * dt;\n\n        // Calculate previous velocity using change in position during one step\n        let velocityPrevX = this.position.x - this.positionPrev.x,\n            velocityPrevY = this.position.y - this.positionPrev.y;\n\n        // update velocity with Verlet integration\n        this.velocity.x = velocityPrevX + (this.force.x * this.invMass) * deltaTimeSquared;\n        this.velocity.y = velocityPrevY + (this.force.y * this.invMass) * deltaTimeSquared;\n\n        this.positionPrev.x = this.position.x;\n        this.positionPrev.y = this.position.y;\n\n        // Don't apply velocity just yet, we need to change it using collisions\n        // and constraints before we actually apply it to the body\n        this.interpolatedPosition = this.position.clone();\n        this.interpolatedPosition.add(this.velocity);\n        // this.position.add(this.velocity);\n\n        // Verlet integration\n        this.angularVelocity = (this.rotation - this.rotationPrev) + (this.torque * this.invInertia) * deltaTimeSquared;\n        this.rotationPrev = this.rotation;\n        this.rotation += this.angularVelocity;\n\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n\n        // For each update loop, reset intersection points to zero\n        // These are used for wave intersections, not collisions\n        this.intersectionPoints = {};\n\n        this.colliderList = [];\n        this.aabb.update();\n        return this;\n    }\n};\n\nObject.defineProperty(Body, 'rotation', {\n    get: function() {\n        return this._rotation;\n    },\n    set: function(angle) {\n        this._rotation = angle;\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n    }\n});\n\nObject.defineProperty(Body, 'scale', {\n    get: function() {\n        return this._scale;\n    },\n    set: function(scaleFactor) {\n        this._scale = scaleFactor;\n        if (this.updateVertices) {\n            this.updateVertices();\n        } else if (this.type === 'circle') {\n            this.scaledRadius = this.radius * scaleFactor;\n        }\n    }\n});\n\nObject.defineProperty(Body, 'mass', {\n    get: function() {\n        return this._mass;\n    },\n    set: function(m) {\n        this._mass = m;\n        this.invMass = 1 / m;\n    }\n});\n\nexport default Body;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Body.js","module.exports = {\n\t\"GLASS\": {\n\t\t\"refractiveIndex\": 1.5\n\t},\n\t\"AIR\": {\n\t\t\"refractiveIndex\": 1.000277\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/extras/materials.json\n// module id = 22\n// module chunks = 0","/* eslint\n    \"no-else-return\": \"off\"\n */\nlet AABB = {\n    init: function(body) {\n        this.body = body;\n        let {min, max} = this.findMinMax(body);\n        this.max = max;\n        this.min = min;\n    },\n    /**\n     * Finds bounds of AABB\n     * Does not set any properties\n     * If you want to find and set, call AABB.update()\n     * @return {object} bounds\n     */\n    findMinMax: function() {\n        // Only deal with two types of bodies...Those with vertices, and\n        // circles\n        if (this.body.vertices) {\n            let minx,\n                miny,\n                maxx,\n                maxy;\n            this.body.vertices.forEach(v => {\n                let x = v.x,\n                    y = v.y;\n\n                // If nothing has been set, then set it\n                if (typeof minx === 'undefined') {\n                    minx = x;\n                } else if (typeof minx !== 'undefined' && x < minx) {\n                    // Something's already there, only update if x < minx\n                    minx = x;\n                }\n\n                if (typeof miny === 'undefined') {\n                    miny = y;\n                } else if (typeof miny !== 'undefined' && y < miny) {\n                    miny = y;\n                }\n\n                if (typeof maxx === 'undefined') {\n                    maxx = x;\n                } else if (typeof maxx !== 'undefined' && x > maxx) {\n                    maxx = x;\n                }\n\n                if (typeof maxy === 'undefined') {\n                    maxy = y;\n                } else if (typeof maxy !== 'undefined' && y > maxy) {\n                    maxy = y;\n                }\n            });\n\n            return {\n                max: {\n                    x: maxx,\n                    y: maxy\n                },\n                min: {\n                    x: minx,\n                    y: miny\n                }\n            };\n        } else {\n            // Assume it's a circle\n            let cx = this.body.interpolatedPosition.x,\n                cy = this.body.interpolatedPosition.y,\n                r = this.body.scaledRadius;\n            return {\n                max: {\n                    x: cx + r,\n                    y: cy + r\n                },\n                min: {\n                    x: cx - r,\n                    y: cy - r\n                }\n            };\n        }\n    },\n\n    /**\n     * Returns true of point is inside AABB\n     * @param {Point} point - must contain x and y props\n     * @return {bool} true if point is inside AABB\n     */\n    contains: function(point) {\n        let x = point.x,\n            y = point.y;\n        if (x >= this.min.x &&\n            x <= this.max.x &&\n            y >= this.min.y &&\n            y <= this.max.y) {\n            return true;\n        }\n\n        return false;\n    },\n\n    /**\n     * Check if two AABB's intersect\n     * @param {AABB} aabb - other bounding box\n     * @return {bool} true for overlap, false otherwise\n     */\n    overlap: function(aabb) {\n        if (this.max.x < aabb.min.x) {return false;} // a is left of b\n        if (this.min.x > aabb.max.x) {return false;} // a is right of b\n        if (this.max.y < aabb.min.y) {return false;} // a is above b\n        if (this.min.y > aabb.max.y) {return false;} // a is below b\n        return true; // boxes overlap\n    },\n\n    /**\n     * Updates the AABB\n     */\n    update: function() {\n        let {max, min} = this.findMinMax();\n        this.max = max;\n        this.min = min;\n    }\n};\n\nlet aabb = function(body) {\n    let ab = Object.create(AABB);\n    ab.init(body);\n    return ab;\n};\n\nexport default aabb;\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometries/AABB.js","/* eslint \"no-unused-vars\": \"off\" */\nimport {degToRad, radToDeg, crossProduct2D, dotProduct2D, distance, map} from '../math/math';\nimport vector, {Vector} from '../math/Vector';\nimport ray from '../geometries/Ray';\n\nlet Wave = {\n    init: function(options) {\n        options = options || {};\n        const speedOfLight = 299792458;\n        this.children = [];\n        //this.outerBodies = [];\n        this.style = {\n            lineWidth: options.lineWidth || 1,\n            strokeStyle: options.strokeStyle || '#456abc',\n            opacity: options.opacity || 1.0\n        };\n\n        this.x = options.x || 10;\n        this.y = options.y || 10;\n        this.position = vector(options.x, options.y);\n        this.waveSpeed = options.waveSpeed || speedOfLight;\n        this.frequency = options.frequency || 1000;\n        this.wavelength = this.waveSpeed / this.frequency;  // Computed Property\n        this.velocity = options.velocity || vector(0, 0);\n        this.direction = options.direction || 0;\n        this.mode = options.mode || 'RADIAN';\n        this.intensity = options.intensity || 1;\n        this.type = options.type || 'incident';\n        this.parent = options.parent || null;\n        this.n1 = options.n1 || 1;\n        this.n2 = options.n2 || 1;\n        this.lastIntersection = {};\n\n        // create ray for detecting body intersections\n        this.ray = ray(this.position.x, this.y, this.direction, this.mode === 'DEGREES' || null);\n    },\n\n    update: function(system) {\n        this.ray.trace(system);\n\n        // Remove children on every update\n        this.children = [];\n        // If the ray intersected a point...\n        if (this.ray.intersectionPoint) {\n            this.lastIntersection = this.ray.intersectionPoint;\n            this.children = this.createChildren();\n\n            this.children.forEach(child => {\n                child.update(system);\n            });\n        }\n    },\n    createChildren: function() {\n        //Vector implementation of reflected and refracted waves here:\n        //http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf\n        //Normalize ray vector = this.ray.direction\n\n        // Find the normal vector (method of which depends on type of body)\n        // There are two possible normal vectors, but\n        // which one do we want?\n        // one which dot product with ray vector < 0 is what we want\n        // http://gamedev.stackexchange.com/questions/85850/collision-intersection-of-2d-ray-to-line-segment\n        let normal;\n\n        //selectNormal();\n        // TODO: Wrap this in it's own function (i.e. findNormal function)\n        let bType = this.ray.intersectingBody.type;\n        if (bType === 'rectangle' || bType === 'polygon') {\n            let intSeg = this.ray.intersectingSegment;\n\n            intSeg.normalize();\n            let dot = intSeg.dot(this.ray.direction);\n            let normals = [vector(-intSeg.y, intSeg.x), vector(intSeg.y, -intSeg.x)];\n\n            let that = this;\n            normals.forEach(n => {\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n        } else if (bType === 'circle') {\n            let cx = this.ray.intersectingBody.position.x;\n            let cy = this.ray.intersectingBody.position.y;\n            let ix = this.ray.intersectionPoint.x;\n            let iy = this.ray.intersectionPoint.y;\n            let v1 = vector(ix - cx, iy - cy),\n                v2 = vector(cx - ix, cy - iy);\n            v1.normalize();\n            v2.normalize();\n            let normals = [\n                v1,\n                v2\n            ];\n            let that = this;\n            normals.forEach(function(n) {\n                //n.normalize();\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n            if (normal === undefined) {\n                // We intersect at a tangent on a circle???\n                // TODO: Fix this!!!\n                normal = normals[0];\n            }\n        }\n\n        // child waves - reflected and refracted\n        // Calculate reflected vector\n        // https://en.wikipedia.org/wiki/Snell%27s_law#Vector_form\n        // http://stackoverflow.com/questions/5454661/reflection-how-do-i-do-it\n        // Reflected vector looks like this:\n        // r = a - 2(a dot n) * n\n        let tmpTerm = 2 * this.ray.direction.dot(normal);\n        let tmpVec = normal.clone();\n        tmpVec.multiply(2 * this.ray.direction.dot(normal));\n        let rVec = this.ray.direction.clone();\n        rVec.subtract(tmpVec);\n\n        // Refracted vector\n        // Are we inside a body?\n        // get origin points of wave, check if they are interior to the\n        // intersecting body, if so, n1 = body.refractiveIndex, if not, n1\n        // takes on refractive index of outer context,\n        // which we can find from it's parent wave\n        // If we have a body to intersect with...\n        if (this.type === 'incident' && this.ray.outerBodies.length > 0) {\n            //Grab the last one (the body on top)\n            this.n1 = this.ray.outerBodies[this.ray.outerBodies.length - 1].refractiveIndex;\n        }\n\n        // TODO: Figure out how to handle picking proper refractive index\n        // values\n        // for child rays\n        if (this.ray.intersectingBody) {\n            switch (this.type) {\n                case 'refracted':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.ray.intersectingBody) {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.parent.n1;\n                    } else {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'reflected':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.intersectingBody) {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.parent.n2;\n                    } else {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'incident':\n                    this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            // There's no intersection point ahead of this ray, so it's\n            // refractive indices are irrelevant\n            this.n1 = 1;\n            this.n2 = 1;\n            // If the ray won't intersect another body,\n            // then it must be outside of a body\n            //n2 = 1;\n\n            // n1 must take on the index of where the parent ray currently\n            // exists\n            //n1 = props.parent.intersectingBody.refractiveIndex;\n        }\n\n        let theta1 = Math.PI - this.ray.direction.angleTo(normal);\n        let theta2 = Math.asin(this.n1 * Math.sin(theta1) / this.n2);\n\n        // Vector formulation for refracted wave\n        // t = n1/n2 * rayVector + (n1/n2 * cos(theta1) - sqrt(1\n        // - sin2(theta2))) * normal\n        let sin2theta2 = (this.n1 / this.n2) * (this.n1 / this.n2) * (1 - (Math.cos(theta1) * Math.cos(theta1)));\n        let tVec = Vector.multiply((this.n1 / this.n2), this.ray.direction);\n        let normCopy = Vector.multiply(normal, (this.n1 / this.n2) * Math.cos(theta1) - Math.sqrt(1 - sin2theta2));\n        tVec.add(normCopy);\n\n        // Reflection Coefficient\n        // R = R0 + (1 - R0) * (1 - cos(theta1))^5 where R0 = (n1 - n2 / n1\n        // + n2)^2\n        let _r0 = (this.n1 - this.n2) / (this.n1 + this.n2);\n        let R0 = _r0 * _r0;\n        let _r0tmp;\n\n        // Angles must be positive, so if we get a negative value for an\n        // angle, just flip it\n        if (this.n1 <= this.n2) {\n            _r0tmp = (1 - (Math.cos(theta1) < 0 ? -Math.cos(theta1) : Math.cos(theta1)));\n        } else if (this.n1 > this.n2) {\n            _r0tmp = (1 - (Math.cos(theta2) < 0 ? -Math.cos(theta2) : Math.cos(theta2)));\n        }\n\n        // TODO: Refactor this to eliminate some checks if body is a mirror\n        let R = R0 + (1 - R0) * Math.pow(_r0tmp, 5);\n        let T = 1 - R;  // Refracion Coefficient\n        // Total Internal Reflection\n        if (Math.sin(theta1) > this.n2 / this.n1) {\n            R = 0.95;\n            T = 0;\n        }\n\n        // If the material should be treated as a mirror\n        if (this.ray.intersectingBody.mirror === true) {\n            R = 0.9;\n            T = 0;\n        }\n\n        let RI = this.intensity * R;\n        let TI = this.intensity * T;\n\n        // Add 2 child waves - reflected and refracted\n        // Trace reflected wave\n        // Have to offset the waves by at least a pixel,\n        // otherwise we'll end up in a never ending\n        // call stack when each child wave always produces\n        // 2 new child waves, forever...\n        let rVecAngle = rVec.getAngle();\n        let tVecAngle = tVec.getAngle();\n        let children = [];\n        if (RI > 0.01) {\n            let reflectedWave = wave({ // eslint-disable-line\n                x: this.ray.intersectionPoint.x + Math.cos(rVecAngle),\n                y: this.ray.intersectionPoint.y + Math.sin(rVecAngle),\n                direction: rVecAngle,\n                intensity: RI,\n                type: 'reflected',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(reflectedWave);\n        }\n\n        if (TI > 0.01) {\n            let refractedWave = wave({  // eslint-disable-line\n                x: this.ray.intersectionPoint.x - normal.x,\n                y: this.ray.intersectionPoint.y - normal.y,\n                direction: tVecAngle,\n                intensity: TI,\n                type: 'refracted',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(refractedWave);\n        }\n        return children;\n    }\n};\n\nconst wave = function(options) {\n    let W = Object.create(Wave);\n    W.init(options);\n    return W;\n};\n\nexport default wave;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Wave.js","import Body from './Body';\nimport aabb from '../geometries/AABB';\nimport {distance} from '../math/math';\n\nlet circle = function(options) {\n    options = options || {};\n    let B = Object.create(Body);\n    B.init(options);\n\n    B.radius = options.radius || 10;\n    B.scaledRadius = B.radius;\n    B.type = 'circle';\n    B.aabb = aabb(B);\n\n    B.inertia = B.mass * B.radius * B.radius / 2;\n    B.invInertia = 1 / B.inertia;\n\n    B.isPointInterior = function(x, y) {\n        let bx = B.position.x,\n            by = B.position.y;\n        if (distance(x, y, bx, by) <= B.scaledRadius) {\n            return true;\n        }\n        return false;\n    };\n\n    return B;\n};\n\nexport default circle;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Circle.js","import Body from './Body';\nimport aabb from '../geometries/AABB';\nimport vector from '../math/Vector';\n\nvar polygon = function(options) {\n    options = options || {};\n\n    var B = Object.create(Body);\n    if (!options.vertices) {\n        throw new Error('Polygons MUST be initialized with vertices. See docs.');\n    }\n    B.init(options);\n\n    // Set type\n    B.type = 'polygon';\n    // TODO: Find one of the (many) algorithms for subdividing a convex polygon\n    // into triangles (graphics needs to do this a lot). Calculate the moment\n    // of each triangle. Add them all up.\n    B.inertia = 1;\n    B.invInertia = 1 / B.inertia;\n\n    //Initialize vetices as vectors\n    // private vertices, relative to x and y\n    B._relativeVertices = [];\n\n    // public vertices, (contain world coords);\n    B.vertices = [];\n\n    options.vertices.forEach(vert => {\n        B._relativeVertices.push(vector(vert.x, vert.y));\n        B.vertices.push(vector(options.x + vert.x, options.y + vert.y));\n    });\n\n    B.isPointInterior = function(x, y) {\n        var inside = false;\n        for (var i = 0, j = B.vertices.length - 1; i < B.vertices.length; j = i++) {\n            let vi = B.vertices[i];\n            let vj = B.vertices[j];\n            var xi = vi.x,\n                yi = vi.y;\n            var xj = vj.x,\n                yj = vj.y;\n\n            var intersect = ((yi > y) !== (yj > y)) &&\n                (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return inside;\n    };\n\n    // Initialize...\n    B.updateVertices();\n    B.aabb = aabb(B);\n    return B;\n};\n\nexport default polygon;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bodies/Polygon.js","import vector from '../math/Vector';\n\nconst Point = {\n    init: function(x, y) {\n        this.position = vector(x, y);\n        this.type = 'point';\n        this.constraints = [];\n    }\n};\n\nconst point = function(x, y) {\n    let p = Object.create(Point);\n    p.init(x, y);\n    return p;\n};\n\nexport default point;\n\n\n\n// WEBPACK FOOTER //\n// ./src/geometries/Point.js","import vector, {Vector} from '../math/Vector';\nconst GJK = {\n    intersect: function(body1, body2) {\n        if (body1.type === 'rectangle') {\n            if (body2.type === 'rectangle' || body2.type === 'polygon') { return this.polypoly(body1, body2); }\n            if (body2.type === 'circle') { return this.polycircle(body1, body2); }\n        }\n\n        if (body1.type === 'circle') {\n            if (body2.type === 'rectangle' || body2.type === 'polygon') { return this.polycircle(body2, body1); }\n            if (body2.type === 'circle') { return this.circlecircle(body1, body2); }\n        }\n\n        if (body1.type === 'polygon') {\n            if (body2.type === 'rect' || body2.type === 'polygon') { return polypoly(body1, body2); }\n            if (body2.type === 'circle') { return this.polycircle(body1, body2); }\n        }\n    },\n\n    polypoly: function(b1, b2) {\n\n    },\n\n    polycircle: function(b1, b2) {\n\n    },\n\n    circlecircle: function(b1, b2) {\n\n    },\n\n    pointPoly: function(body, x, y) {\n        debugger;\n        // Steps\n\n        // Create a simplex and query point\n        let simplex = Object.create(Simplex);\n        let q = vector(x, y);\n        let vertices = body.vertices;\n\n        // 1. Pick a random vertex on the body\n        let randVertex = Math.floor(Math.random() * vertices.length);\n        simplex.vertexA = vertices[randVertex].clone();\n\n        // 2. Build a search vector from vertex to point\n        let searchVector = Vector.subtract(q, simplex.vertexA);\n\n        // 3. Determine support point by taking dot product with each vertex\n        //    and search vector, and take the largest one\n        let support = this.calculateSupportPoint(searchVector, vertices);\n\n        // 4. Evolve the simplex\n        simplex.vertexB = support.clone();\n\n        // 5. Find the closest point on the 1-simplex (i.e. straight line\n        //    between 0-simplex and support point\n        let p = simplex.line(x, y);\n\n        // 6. Build a line from p to q\n        searchVector = Vector.subtract(q, p);\n\n        // 7. Get new support point and evolve the simplex to a 2-simplex\n        support = this.calculateSupportPoint(searchVector, vertices);\n        simplex.vertexC = support.clone();\n\n        debugger;\n    },\n\n    calculateSupportPoint: function(d, vertices) {\n        let index = 0;\n        let maxValue = vertices[index].dot(d);\n        for (let i = 1; i < vertices.length; i++) {\n            let value = vertices[i].dot(d);\n            if (value > maxValue) {\n                index = i;\n                maxValue = value;\n            }\n        }\n        return vertices[index];\n    },\n\n\n    getVoronoiRegions: function(b) {\n        // Implementation\n    }\n};\n\nconst Simplex = {\n    init: function(vertexA, vertexB, vertexC) {\n        this.vertexA = vertexA;\n        this.vertexB = vertexB;\n        this.vertexC = vertexC;\n    },\n\n    point: function(x, y) {\n        if (this.vertexA) {\n            return this.vertexA;\n        }\n    },\n\n    line: function(x, y) {\n        if (this.vertexA && this.vertexB) {\n            // Return the closest point on the line\n//             First, we compute the barycentric coordinates.\n// From those we determine the Voronoi region and the closest point P.\n\n            // v = (q - a) dot n / (B - A).mag\n            // u = (b - q) dot n / (B - A).mag\n            let q = vector(x, y);\n            let diff = Vector.subtract(this.vertexB, this.vertexA);\n            let diffMag = diff.magnitude();\n            let n = diff.clone();\n            n.normalize();\n            let v = (Vector.subtract(q, this.vertexA)).dot(n) / diffMag;\n            let u = (Vector.subtract(this.vertexB, q)).dot(n) / diffMag;\n\n            if (u <= 0) {\n                return this.vertexB;\n            }\n            else if (v <= 0) {\n                return this.vertexA;\n            }\n            else {\n                let g1 = Vector.multiply(this.vertexA, u)\n                let g2 = Vector.multiply(this.vertexB, v);\n\n                return Vector.add(g1, g2);\n            }\n\n            debugger;\n        }\n    },\n\n    // Voronoi regions A, B, C, AB, BC, CA, ABC\n    triangle: function(x, y) {\n        let q = vector(x, y);\n\n        let A = this.vertexA,\n            B = this.vertexB,\n            C = this.vertexC;\n\n        let qb = Vector.subtract(q, B),\n            qa = Vector.subtract(q, A),\n            qc = Vector.subtract(q, C),\n            ab = Vector.subtract(A, B),\n            ba = Vector.subtract(B, A),\n            bc = Vector.subtract(B, C),\n            cb = Vector.subtract(C, B),\n            ca = Vector.subtract(C, A),\n            ac = Vector.subtract(A, C);\n\n        // Compute edge barycentric coordinates (pre-division)\n        // float uAB = Dot(Q - B, A - B);\n        // float vAB = Dot(Q - A, B - A);\n        //\n        // float uBC = Dot(Q - C, B - C);\n        // float vBC = Dot(Q - B, C - B);\n        //\n        // float uCA = Dot(Q - A, C - A);\n        // float vCA = Dot(Q - C, A - C);\n        let uAB = Vector.dot(qb, ab),\n            vAB = Vector.dot(qa, ba);\n\n        let uBC = Vector.dot(qc, bc),\n            vBC = Vector.dot(qb, cb);\n\n        let uCA = Vector.dot(qa, ca),\n            vCA = Vector.dot(qc, ac);\n    }\n};\n\nexport default GJK;\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/GJK.js","export default {\n    ELASTIC: 'elastic',\n    INELASTIC: 'inelastic',\n    STATIC: 'static'\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/collision/collisionTypes.js"],"sourceRoot":""}