{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 55f2cf2091b32196790e","webpack:///./src/extras/polyfills.js","webpack:///./src/sciplay.js","webpack:///./src/math/Vector.js","webpack:///./src/math/math.js","webpack:///./src/math/Ray.js","webpack:///./src/system/System.js","webpack:///./src/renderer/Renderer.js","webpack:///./src/bodies/Rect.js","webpack:///./src/bodies/Body.js","webpack:///./src/extras/materials.json","webpack:///./src/bodies/Wave.js","webpack:///./src/bodies/Circle.js"],"names":["lastTime","vendors","x","length","window","requestAnimationFrame","cancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","sciplay","Vector","vector","renderer","ray","system","wave","rect","circle","y","prototype","clone","set","prop","val","add","vec","subtract","multiply","getX","getY","magnitude","sqrt","magnitudeSq","dot","cross","angleTo","a","b","d","theta","acos","getAngle","mode","atan","atan2","PI","normalize","mag","v1","v2","angleBetween","degToRad","angle","radToDeg","distance","x1","y1","x2","y2","map","value","low1","high1","low2","high2","Ray","init","dir","degrees","origin","direction","cos","sin","outerBodies","t","innerWidth","innerHeight","trace","intersectionPoint","intersectingBody","intersectingSegment","objects","forEach","body","type","intersectRect","intersectCircle","radius","f","position","c","desc","t1","t2","ix","iy","updateIntersectionPoint","isPointInterior","push","vertices","vertLength","vert","index","verts","seg2","intersection","intersectSegment","intPoint","segVec","seg","r","p","q","s","rxs","tmp","tNum","uNum","u","px","py","rx","ry","R","Object","create","System","frames","waves","childWaves","rays","addFrame","frame","addRay","addWave","addChildWave","addObject","undefined","update","traverseWaves","children","child","Renderer","params","clearBackground","debug","background","canvas","document","createElement","appendChild","getElementById","width","height","ctx","getContext","renderObjects","draw","drawBody","fillStyle","style","lineWidth","strokeStyle","w","h","_mode","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","ellipse","fill","drawWave","render","self","_requestID","clearRect","fillRect","obj","setSize","stop","requestID","start","options","B","defineProperty","get","m","updateVertices","console","warn","updateSegments","segments","math","Body","mass","velocity","refractiveIndex","material","materialColor","mirror","error","bx","by","freeze","_cachedVelocity","unfreeze","aabb","Wave","speedOfLight","waveSpeed","frequency","wavelength","intensity","parent","n1","n2","lastIntersection","createChildren","normal","bType","intSeg","normals","that","n","cx","cy","tmpTerm","tmpVec","rVec","theta1","theta2","asin","sin2theta2","tVec","normCopy","_r0","R0","_r0tmp","pow","T","RI","TI","rVecAngle","tVecAngle","reflectedWave","refractedWave","W"],"mappings":"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gBAAL,GAAwB,IAAxB;AACA,cAAKC,mBAAL,GAA2B,IAA3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAlE,gBAAOmE,OAAP,CAAeC,OAAf,CAAuB,gBAAQ;AAC3B,qBAAQC,KAAKC,IAAb;AACI,sBAAK,WAAL;AACI,2BAAKC,aAAL,CAAmBF,IAAnB;AACA;AACJ,sBAAK,QAAL;AACI,2BAAKG,eAAL,CAAqBH,IAArB;AACA;AACJ,sBAAK,SAAL;AACI;AACJ;AACI;AAVR;AAYH,UAbD;;AAeA;AACA;AACA,aAAI,KAAKL,iBAAT,EAA4B;AACxB,oBAAO,IAAP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;AAEA;AACA;AACA;;AAEA;AACI;AACI;AACJ;AACJ;AACJ;AACI;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACI;AACA;AACJ;AACA;AACI;AACA;AACI;AACJ;AACJ;AACJ;;AAEA;AACA;AACI;AACA;AACA;AACJ;AACA;AACA;AACA;;AAEA;AACI;AACI;AACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACI;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACI;AACI;AACI;AACI;AACA;AACA;AACJ;AACI;AACA;AACJ;AACA;AACJ;AACI;AACI;AACA;AACA;AACJ;AACI;AACA;AACJ;AACA;AACJ;AACI;AACA;AACJ;AACI;AACR;AACJ;AACI;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACI;AACJ;AACI;AACJ;;AAEA;AACA;AACA;AACA;AACI;AACA;AACJ;AACA;AACA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","file":"sciplay.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sciplay\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sciplay\"] = factory();\n\telse\n\t\troot[\"sciplay\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 55f2cf2091b32196790e\n **/","/* eslint \"max-len\": \"off\" */\n// Request animation frame shim\n(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n})();\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/extras/polyfills.js\n **/","/* MATH OBJECTS */\nimport vector, {Vector} from './math/Vector';\nimport ray from './math/Ray';\n\n/* CORE OBJECTS */\nimport system from './system/System';\nimport renderer from './renderer/Renderer.js';\n\n/* BODIES */\nimport rect from './bodies/Rect';\nimport wave from './bodies/Wave';\nimport circle from './bodies/Circle';\n\nlet sciplay = function() {\n    return {\n        Vector, // for operations that return a new vector\n        vector, // actual vector constructor\n        renderer,\n        ray,\n        system,\n        wave,\n        rect,\n        circle\n    };\n};\n\nexport default sciplay;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/sciplay.js\n **/","import {radToDeg} from './math';\n\nexport const Vector = function(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n};\n\nVector.prototype = {\n    clone: function() {\n        return new Vector(this.x, this.y);\n    },\n    /**\n     * Generic Setter\n     * @param {string} prop - property to set\n     * @param {*} val - value to set\n     */\n    set: function(prop, val) {\n        if (prop === 'x') {\n            this.x = val;\n        } else if (prop === 'y') {\n            this.y = val;\n        }\n    },\n    add: function(vec) {\n        this.x += vec.x;\n        this.y += vec.y;\n    },\n    subtract: function(vec) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n    },\n    multiply: function(vec) {\n        if (typeof vec === 'object') {\n            this.x *= vec.getX();\n            this.y *= vec.getY();\n        } else if (typeof vec === 'number') {\n            this.x *= vec;\n            this.y *= vec;\n        }\n    },\n    magnitude: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n    magnitudeSq: function() {\n        return this.x * this.x + this.y * this.y;\n    },\n    dot: function(vec) {\n        return this.x * vec.x + this.y * vec.y;\n    },\n    cross: function(vec) {\n        return this.x * vec.y - this.y * vec.x;\n    },\n    angleTo: function(vec) {\n        let a = this.magnitude();\n        let b = vec.magnitude();\n        let d = this.dot(vec);\n\n        let theta = Math.acos(d / (a * b));\n        return theta;\n    },\n    getAngle: function(mode) {\n        if (mode === 'DEGREES') {\n            return radToDeg(Math.atan(this.y / this.x));\n        }\n        let a = Math.atan2(this.y, this.x);\n        //return a;\n        return a < 0 ? Math.PI * 2 + a : a;\n    },\n    normalize: function(vec) {\n        let mag = this.magnitude();\n        this.x /= mag;\n        this.y /= mag;\n    }\n};\n\n// ---------- Static Methods -----------//\n/**\n * @static\n * @param {Vector} v1 - first Vector obj\n * @param {Vector} v2 - second Vector obj\n * @return {Vector}\n *\n * Adds two vectors, and returns a new one\n */\nVector.add = function(v1, v2) {\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\n};\nVector.subtract = function(v1, v2) {\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\n};\nVector.multiply = function(v1, v2) {\n    if (typeof v1 === 'number' && typeof v2 === 'number') {\n        return v1 * v2;\n    }\n\n    if (typeof v1 === 'object' && typeof v2 === 'number') {\n        return new Vector(v1.x * v2, v1.y * v2);\n    }\n\n    if (typeof v2 === 'object' && typeof v1 === 'number') {\n        return new Vector(v1 * v2.x, v1 * v2.y);\n    }\n};\nVector.dot = function(v1, v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n};\nVector.angleBetween = function(v1, v2) {\n    let a = v1.magnitude();\n    let b = v2.magnitude();\n    let d = v1.dot(v2);\n\n    let theta = Math.acos(d / (a * b));\n    return theta;\n};\n\nvar vector = function(x, y) {\n    return new Vector(x, y);\n};\n\nexport default vector;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/Vector.js\n **/","export const degToRad = function(angle) {\n    return angle * Math.PI / 180;\n};\n\nexport const radToDeg = function(angle) {\n    return angle * 180 / Math.PI;\n};\n\nexport const distance = function(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n};\n\nexport const map = function(value, low1, high1, low2, high2) {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n};\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/math.js\n **/","import {distance, degToRad} from './math';\nimport vector, {Vector} from './Vector.js';\n\nlet Ray = {\n    init: function(x, y, dir, degrees) {\n        if (degrees) {\n            dir = degToRad(dir);\n        }\n\n        this.origin = vector(x, y);\n        this.direction = vector(Math.cos(dir), Math.sin(dir));\n        this.outerBodies = [];\n        this.t = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;\n    },\n    trace: function(system) {\n        // Always use radians, regardless of mode\n        // Also angle should be in range 0 <= angle <= 2PI\n        //let angle = this.direction.getAngle();\n        //angle = angle < 0 ? Math.PI * 2 + angle : angle;\n        this.intersectionPoint = null;\n        this.intersectingBody = null;\n        this.intersectingSegment = null;\n        //let children = [];\n\n        // Get ray vector -> p1 - p0 (end of ray - origin of ray)\n        //let p0x = this.origin.x;\n        //let p0y = this.origin.y;\n\n        // Abitrarily large number to ensure ray extends passed edge of canvas\n        //let p1x = 2000 * Math.cos(angle) + this.origin.x;\n        //let p1y = 2000 * Math.sin(angle) + this.origin.y;\n        //let p = vector(props.x, props.y);\n        //let r = vector(p1x - props.x, p1y - props.y);\n        //this.rayVector = r.copy();\n\n        // Look through all bodies for segments\n        // See if they intersect the ray\n        system.objects.forEach(body => {\n            switch (body.type) {\n                case 'rectangle':\n                    this.intersectRect(body);\n                    break;\n                case 'circle':\n                    this.intersectCircle(body);\n                    break;\n                case 'polygon':\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        // After going through all bodies and segments,\n        // if an intersection point was found...\n        if (this.intersectionPoint) {\n            return true;\n            // Vector implementation of reflected and refracted waves here:\n            // http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf\n            // Normalize ray vector\n            //this.rayVector.normalize();\n\n            //// Find the normal vector (method of which depends on type of body)\n            //// There are two possible normal vectors, but\n            //// which one do we want?\n            //// one which dot product with ray vector < 0 is what we want\n            //// http://gamedev.stackexchange.com/questions/85850/collision-intersection-of-2d-ray-to-line-segment\n            //let normal;\n            //let bType = props.intersectingBody.get('type');\n            //if (bType === 'rectangle') {\n                //let intSeg = props.intersectingSegment.copy();\n\n                //intSeg.normalize();\n                //let dot = intSeg.dot(this.rayVector);\n                //let normals = [vector(-intSeg.getY(), intSeg.getX()), vector(intSeg.getY(), -intSeg.getX())];\n\n                //normals.forEach(n => {\n                    //if (n.dot(this.rayVector) < 0) {\n                        //normal = n;\n                    //}\n                //});\n            //} else if (bType === 'circle') {\n                //let cx = props.intersectingBody.get('pos').getX();\n                //let cy = props.intersectingBody.get('pos').getY();\n                //let ix = props.intersectionPoint.x;\n                //let iy = props.intersectionPoint.y;\n                //let v1 = vector(ix - cx, iy - cy),\n                    //v2 = vector(cx - ix, cy - iy);\n                //v1.normalize();\n                //v2.normalize();\n                //let normals = [\n                    //v1,\n                    //v2\n                //];\n                //normals.forEach(function(n) {\n                    ////n.normalize();\n                    //if (n.dot(this.rayVector) < 0) {\n                        //normal = n;\n                    //}\n                //});\n            //}\n\n            //// Get angle of incidence\n            ////let intX = props.intersectingSegment.getX(),\n                ////intY = props.intersectingSegment.getY(),\n                ////intSeg = props.intersectingSegment.copy(),\n                ////normal;\n            //// XXX: Can probably take out the copy of intersectingSegment\n            ////intSeg.normalize();\n            ////let normals = [vector(-intSeg.getY(), intSeg.getX()), vector(intSeg.getY(), -intSeg.getX())];\n            ////let dot = intSeg.dot(rayVector);\n\n            ////normals.forEach(n => {\n                ////if (n.dot(rayVector) < 0) {\n                    ////normal = n;\n                ////}\n            ////});\n\n            //// child waves - reflected and refracted\n            ////createChildren();\n            //// Calculate reflected vector\n            //// https://en.wikipedia.org/wiki/Snell%27s_law#Vector_form\n            //// http://stackoverflow.com/questions/5454661/reflection-how-do-i-do-it\n            //// Reflected vector looks like this:\n            //// r = a - 2(a dot n) * n\n            //let tmpTerm = 2 * this.rayVector.dot(normal);\n            //let tmpVec = normal.copy();\n            //tmpVec.multiply(2 * this.rayVector.dot(normal));\n            //let rVec = this.rayVector.copy();\n            //rVec.subtract(tmpVec);\n\n            //// Refracted vector\n            //// Are we inside a body?\n            //// get origin points of wave, check if they are interior to the\n            //// intersecting body, if so, n1 = body.refractiveIndex, if not, n1\n            //// takes on refractive index of outer context,\n            //// which we can find from it's parent wave\n            //// If we have a body to intersect with...\n            //let n1 = props.n1,\n                //n2 = props.n2;\n            //if (props.type === 'incident' && this.outerBodies.length > 0) {\n                ////Grab the last one (the body on top)\n                //n1 = this.outerBodies[this.outerBodies.length - 1].get('refractiveIndex');\n            //}\n\n            //// TODO: Figure out how to handle picking proper refractive index\n            //// values\n            //// for child rays\n            //if (props.intersectingBody) {\n                //switch (props.type) {\n                    //case 'refracted':\n                        //if (props.parent && props.parent.props.intersectingBody &&\n                            //props.parent.props.intersectingBody === props.intersectingBody) {\n                            //n1 = props.parent.get('n2');\n                            //n2 = props.parent.get('n1');\n                        //} else {\n                            //n1 = props.parent.get('n2');\n                            //n2 = props.intersectingBody.get('refractiveIndex');\n                        //}\n                        //break;\n                    //case 'reflected':\n                        //if (props.parent && props.parent.props.intersectingBody &&\n                            //props.parent.props.intersectingBody === props.intersectingBody) {\n                            //n1 = props.parent.get('n1');\n                            //n2 = props.parent.get('n2');\n                        //} else {\n                            //n1 = props.parent.get('n1');\n                            //n2 = props.intersectingBody.get('refractiveIndex');\n                        //}\n                        //break;\n                    //case 'incident':\n                        //n2 = props.intersectingBody.get('refractiveIndex');\n                        //break;\n                    //default:\n                        //break;\n                //}\n            //} else {\n                //// There's no intersection point ahead of this ray, so it's\n                //// refractive indices are irrelevant\n                //n1 = 1;\n                //n2 = 2;\n                //// If the ray won't intersect another body,\n                //// then it must be outside of a body\n                ////n2 = 1;\n\n                //// n1 must take on the index of where the parent ray currently\n                //// exists\n                ////n1 = props.parent.intersectingBody.refractiveIndex;\n            //}\n\n            //// Store on props so children have access\n            //props.n1 = n1;\n            //props.n2 = n2;\n\n            ////n1 = 1;\n            ////n2 = intersectingBody ? intersectingBody.get('refractiveIndex') : 1;\n            //let theta1 = Math.PI - this.rayVector.angleTo(normal);\n            //let theta2 = Math.asin(n1 * Math.sin(theta1) / n2);\n\n            //// Vector formulation for refracted wave\n            //// t = n1/n2 * rayVector + (n1/n2 * cos(theta1) - sqrt(1\n            //// - sin2(theta2))) * normal\n            //let sin2theta2 = (n1 / n2) * (n1 / n2) * (1 - (Math.cos(theta1) * Math.cos(theta1)));\n            //let tVec = this.rayVector.copy();\n            //tVec.multiply(n1 / n2);\n            //let normCopy = normal.copy();\n            //normCopy.multiply((n1 / n2) * Math.cos(theta1) - Math.sqrt(1 - sin2theta2));\n            //tVec.add(normCopy);\n\n            //// Reflection Coefficient\n            //// R = R0 + (1 - R0) * (1 - cos(theta1))^5 where R0 = (n1 - n2 / n1\n            //// + n2)^2\n            //let _r0 = (n1 - n2) / (n1 + n2);\n            //let R0 = _r0 * _r0;\n            //let _r0tmp;\n\n            //// Angles must be positive, so if we get a negative value for an\n            //// angle, just flip it\n            //if (n1 <= n2) {\n                //_r0tmp = (1 - (Math.cos(theta1) < 0 ? -Math.cos(theta1) : Math.cos(theta1)));\n            //} else if (n1 > n2) {\n                //_r0tmp = (1 - (Math.cos(theta2) < 0 ? -Math.cos(theta2) : Math.cos(theta2)));\n            //}\n\n            //let R = R0 + (1 - R0) * Math.pow(_r0tmp, 5);\n            //let T = 1 - R;  // Refracion Coefficient\n            //// Total Internal Reflection\n            //if (Math.sin(theta1) > n2 / n1) {\n                //R = 1;\n                //T = 0;\n            //}\n            //let RI = props.intensity * R;\n            //let TI = props.intensity * T;\n\n            //// Add 2 child waves - reflected and refracted\n            //// Trace reflected wave\n            //// Have to offset the waves by at least a pixel,\n            //// otherwise we'll end up in a never ending\n            //// call stack when each child wave always produces\n            //// 2 new child waves, forever...\n            //let rVecAngle = rVec.getAngle();\n            //let tVecAngle = tVec.getAngle();\n            //if (RI > 0.02) {\n                //let reflectedWave = wave({\n                    //x: props.intersectionPoint.x + Math.cos(rVecAngle),\n                    //y: props.intersectionPoint.y + Math.sin(rVecAngle),\n                    //direction: rVecAngle,\n                    //intensity: RI,\n                    //type: 'reflected',\n                    //parent: this,\n                    //n1: props.n1,\n                    //n2: props.n2\n                //});\n                //this.children.push(reflectedWave);\n            //}\n\n            //if (TI > 0.02) {\n                //let refractedWave = wave({\n                    //x: props.intersectionPoint.x + Math.cos(tVecAngle),\n                    //y: props.intersectionPoint.y + Math.sin(tVecAngle),\n                    //direction: tVecAngle,\n                    //intensity: TI,\n                    //type: 'refracted',\n                    //parent: this,\n                    //n1: props.n1,\n                    //n2: props.n2\n                //});\n                //this.children.push(refractedWave);\n            //}\n            //drawChildren(system, ctx);\n        }\n    },\n        /**\n     * Detect if ray intersects circle\n     * http://stackoverflow.com/questions/1073336/circle-line-segment-collision-detection-algorithm\n     *\n     * Using the following formula\n     * t^2 * (r DOT r) + 2t*( f DOT r ) + ( f DOT f - radius^2 ) = 0\n     * at^2 + bt + c where a = d.dot(d), b = 2*f.dot(d), c = f.dot(f)\n     * - radius^2\n     *      where:\n     *          d = end point of ray - start point of ray\n     *          t = scalar value - what we're solving for\n     *          r = ray vector\n     *          f = vector from center of sphere to origin of ray\n     *          radius = radius of circle\n     *\n     * 3x HIT cases:\n     *  -o->                    --|-->  |            |  --|->\n     * Impale(t1 hit,t2 hit), Poke(t1 hit,t2>1), ExitWound(t1<0, t2 hit),\n     *\n     * 3x MISS cases:\n     *     ->  o                     o ->              | -> |\n     * FallShort (t1>1,t2>1), Past (t1<0,t2<0), CompletelyInside(t1<0, t2>1)\n     *\n     * @param {Body} circle - circle body object\n     * @param {Vector} p - point of origin\n     * @param {Vector} r - ray vector\n     * @return {boolean} true if intersection was found, false otherwise\n     */\n    intersectCircle: function(circle) {\n        let radius = circle.radius;\n\n        let d = vector(this.direction.x * this.t, this.direction.y * this.t);\n        let f = Vector.subtract(this.origin, circle.position);//this.origin.clone();\n\n        // Solve the quadratic equation\n        let a = d.dot(d);\n        let b = 2 * f.dot(d);\n        let c = f.dot(f) - radius * radius;\n\n        // Descriminant b^2 - 4ac\n        let desc = (b * b) - (4 * a * c);\n\n        if (desc < 0) {\n            // No intersection\n        } else {\n            // Ray hit circle\n            // Two possible solutions\n            desc = Math.sqrt(desc);\n            let t1 = (-b - desc) / (2 * a);\n            let t2 = (-b + desc) / (2 * a);\n            let ix, iy;\n\n            // If t1 intersected the circle...\n            // Note: t1 is always closer than t2\n            if (t1 >= 0 && t1 <= 1) {\n                ix = this.origin.x + d.x * t1;\n                iy = this.origin.y + d.y * t1;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n\n            // If t1 doesn't intersect, check t2\n            if (t2 >= 0 && t2 <= 1) {\n                ix = this.origin.x + d.x * t2;\n                iy = this.origin.y + d.y * t2;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Detect if ray intersects circle\n     * see this skecth: http://www.openprocessing.org/sketch/45537\n     *\n     * @param {Body} circle - circle body object\n     */\n    //intersectCircle: function(circle) {\n        //let radius = circle.radius;\n\n        ////let f = this.origin.copy();\n        ////f.subtract(circle.get('pos'));\n        //let f = Vector.subtract(circle.position, this.origin);\n        //let lf = f.dot(this.direction);\n        //let s = radius * radius - f.dot(f) + lf * lf;\n\n        //if (s < 0) {\n            //return false;\n        //}\n\n        //s = Math.sqrt(s);\n        //if (lf < s) {\n            //if (lf + s >= 0) {\n                //s = -s;\n                //this.outerBodies.push(circle);\n            //}\n        //}\n\n        //let t1 = Vector.multiply(this.direction, (lf - s));\n        //t1.add(this.origin);\n        //// That works!\n        //this.updateIntersectionPoint({x: t1.x, y: t1.y}, null, circle);\n        //return;\n    //},\n    /**\n     * Handles case of ray-rectangle intersection\n     * If an intersecting segment is found,\n     * set the props accordingly\n     * @private\n     * @param {Rect} rect - rect body object\n     */\n    intersectRect: function(rect) {\n        if (rect.isPointInterior(this.origin.x, this.origin.y)) {\n            this.outerBodies.push(rect);\n        }\n        //let segs = rect.segments;\n        let vertices = rect.vertices;\n        let vertLength = vertices.length;\n        vertices.forEach((vert, index, verts) => {\n            let seg2;\n            if (index === vertLength - 1) {\n                seg2 = verts[0];\n            } else {\n                seg2 = verts[index + 1];\n            }\n            //let segVec = vector(vert, seg2);\n            let intersection = this.intersectSegment([vert, seg2]);\n            if (intersection) {\n                this.updateIntersectionPoint(intersection.intPoint, intersection.segVec, rect);\n            }\n        });\n\n        //segs.forEach(seg => {\n            //var intersection = this.intersectSegment(seg);\n            //if (intersection) {\n                //this.updateIntersectionPoint(intersection.intPoint, intersection.segVec, rect);\n            //}\n        //});\n    },\n    /**\n     * @param {Array} seg - segment vertices\n     * @return {Object} returns intersection point with body, or false\n     */\n    intersectSegment: function(seg) {\n        //let t1 = Math.abs(v2.cross(v1)) / (v2.dot(v3));\n        //let t2 = (v1.dot(v3)) / (v2.dot(v3));\n        let r = vector(this.t * this.direction.x, this.t * this.direction.y);\n        let p = vector(this.origin.x, this.origin.y);\n        let q = vector(seg[0].x, seg[0].y);\n        let s = vector(seg[1].x - seg[0].x, seg[1].y - seg[0].y);\n        //let q = vector(seg[0][0], seg[0][1]);\n        //let s = vector(seg[1][0] - seg[0][0], seg[1][1] - seg[0][1]);\n\n        // check for intersection\n        // t = (q − p) x s / (r x s)\n        // u = (q − p) x r / (r x s)\n        let rxs = r.cross(s);\n            //tmp = q.copy();\n        let tmp = Vector.subtract(q, p);\n        //tmp.subtract(p);\n        let tNum = tmp.cross(s),\n            uNum = tmp.cross(r);\n\n        let t, u;\n        if (rxs !== 0) {\n            t = tNum / rxs;\n            u = uNum / rxs;\n        }\n\n        // TODO: handle collinear case\n        if (rxs === 0 && uNum === 0) {\n            // lines are collinear\n        } else if (rxs === 0 && uNum !== 0) {\n            // lines are parallel and non-intersecting\n            return;\n        } else if (rxs !== 0 && t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n            // Two lines intersect,\n            // and meet at the point\n            // p + tr = q + us\n            let px = p.x,\n                py = p.y,\n                rx = r.x,\n                ry = r.y,\n                ix = px + t * rx,\n                iy = py + t * ry;\n\n            return {\n                intPoint: vector(ix, iy),\n                segVec: s\n            };\n        } else {\n            // Line segments do not intersect\n            // if we've gone through all the segments of the body,\n            //intersectionPoint = null;\n            return false;\n        }\n    },\n    updateIntersectionPoint: function(intPoint, segVec, body) {\n        let px = this.origin.x;\n        let py = this.origin.y;\n        let ix = intPoint.x;\n        let iy = intPoint.y;\n\n        // If there was a previously stored intersection point,\n        // check if this one is closer,\n        // and if so update it's values\n        if (this.intersectionPoint) {\n            if (distance(px, py, ix, iy) <\n                distance(px, py, this.intersectionPoint.x, this.intersectionPoint.y)) {\n                this.intersectionPoint = {x: ix, y: iy};\n                this.intersectingBody = body;\n                this.intersectingSegment = segVec;\n            }\n        } else {\n            // We don't yet have an intersection point, so make a new\n            // one\n            this.intersectionPoint = {x: ix, y: iy};\n            this.intersectingBody = body;\n            this.intersectingSegment = segVec;\n        }\n    }\n};\n\nvar ray = function(x, y, dir, degrees) {\n    let R = Object.create(Ray);\n    R.init(x, y, dir, degrees);\n    return R;\n    //return new Ray(x, y, dir, degrees);\n};\n\nexport default ray;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/Ray.js\n **/","const System = function() {\n    this.frames = [];\n    this.objects = [];\n    this.waves = [];\n    this.childWaves = [];\n    this.rays = [];\n};\nSystem.prototype = {\n    addFrame: function(frame) {\n        this.frames.push(frame);\n    },\n    addRay: function(ray) {\n        this.rays.push(ray);\n    },\n    addWave: function(wave) {\n        this.waves.push(wave);\n    },\n    addChildWave: function(wave) {\n        this.childWaves.push(wave);\n    },\n\n    /**\n     * Add objects to the system\n     * Objects not added will not be rendered\n     * or updated\n     *\n     * @param {Body|Body[]} b - a body object, or array of body objects\n     */\n    addObject: function(b) {\n        if (typeof b === 'object' && b.length !== undefined) {\n            // b is an array\n            b.forEach(body => {\n                this.objects.push(body);\n            });\n        } else {\n            this.objects.push(b);\n        }\n    },\n    update: function() {\n        this.objects.forEach(body => {\n            body.update();\n        });\n\n        this.childWaves = [];\n        this.waves.forEach(wave => {\n            wave.update(this);\n            this.traverseWaves(wave);\n        });\n    },\n    traverseWaves: function(wave) {\n        if (wave.children.length !== 0) {\n            wave.children.forEach(child => {\n                this.addChildWave(child);\n                this.traverseWaves(child);\n            });\n        }\n    }\n};\n\nvar system = function() {\n    return new System();\n};\nexport default system;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/system/System.js\n **/","import {degToRad, map} from '../math/math';\nlet Renderer = {\n    init: function(params) {\n        this.clearBackground = true;\n        this.debug = params.debug || false;\n        this.background = params.background || 'black';\n        this.canvas = (typeof params.canvas === 'undefined') ?\n            (function() {\n                let c = document.createElement('canvas');\n                c.id = 'canvas';\n                // Set default size\n                document.body.appendChild(c);\n                return c;\n            })() : (function() {\n                // Default values for canvas size\n                let c = document.getElementById(params.canvas);\n                return c;\n            })();\n\n        this.canvas.width = params.width || 600;\n        this.canvas.height = params.height || 300;\n        this.ctx = this.canvas.getContext('2d');\n    },\n    /**\n     * Draw bodies and waves\n     * @private\n     * @param {object} system - phys.system object containing all objects\n     */\n    renderObjects: function(system) {\n        system.objects.forEach(body => {\n            this.draw(body);\n            //body.draw(this.ctx);\n        });\n\n        system.waves.forEach(wave => {\n            wave.trace(system, this.ctx);\n            wave.draw(this.ctx);\n        });\n\n        //system.rays.forEach(ray => {\n            //ray.draw(ctx);\n        //});\n    },\n    drawBody: function(body) {\n        switch (body.type) {\n            case 'rectangle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                let x, y, w, h;\n                switch (body._mode) {\n                    case 'LEFT': {\n                        x = body.position.x;\n                        y = body.position.y;\n                        w = body.width;\n                        h = body.height;\n                        break;\n                    }\n                    case 'CENTER':\n                        w = body.width;\n                        h = body.height;\n                        x = body.position.x - w / 2;\n                        y = body.position.y - h / 2;\n                        break;\n                    case 'RIGHT':\n                        w = body.width;\n                        h = body.height;\n                        x = body.position.x - w;\n                        y = body.position.y;\n                        break;\n                    default:\n                        break;\n                }\n                this.ctx.lineJoin = 'miter';\n                this.ctx.beginPath();\n                this.ctx.moveTo(x, y);\n                this.ctx.lineTo(x + w, y);\n                this.ctx.lineTo(x + w, y + h);\n                this.ctx.lineTo(x, y + h);\n                this.ctx.closePath();\n                this.ctx.stroke();\n                break;\n            }\n            case 'circle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n\n                this.ctx.beginPath();\n                this.ctx.ellipse(body.position.x, body.position.y, body.radius, body.radius, 0, 0, Math.PI * 2);\n                this.ctx.closePath();\n                this.ctx.stroke();\n                this.ctx.fill();\n            }\n                break;\n            default:\n                break;\n        }\n    },\n    drawWave: function(wave) {\n        // No matter what the angle mode, always use radians\n        let angle = wave.mode === 'DEGREES' ? degToRad(wave.direction) : wave.direction;\n        this.ctx.fillStyle = wave.style.fillStyle;\n        this.ctx.lineWidth = wave.style.lineWidth;\n        this.ctx.strokeStyle = wave.style.strokeStyle;\n        this.ctx.beginPath();\n\n        // If debug == true, draw waves in certain colors\n        if (this.debug) {\n            if (wave.type === 'incident') {\n                // Draw starting circle\n                this.ctx.strokeStyle = 'yellow';\n                this.ctx.fillStyle = 'yellow';\n                this.ctx.beginPath();\n                this.ctx.ellipse(wave.position.x, wave.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.fill();\n                this.ctx.stroke();\n                this.ctx.strokeStyle = 'green';\n            } else if (wave.type === 'refracted') {\n                this.ctx.strokeStyle = 'blue';\n            } else if (wave.type === 'reflected') {\n                this.ctx.strokeStyle = 'orange';\n            }\n        }\n\n        //this.ctx.globalAlpha = map(wave.intensity, 0, 1, 0.3, 1);\n        this.ctx.moveTo(wave.position.x, wave.position.y);\n\n        // If the wave intersects an object ahead, then\n        // only draw to that object. Otherwise draw an arbitrary length\n        if (wave.ray.intersectionPoint) {\n            this.ctx.lineTo(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y);\n            this.ctx.stroke();\n            this.ctx.beginPath();\n            this.ctx.strokeStyle = 'red';\n            this.ctx.ellipse(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y, 3, 3, 0, 0, Math.PI * 2);\n            //this.ctx.stroke();\n        } else {\n            this.ctx.lineTo(2000 * Math.cos(angle) + wave.position.x, 2000 * Math.sin(angle) + wave.position.y);\n            this.ctx.stroke();\n        }\n    },\n    //draw: function(obj) {\n        //if (obj.type === 'rectangle' ||\n            //obj.type === 'circle' ||\n            //obj.type === 'polygon' ||\n            //obj.type === 'triangle') {\n                //this.drawBody(obj);\n        //}\n    //},\n    render: function(system) {\n        // The first time the system renders,\n        // capture a local reference to it\n        // to be used to restart the renderer later\n        // if it's ever stopped\n        if (this.system) {\n            this.system = system;\n        }\n\n        // In order to pass 'system' into render\n        // we have to wrap it in a function before\n        // passing it to requestAnimationFrame\n        let self = this;\n        this._requestID = requestAnimationFrame(function() {\n            self.render(system);\n        });\n\n        // Clear background\n        if (this.clearBackground) {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n        // Draw background\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.background;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // Update the system\n        system.update();\n\n        system.objects.forEach(obj => {\n            this.drawBody(obj);\n        });\n\n        system.waves.forEach(wave => {\n            this.drawWave(wave);\n        });\n        system.childWaves.forEach(wave => {\n            this.drawWave(wave);\n        });\n\n        // Render bodies\n        //this.renderObjects(system);\n    },\n    /**\n     * Set's size of renderers canvas\n     * @param {number} width - width of canvas\n     * @param {number} height - height of canvas\n     */\n    setSize: function(width, height) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        //if (shouldUpdateStyle) {\n            //canvas.style.width = `${width}px`;\n            //canvas.style.height = `${height}px`;\n        //}\n    },\n    /**\n     * Stop animation cycle\n     * @public\n     */\n    stop: function() {\n        cancelAnimationFrame(this.requestID);\n    },\n\n    /**\n     * Restart animation cycle\n     */\n    start: function() {\n        this.render(this.system);\n    }\n};\n\nvar renderer = function(params) {\n    let R = Object.create(Renderer);\n    R.init(params);\n    return R;\n};\n\nexport default renderer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/renderer/Renderer.js\n **/","/* eslint\n    \"no-multi-spaces\": \"off\"\n */\nimport Body from './Body';\n\nvar rect = function(options) {\n    let B = Object.create(Body);\n    B.init(options);\n    B.type = 'rectangle';\n    B._mode = options.mode || 'LEFT';\n\n    // Define getters and setters for mode\n    Object.defineProperty(B, 'mode', {\n        get: function() {\n            return this._mode;\n        },\n        set: function(m) {\n            if (this._mode !== m && this.type === 'rectangle') {\n                switch (m) {\n                    case 'LEFT':\n                    case 'CENTER':\n                    case 'RIGHT':\n                        this._mode = m;\n                        this.updateVertices();\n                        break;\n                    default:\n                        console.warn(`Cannot set mode to ${m}`);\n                        break;\n                }\n            } else {\n                console.warn(`'mode' is only available on rectangles`);\n            }\n        }\n    });\n\n    B.updateVertices = function() {\n        let w = this.width,\n            h = this.height,\n            x, y;\n        switch (this._mode) {\n            case 'LEFT':\n                x = this.position.x;\n                y = this.position.y;\n                break;\n            case 'CENTER':\n                x = this.position.x - w / 2;\n                y = this.position.y - h / 2;\n                break;\n            case 'RIGHT':\n                x = this.x - w;\n                y = this.y;\n                break;\n            default:\n                break;\n        }\n        this.vertices = [\n            {x: x,     y: y},\n            {x: x + w, y: y},\n            {x: x + w, y: y + h},\n            {x: x,     y: y + h}\n        ];\n    };\n\n    B.updateSegments = function() {\n        // What mode are we in?\n        let x, y, w, h;\n        //let pos = this.position;\n        switch (this._mode) {\n            case 'LEFT':\n                x = this.position.x;\n                y = this.position.y;\n                w = this.width;\n                h = this.height;\n                break;\n            case 'CENTER':\n                w = this.width;\n                h = this.height;\n                x = this.position.x - w / 2;\n                y = this.position.y - h / 2;\n                break;\n            case 'RIGHT':\n                w = this.width;\n                h = this.height;\n                x = this.x - w;\n                y = this.y;\n                break;\n            default:\n                break;\n        }\n\n        //this.vertices = [\n            //{x: x,     y: y},\n            //{x: x + w, y: y},\n            //{x: x + w, y: y + h},\n            //{x: x,     y: y + h}\n        //];\n        this.segments = [\n            [[x, y], [x + w, y]],\n            [[x + w, y], [x + w, y + h]],\n            [[x + w, y + h], [x, y + h]],\n            [[x, y + h], [x, y]]\n        ];\n    };\n\n    B.updateVertices();\n    return B;\n};\n\nexport default rect;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Rect.js\n **/","/* eslint \"no-unused-vars\": \"off\" */\n// What should a body be able to do?\n// 1. Attach to other bodies or surfaces\n// 2. Respond to forces (spring, friction)\n// 3. Move according to velocity and acceleration\n\nimport materials from '../extras/materials.json';\nimport vector from '../math/Vector';\nimport * as math from '../math/math';\n\n/**\n * Convenience Function so user doesn't have use 'new' keyword\n * @param {object} options - initialization options\n * @return {Body} instance of Body\n */\n\nlet Body = {\n    init: function(options) {\n        options = options || {};\n        this.style = {\n            fillStyle: options.fillStyle || 'rgba(0,0,0,0)',\n            lineWidth: options.lineWidth || 2,\n            strokeStyle: options.strokeStyle || '#abcabc'\n        };\n        this.mass = options.mass || 0;\n        this.position = vector(options.x || 0, options.y || 0);\n        this.velocity = vector(\n            (options.velocity && options.velocity.x) || 0,\n            (options.velocity && options.velocity.y) || 0\n        );\n        this.height = options.height || 10;\n        this.width = options.width || 10;\n        this.refractiveIndex = options.refractiveIndex || 1;\n        this.material = options.material || 'GLASS';\n        this.materialColor = options.fillStyle || 'black';\n        this.mirror = options.mirror || false;\n\n         // If the material is provided, set refractive index based on materials\n         // database\n        // TODO: Make setting either refractive index or material possible!!!\n        if (options.material && options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n            this.material = options.material;\n            console.warn('Setting both the material and the refractive index at the same time may cause some unexpected behavior'); //eslint-disable-line\n        } else if (options.material) {\n            // Check to make sure the material exists in the database\n            if (materials[this.material]) {\n                this.refractiveIndex = materials[this.material].refractiveIndex;\n            } else if (this.material === undefined || this.material === null) {\n                this.material = 'default';\n                this.refractiveIndex = 1;\n            } else {\n                console.error('the material ' + this.material + ' is not recognized. See the docs for supported default materials'); //eslint-disable-line\n            }\n        } else if (options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n        } else {\n            this.refractiveIndex = 1.33;\n        }\n    },\n\n    // Should use a raycasting technique to accomodate\n    // arbitrary polygons\n    isPointInterior: function(x, y) {\n        let bx = this.position.x;\n        let by = this.position.y;\n        switch (this.type) {\n            case 'rectangle':\n                if (x >= bx &&\n                    x <= bx + this.width &&\n                    y >= by &&\n                    y <= by + this.height) {\n                    return true;\n                }\n                return false;\n            case 'circle':\n                if (math.distance(x, y, bx, by) <= this.radius) {\n                    return true;\n                }\n                return false;\n            default:\n                break;\n        }\n    },\n    freeze: function() {\n        this._cachedVelocity = this.velocity.clone();\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n    },\n\n    unfreeze: function() {\n        if (this._cachedVelocity) {\n            this.velocity.x = this._cachedVelocity.x;\n            this.velocity.y = this._cachedVelocity.y;\n        } else {\n            console.warn('cannot unfreeze a non-frozen object');\n        }\n    },\n\n    update: function() {\n        if (this.updateSegments) {\n            this.updateSegments();\n        }\n\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n\n        this.position.add(this.velocity);\n    },\n\n    aabb: function() {\n        switch (this.type) {\n\n        }\n    }\n};\n\nexport default Body;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Body.js\n **/","module.exports = {\n\t\"GLASS\": {\n\t\t\"refractiveIndex\": 1.5\n\t},\n\t\"AIR\": {\n\t\t\"refractiveIndex\": 1.000277\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/extras/materials.json\n ** module id = 10\n ** module chunks = 0\n **/","/* eslint \"no-unused-vars\": \"off\" */\nimport {degToRad, radToDeg, crossProduct2D, dotProduct2D, distance, map} from '../math/math';\nimport vector, {Vector} from '../math/Vector';\nimport ray from '../math/Ray';\n\nlet Wave = {\n    init: function(options) {\n        options = options || {};\n        const speedOfLight = 299792458;\n        this.children = [];\n        //this.outerBodies = [];\n        this.style = {\n            lineWidth: options.lineWidth || 1,\n            strokeStyle: options.strokeStyle || '#456abc'\n        };\n\n        this.x = options.x || 10;\n        this.y = options.y || 10;\n        this.position = vector(options.x, options.y);\n        this.waveSpeed = options.waveSpeed || speedOfLight;\n        this.frequency = options.frequency || 1000;\n        this.wavelength = this.waveSpeed / this.frequency;  // Computed Property\n        this.velocity = options.velocity || vector(0, 0);\n        this.direction = options.direction || 0;\n        this.mode = options.mode || 'RADIAN';\n        this.intensity = options.intensity || 1;\n        this.type = options.type || 'incident';\n        this.parent = options.parent || null;\n        //this.intersectingBody = {};\n        //this.intersectionPoint = {};\n        //this.intersectingSegment = {};\n        this.n1 = options.n1 || 1;\n        this.n2 = options.n2 || 1;\n        this.lastIntersection = {};\n        //this.type = 'wave';\n\n        // create ray for detecting body intersections\n        this.ray = ray(this.position.x, this.y, this.direction, this.mode === 'DEGREES' || null);\n    },\n\n    update: function(system) {\n        this.ray.trace(system);\n\n        // Remove children on every update\n        this.children = [];\n        if (this.ray.intersectionPoint && this.ray.intersectionPoint !== this.lastIntersection) {\n            this.lastIntersection = this.ray.intersectionPoint;\n            this.children = this.createChildren();\n\n            this.children.forEach(child => {\n                child.update(system);\n            });\n        }\n    },\n    createChildren: function() {\n        //Vector implementation of reflected and refracted waves here:\n        //http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf\n        //Normalize ray vector = this.ray.direction\n\n        // Find the normal vector (method of which depends on type of body)\n        // There are two possible normal vectors, but\n        // which one do we want?\n        // one which dot product with ray vector < 0 is what we want\n        // http://gamedev.stackexchange.com/questions/85850/collision-intersection-of-2d-ray-to-line-segment\n        let normal;\n\n        //selectNormal();\n        // TODO: Wrap this in it's own function (i.e. findNormal function)\n        let bType = this.ray.intersectingBody.type;\n        if (bType === 'rectangle') {\n            let intSeg = this.ray.intersectingSegment;\n\n            intSeg.normalize();\n            let dot = intSeg.dot(this.ray.direction);\n            let normals = [vector(-intSeg.y, intSeg.x), vector(intSeg.y, -intSeg.x)];\n\n            let that = this;\n            normals.forEach(n => {\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n        } else if (bType === 'circle') {\n            let cx = this.ray.intersectingBody.position.x;\n            let cy = this.ray.intersectingBody.position.y;\n            let ix = this.ray.intersectionPoint.x;\n            let iy = this.ray.intersectionPoint.y;\n            let v1 = vector(ix - cx, iy - cy),\n                v2 = vector(cx - ix, cy - iy);\n            v1.normalize();\n            v2.normalize();\n            let normals = [\n                v1,\n                v2\n            ];\n            let that = this;\n            normals.forEach(function(n) {\n                //n.normalize();\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n            if (normal === undefined) {\n                // We intersect at a tangent on a circle???\n                // TODO: Fix this!!!\n                normal = normals[0];\n            }\n        }\n\n        // Get angle of incidence\n        //let intX = props.intersectingSegment.getX(),\n            //intY = props.intersectingSegment.getY(),\n            //intSeg = props.intersectingSegment.copy(),\n            //normal;\n        // XXX: Can probably take out the copy of intersectingSegment\n        //intSeg.normalize();\n        //let normals = [vector(-intSeg.getY(), intSeg.getX()), vector(intSeg.getY(), -intSeg.getX())];\n        //let dot = intSeg.dot(rayVector);\n\n        //normals.forEach(n => {\n            //if (n.dot(rayVector) < 0) {\n                //normal = n;\n            //}\n        //});\n\n        // child waves - reflected and refracted\n        // Calculate reflected vector\n        // https://en.wikipedia.org/wiki/Snell%27s_law#Vector_form\n        // http://stackoverflow.com/questions/5454661/reflection-how-do-i-do-it\n        // Reflected vector looks like this:\n        // r = a - 2(a dot n) * n\n        let tmpTerm = 2 * this.ray.direction.dot(normal);\n        let tmpVec = normal.clone();\n        tmpVec.multiply(2 * this.ray.direction.dot(normal));\n        let rVec = this.ray.direction.clone();\n        rVec.subtract(tmpVec);\n\n        // Refracted vector\n        // Are we inside a body?\n        // get origin points of wave, check if they are interior to the\n        // intersecting body, if so, n1 = body.refractiveIndex, if not, n1\n        // takes on refractive index of outer context,\n        // which we can find from it's parent wave\n        // If we have a body to intersect with...\n        if (this.type === 'incident' && this.ray.outerBodies.length > 0) {\n            //Grab the last one (the body on top)\n            this.n1 = this.ray.outerBodies[this.ray.outerBodies.length - 1].refractiveIndex;\n        }\n\n        // TODO: Figure out how to handle picking proper refractive index\n        // values\n        // for child rays\n        if (this.ray.intersectingBody) {\n            switch (this.type) {\n                case 'refracted':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.ray.intersectingBody) {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.parent.n1;\n                    } else {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'reflected':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.intersectingBody) {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.parent.n2;\n                    } else {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'incident':\n                    this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            // There's no intersection point ahead of this ray, so it's\n            // refractive indices are irrelevant\n            this.n1 = 1;\n            this.n2 = 1;\n            // If the ray won't intersect another body,\n            // then it must be outside of a body\n            //n2 = 1;\n\n            // n1 must take on the index of where the parent ray currently\n            // exists\n            //n1 = props.parent.intersectingBody.refractiveIndex;\n        }\n\n        let theta1 = Math.PI - this.ray.direction.angleTo(normal);\n        let theta2 = Math.asin(this.n1 * Math.sin(theta1) / this.n2);\n\n        // Vector formulation for refracted wave\n        // t = n1/n2 * rayVector + (n1/n2 * cos(theta1) - sqrt(1\n        // - sin2(theta2))) * normal\n        let sin2theta2 = (this.n1 / this.n2) * (this.n1 / this.n2) * (1 - (Math.cos(theta1) * Math.cos(theta1)));\n        //let tVec = this.rayVector.copy();\n        let tVec = Vector.multiply((this.n1 / this.n2), this.ray.direction);\n        //tVec.multiply(n1 / n2);\n        //let normCopy = normal.copy();\n        let normCopy = Vector.multiply(normal, (this.n1 / this.n2) * Math.cos(theta1) - Math.sqrt(1 - sin2theta2));\n        tVec.add(normCopy);\n\n        // Reflection Coefficient\n        // R = R0 + (1 - R0) * (1 - cos(theta1))^5 where R0 = (n1 - n2 / n1\n        // + n2)^2\n        let _r0 = (this.n1 - this.n2) / (this.n1 + this.n2);\n        let R0 = _r0 * _r0;\n        let _r0tmp;\n\n        // Angles must be positive, so if we get a negative value for an\n        // angle, just flip it\n        if (this.n1 <= this.n2) {\n            _r0tmp = (1 - (Math.cos(theta1) < 0 ? -Math.cos(theta1) : Math.cos(theta1)));\n        } else if (this.n1 > this.n2) {\n            _r0tmp = (1 - (Math.cos(theta2) < 0 ? -Math.cos(theta2) : Math.cos(theta2)));\n        }\n\n        let R = R0 + (1 - R0) * Math.pow(_r0tmp, 5);\n        let T = 1 - R;  // Refracion Coefficient\n        // Total Internal Reflection\n        if (Math.sin(theta1) > this.n2 / this.n1) {\n            R = 1;\n            T = 0;\n        }\n\n        // If the material should be treated as a mirror\n        if (this.ray.intersectingBody.mirror === true) {\n            R = 0.9;\n            T = 0;\n        }\n\n        let RI = this.intensity * R;\n        let TI = this.intensity * T;\n\n        // Add 2 child waves - reflected and refracted\n        // Trace reflected wave\n        // Have to offset the waves by at least a pixel,\n        // otherwise we'll end up in a never ending\n        // call stack when each child wave always produces\n        // 2 new child waves, forever...\n        let rVecAngle = rVec.getAngle();\n        let tVecAngle = tVec.getAngle();\n        let children = [];\n        if (RI > 0.01) {\n            let reflectedWave = wave({ // eslint-disable-line\n                x: this.ray.intersectionPoint.x + Math.cos(rVecAngle), //normal.x,//Math.cos(rVecAngle),\n                y: this.ray.intersectionPoint.y + Math.sin(rVecAngle), //normal.y, //Math.sin(rVecAngle),\n                direction: rVecAngle,\n                intensity: RI,\n                type: 'reflected',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(reflectedWave);\n        }\n\n        if (TI > 0.01) {\n            let refractedWave = wave({  // eslint-disable-line\n                x: this.ray.intersectionPoint.x - normal.x,\n                y: this.ray.intersectionPoint.y - normal.y,\n                direction: tVecAngle,\n                intensity: TI,\n                type: 'refracted',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(refractedWave);\n        }\n        return children;\n    }\n};\n\nconst wave = function(options) {\n    let W = Object.create(Wave);\n    W.init(options);\n    return W;\n};\n\nexport default wave;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Wave.js\n **/","import Body from './Body';\n\nlet circle = function(options) {\n    let B = Object.create(Body);\n    B.init(options);\n\n    B.radius = options.radius || 0;\n    B.type = 'circle';\n\n    return B;\n};\n\nexport default circle;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Circle.js\n **/"],"sourceRoot":""}