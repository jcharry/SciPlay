{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap a47f8df3b27a0a9f1468","webpack:///./src/extras/polyfills.js","webpack:///./src/sciplay.js","webpack:///./src/math/Vector.js","webpack:///./src/math/math.js","webpack:///./src/geometries/Ray.js","webpack:///./src/system/System.js","webpack:///./src/geometries/SpatialHash.js","webpack:///./src/renderer/Renderer.js","webpack:///./src/bodies/Rect.js","webpack:///./src/bodies/Body.js","webpack:///./src/extras/materials.json","webpack:///./src/geometries/AABB.js","webpack:///./src/bodies/Wave.js","webpack:///./src/bodies/Circle.js","webpack:///./src/bodies/Polygon.js"],"names":["lastTime","vendors","x","length","window","requestAnimationFrame","cancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","sciplay","Vector","vector","renderer","ray","system","wave","rect","polygon","circle","y","prototype","clone","set","prop","val","add","vec","subtract","multiply","getX","getY","magnitude","sqrt","magnitudeSq","negate","dot","cross","angleTo","a","b","d","theta","acos","getAngle","mode","atan","atan2","PI","normalize","mag","distanceTo","v1","v2","angleBetween","degToRad","angle","radToDeg","distance","x1","y1","x2","y2","map","value","low1","high1","low2","high2","Ray","init","dir","degrees","origin","direction","cos","sin","invDirection","outerBodies","t","innerWidth","innerHeight","x0","y0","slope","numTests","trace","intersectionPoint","intersectingBody","intersectingSegment","rayID","currentRayId","intersectHash","hash","intersectCircle","radius","f","position","c","desc","t1","t2","ix","iy","updateIntersectionPoint","intersectPolygon","poly","isPointInterior","push","vertices","vertLength","intersection","forEach","vert","index","verts","seg2","intersectSegment","intPoint","segVec","seg","r","p","q","s","rxs","tmp","tNum","uNum","u","px","py","rx","ry","bucket","row","col","X","Y","tMaxX","tMaxY","tDeltaX","tDeltaY","stepX","stepY","cellSize","abs","numRows","numCols","debug","ctx","beginPath","globalAlpha","strokeStyle","lineWidth","strokeRect","contents","body","intersectionPoints","status","hitsAABB","intersectAABB","aabb","type","segVeg","undefined","hashCoordinates","tx1","min","tx2","tmin","tmax","ty1","ty2","didHit","R","Object","create","System","params","frames","waves","childWaves","bodies","width","height","calculateCellSize","initializeHash","divisor","floor","addChildWave","addObject","obj","Error","update","clear","insertBody","traverseWaves","children","child","SpatialHash","ceil","point","updateBody","removeBody","idx","indexOf","splice","queryBody","nearby","queryPoint","h","math","Renderer","clearBackground","background","canvas","document","createElement","appendChild","getElementById","getContext","resize","drawBody","w","stroke","fillStyle","style","_mode","lineJoin","moveTo","lineTo","closePath","fill","ellipse","i","v","drawWave","intensity","render","updateFn","self","_requestID","clearRect","fillRect","lastState","j","keys","setSize","stop","requestID","start","options","B","defineProperty","get","m","updateVertices","console","warn","updateSegments","segments","bx","by","Body","constructor","mass","velocity","refractiveIndex","material","materialColor","mirror","error","freeze","_cachedVelocity","unfreeze","AABB","bounds","findMinMax","minx","miny","maxx","maxy","cx","cy","contains","ab","Wave","speedOfLight","opacity","waveSpeed","frequency","wavelength","parent","n1","n2","lastIntersection","createChildren","normal","bType","intSeg","normals","that","n","tmpTerm","tmpVec","rVec","theta1","theta2","asin","sin2theta2","tVec","normCopy","_r0","R0","_r0tmp","pow","T","RI","TI","rVecAngle","tVecAngle","reflectedWave","refractedWave","W","_relativeVertices","relVert","inside","vi","vj","xi","yi","xj","yj","intersect"],"mappings":"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","file":"sciplay.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sciplay\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sciplay\"] = factory();\n\telse\n\t\troot[\"sciplay\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap a47f8df3b27a0a9f1468\n **/","/* eslint \"max-len\": \"off\" */\n// Request animation frame shim\n(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n})();\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/extras/polyfills.js\n **/","/* MATH OBJECTS */\nimport vector, {Vector} from './math/Vector';\nimport ray from './geometries/Ray';\n\n/* CORE OBJECTS */\nimport system from './system/System';\nimport renderer from './renderer/Renderer';\n\n/* BODIES */\nimport rect from './bodies/Rect';\nimport wave from './bodies/Wave';\nimport circle from './bodies/Circle';\nimport polygon from './bodies/Polygon';\n\nlet sciplay = function() {\n    return {\n        Vector, // for operations that return a new vector\n        vector, // actual vector constructor\n        renderer,\n        ray,\n        system,\n        wave,\n        rect,\n        polygon,\n        circle\n    };\n};\n\nexport default sciplay;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/sciplay.js\n **/","import {radToDeg} from './math';\n\nexport const Vector = function(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n};\n\nVector.prototype = {\n    clone: function() {\n        return new Vector(this.x, this.y);\n    },\n    /**\n     * Generic Setter\n     * @param {string} prop - property to set\n     * @param {*} val - value to set\n     */\n    set: function(prop, val) {\n        if (prop === 'x') {\n            this.x = val;\n        } else if (prop === 'y') {\n            this.y = val;\n        }\n    },\n    add: function(vec) {\n        this.x += vec.x;\n        this.y += vec.y;\n    },\n    subtract: function(vec) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n    },\n    multiply: function(vec) {\n        if (typeof vec === 'object') {\n            this.x *= vec.getX();\n            this.y *= vec.getY();\n        } else if (typeof vec === 'number') {\n            this.x *= vec;\n            this.y *= vec;\n        }\n    },\n    magnitude: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n    magnitudeSq: function() {\n        return this.x * this.x + this.y * this.y;\n    },\n    negate: function() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    },\n    dot: function(vec) {\n        return this.x * vec.x + this.y * vec.y;\n    },\n    cross: function(vec) {\n        return this.x * vec.y - this.y * vec.x;\n    },\n    angleTo: function(vec) {\n        let a = this.magnitude();\n        let b = vec.magnitude();\n        let d = this.dot(vec);\n\n        let theta = Math.acos(d / (a * b));\n        return theta;\n    },\n    getAngle: function(mode) {\n        if (mode === 'DEGREES') {\n            return radToDeg(Math.atan(this.y / this.x));\n        }\n        let a = Math.atan2(this.y, this.x);\n        //return a;\n        return a < 0 ? Math.PI * 2 + a : a;\n    },\n    normalize: function(vec) {\n        let mag = this.magnitude();\n        this.x /= mag;\n        this.y /= mag;\n    },\n    distanceTo: function(vec) {\n        return Math.sqrt((vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y));\n    }\n};\n\n// ---------- Static Methods -----------//\n/**\n * @static\n * @param {Vector} v1 - first Vector obj\n * @param {Vector} v2 - second Vector obj\n * @return {Vector}\n *\n * Adds two vectors, and returns a new one\n */\nVector.add = function(v1, v2) {\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\n};\nVector.subtract = function(v1, v2) {\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\n};\nVector.multiply = function(v1, v2) {\n    if (typeof v1 === 'number' && typeof v2 === 'number') {\n        return v1 * v2;\n    }\n\n    if (typeof v1 === 'object' && typeof v2 === 'number') {\n        return new Vector(v1.x * v2, v1.y * v2);\n    }\n\n    if (typeof v2 === 'object' && typeof v1 === 'number') {\n        return new Vector(v1 * v2.x, v1 * v2.y);\n    }\n};\nVector.dot = function(v1, v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n};\nVector.angleBetween = function(v1, v2) {\n    let a = v1.magnitude();\n    let b = v2.magnitude();\n    let d = v1.dot(v2);\n\n    let theta = Math.acos(d / (a * b));\n    return theta;\n};\n\nvar vector = function(x, y) {\n    return new Vector(x, y);\n};\n\nexport default vector;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/Vector.js\n **/","export const degToRad = function(angle) {\n    return angle * Math.PI / 180;\n};\n\nexport const radToDeg = function(angle) {\n    return angle * 180 / Math.PI;\n};\n\nexport const distance = function(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n};\n\nexport const map = function(value, low1, high1, low2, high2) {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/math.js\n **/","/* eslint\n    \"no-unused-vars\": \"off\",\n */\nimport {distance, degToRad} from '../math/math';\nimport vector, {Vector} from '../math/Vector.js';\n\nlet Ray = {\n    /**\n     * Ray object for tracing\n     * @constructs\n     * @param {number} x - origin x\n     * @param {number} y - origin y\n     * @param {number} dir - direction in radians (or degrees if 'degrees' param\n     * = true)\n     * @param {bool} degrees - optional flag, if true, then read direction as\n     * degrees\n     */\n    init: function(x, y, dir, degrees) {\n        if (degrees) {\n            dir = degToRad(dir);\n        }\n\n        this.origin = vector(x, y);\n        this.direction = vector(Math.cos(dir), Math.sin(dir));\n        this.invDirection = vector(1 / this.direction.x, 1 / this.direction.y);\n        this.outerBodies = [];\n        this.t = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;\n        let x0 = this.origin.x,\n            y0 = this.origin.y,\n            x1 = this.origin.x + this.direction.x * this.t,\n            y1 = this.origin.y + this.direction.y * this.t;\n        this.slope = (y1 - y0) / (x1 - x0);\n        // TODO: Figure out a way to give each ray a unique ID\n        this.numTests = 0;\n    },\n\n    /**\n     * Return the objects from spatial hash to perform collision detection on\n     * @param {SpatialHash} hash - hash from the System\n     */\n\n    trace: function(system) {\n        // Always use radians, regardless of mode\n        // Also angle should be in range 0 <= angle <= 2PI\n        //let angle = this.direction.getAngle();\n        this.intersectionPoint = null;\n        this.intersectingBody = null;\n        this.intersectingSegment = null;\n\n        // Iterate the rayID to ensure no duplicates\n        this.rayID = system.currentRayId++;\n        this.numTests = 0;      // debugging param - how many tests are run\n        this.intersectHash(system.hash);\n\n        // After going through all bodies and segments,\n        // if an intersection point was found...\n        if (this.intersectionPoint) {\n            return true;\n        }\n    },\n\n    /**\n     * Detect if ray intersects circle\n     * http://stackoverflow.com/questions/1073336/circle-line-segment-collision-detection-algorithm\n     *\n     * Using the following formula\n     * t^2 * (r DOT r) + 2t*( f DOT r ) + ( f DOT f - radius^2 ) = 0\n     * at^2 + bt + c where a = d.dot(d), b = 2*f.dot(d), c = f.dot(f)\n     * - radius^2\n     *      where:\n     *          d = end point of ray - start point of ray\n     *          t = scalar value - what we're solving for\n     *          r = ray vector\n     *          f = vector from center of sphere to origin of ray\n     *          radius = radius of circle\n     *\n     * 3x HIT cases:\n     *  -o->                    --|-->  |            |  --|->\n     * Impale(t1 hit,t2 hit), Poke(t1 hit,t2>1), ExitWound(t1<0, t2 hit),\n     *\n     * 3x MISS cases:\n     *     ->  o                     o ->              | -> |\n     * FallShort (t1>1,t2>1), Past (t1<0,t2<0), CompletelyInside(t1<0, t2>1)\n     *\n     * @param {Body} circle - circle body object\n     * @param {Vector} p - point of origin\n     * @param {Vector} r - ray vector\n     * @return {boolean} true if intersection was found, false otherwise\n     */\n    intersectCircle: function(circle) {\n        this.numTests += 1;\n        let radius = circle.radius;\n\n        let d = vector(this.direction.x * this.t, this.direction.y * this.t);\n        let f = Vector.subtract(this.origin, circle.position);//this.origin.clone();\n\n        // Solve the quadratic equation\n        let a = d.dot(d);\n        let b = 2 * f.dot(d);\n        let c = f.dot(f) - radius * radius;\n\n        // Descriminant b^2 - 4ac\n        let desc = (b * b) - (4 * a * c);\n\n        if (desc < 0) {\n            // No intersection\n        } else {\n            // Ray hit circle\n            // Two possible solutions\n            desc = Math.sqrt(desc);\n            let t1 = (-b - desc) / (2 * a);\n            let t2 = (-b + desc) / (2 * a);\n            let ix, iy;\n\n            // If t1 intersected the circle...\n            // Note: t1 is always closer than t2\n            if (t1 >= 0 && t1 <= 1) {\n                ix = this.origin.x + d.x * t1;\n                iy = this.origin.y + d.y * t1;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n\n            // If t1 doesn't intersect, check t2\n            if (t2 >= 0 && t2 <= 1) {\n                ix = this.origin.x + d.x * t2;\n                iy = this.origin.y + d.y * t2;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Handles case of ray-polygon intersection\n     * If an intersecting segment is found,\n     * set the props accordingly\n     * @private\n     * @param {Polygon} poly - rect body object\n     * @return {bool} true if intersected, otherwise false\n     */\n    intersectPolygon: function(poly) {\n        this.numTests += 1;\n        if (poly.isPointInterior(this.origin)) {\n            this.outerBodies.push(poly);\n        }\n        //let segs = poly.segments;\n        let vertices = poly.vertices;\n        let vertLength = vertices.length;\n        let intersection;\n        vertices.forEach((vert, index, verts) => {\n            let seg2;\n            if (index === vertLength - 1) {\n                seg2 = verts[0];\n            } else {\n                seg2 = verts[index + 1];\n            }\n\n            intersection = this.intersectSegment([vert, seg2]);\n            if (intersection) {\n                this.updateIntersectionPoint(intersection.intPoint, intersection.segVec, poly);\n            }\n        });\n\n        return typeof intersection !== 'undefined';\n    },\n    /**\n     * Detects Ray-Segment intersection - Returns intersection coords\n     * @param {Array} seg - segment vertices\n     * @param {Vector} dir - optional direction to use, otherwise use\n     * this.direction\n     * @return {Object} returns intersection point with body, or false\n     */\n    intersectSegment: function(seg, dir) {\n        let r = dir ?\n            vector(dir.x * this.t, dir.y * this.t) :  // Dir passed to fn\n            vector(this.t * this.direction.x, this.t * this.direction.y);   // Use ray dir\n        let p = vector(this.origin.x, this.origin.y);                           // Ray origin\n        let q = vector(seg[0].x, seg[0].y);                                     // Segment start point\n        let s = vector(seg[1].x - seg[0].x, seg[1].y - seg[0].y);               // Segment vector\n\n        // check for intersection\n        // t = (q − p) x s / (r x s)\n        // u = (q − p) x r / (r x s)\n        let rxs = r.cross(s);\n        let tmp = Vector.subtract(q, p);\n        let tNum = tmp.cross(s),\n            uNum = tmp.cross(r);\n\n        // t, u are distances traveled along vector\n        let t, u;\n        if (rxs !== 0) {\n            t = tNum / rxs;\n            u = uNum / rxs;\n        }\n\n        // TODO: handle collinear case\n        if (rxs === 0 && uNum === 0) {\n            // lines are collinear\n            return;\n        } else if (rxs === 0 && uNum !== 0) {\n            // lines are parallel and non-intersecting\n            return false;\n        } else if (rxs !== 0 && t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n            // Two lines intersect,\n            // and meet at the point\n            // p + tr = q + us\n            let px = p.x,\n                py = p.y,\n                rx = r.x,\n                ry = r.y,\n                ix = px + t * rx,\n                iy = py + t * ry;\n\n            return {\n                intPoint: vector(ix, iy),\n                segVec: s,\n                t\n            };\n        }\n\n        // Line segments do not intersect\n        // if we've gone through all the segments of the body,\n        //intersectionPoint = null;\n        return false;\n    },\n\n    /**\n     * Test for Ray-Hash bucket intersections\n     * @param {SpatialHash} hash - system.hash object\n     * @return {array} list of intersected buckets\n     *\n     * See here: http://www.cse.chalmers.se/edu/year/2011/course/TDA361_Computer_Graphics/grid.pdf\n     * THIS WORKED -> http://www.playchilla.com/ray-casting-spatial-hash-dda\n     */\n    intersectHash: function(hash) {\n        // TODO: Handle case where ray starts outside bounds\n\n        // Initialize variables\n        // Step 1. Initialization - determine starting voxel\n        let bucket = hash.hash(this.origin);\n        let {row, col} = bucket;\n        let X = col,\n            Y = row;\n        let tMaxX, tMaxY, tDeltaX, tDeltaY;\n        let stepX = this.direction.x < 0 ? -1 : 1,\n            stepY = this.direction.y < 0 ? -1 : 1;\n        let cellSize = hash.cellSize;\n\n        // Row and Col offset for picking which horizontal or veritcal segments\n        // to use for intersection tests\n        // let rowOffset = stepY < 1 ? 0 : 1,\n        //     colOffset = stepX < 1 ? 0 : 1;\n\n        tDeltaX = cellSize / Math.abs(this.direction.x);\n        tDeltaY = cellSize / Math.abs(this.direction.y);\n\n        tMaxX = X * cellSize - this.origin.x;\n        tMaxY = Y * cellSize - this.origin.y;\n        if (this.direction.x >= 0) {\n            tMaxX += cellSize;\n        }\n        if (this.direction.y >= 0) {\n            tMaxY += cellSize;\n        }\n\n        tMaxX /= this.direction.x;\n        tMaxY /= this.direction.y;\n\n        while (Y < hash.numRows &&\n                Y > -1 &&\n                X < hash.numCols &&\n                X > -1) {\n            // In debug mode - Draw buckets that ray overlaps\n            if (window.renderer.debug) {\n                window.ctx.beginPath();\n                window.ctx.globalAlpha = 1;\n                window.ctx.strokeStyle = 'orange';\n                window.ctx.lineWidth = 3;\n                window.ctx.strokeRect(X * cellSize, Y * cellSize, cellSize, cellSize);\n            }\n\n            // If we've found some contents in that hash bucket...\n            if (hash.contents[Y] && hash.contents[Y][X] && hash.contents[Y][X].length !== 0) {\n                // TODO: Here's where we need to check if the object is\n                // actually intersecting the ray\n                // Intersect all objects in this voxel only\n                let contents = hash.contents[Y][X];\n                contents.forEach(body => {\n                    if (body.intersectionPoints[this.rayID]) {\n                        // Already tested this body\n                        // It either hit or missed, if it hit, grab the point\n                        if (body.intersectionPoints[this.rayID].status === 'hit') {\n                            this.updateIntersectionPoint(\n                                body.intersectionPoints[this.rayID].intPoint,\n                                body.intersectionPoints[this.rayID].segVec,\n                                body\n                            );\n                            return;\n                        }\n\n                        // It missed, so do nothing;\n                        return;\n                    }\n\n                    // If ray and body haven't been tested, then test\n                    // If it hits the AABB, then perform\n                    // actual intersection tests\n                    let hitsAABB = this.intersectAABB(body.aabb);\n                    if (hitsAABB) {\n                        switch (body.type) {\n                            case 'polygon':\n                            case 'rectangle':\n                                this.intersectPolygon(body);\n                                break;\n                            case 'circle':\n                                this.intersectCircle(body);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n\n                    // Flag body to know we've already tested this ray-body\n                    // combo\n                    if (this.intersectionPoint) {\n                        body.intersectionPoints[this.rayID] = {\n                            status: 'hit',\n                            intPoint: this.intersectionPoint,\n                            segVeg: this.intersectingSegment\n                        };\n                    } else {\n                        // If we missed, flag the body without\n                        // intersectionPoint\n                        body.intersectionPoints[this.rayID] = {status: 'miss'};\n                    }\n                });\n            }\n\n            // Increment X or Y step\n            if (tMaxX === undefined && tMaxY === undefined) {\n                break;\n            } else if (tMaxX === undefined) {\n                tMaxY += tDeltaY;\n                Y += stepY;\n            } else if (tMaxY === undefined) {\n                tMaxX += tDeltaX;\n                X += stepX;\n            } else if (tMaxX < tMaxY) {\n                tMaxX += tDeltaX;\n                X += stepX;\n            } else if (tMaxX >= tMaxY) {\n                tMaxY += tDeltaY;\n                Y += stepY;\n            }\n        }\n\n        return {\n            hashCoordinates: {\n                x: X,\n                y: Y\n            },\n            intPoint: this.intersectionPoint\n        };\n    },\n\n    /**\n     * Axis-Aligned Bounding Box Intersection test\n     * @param {AABB} aabb - the box to test\n     * @return {boolean} true for hit, false for miss\n     */\n    intersectAABB: function(aabb) {\n        let tx1 = (aabb.min.x - this.origin.x) * this.invDirection.x;\n        let tx2 = (aabb.max.x - this.origin.x) * this.invDirection.x;\n\n        let tmin = Math.min(tx1, tx2);\n        let tmax = Math.max(tx1, tx2);\n\n        let ty1 = (aabb.min.y - this.origin.y) * this.invDirection.y;\n        let ty2 = (aabb.max.y - this.origin.y) * this.invDirection.y;\n\n        tmin = Math.max(tmin, Math.min(ty1, ty2));\n        tmax = Math.min(tmax, Math.max(ty1, ty2));\n        let didHit = tmax >= tmin && tmax >= 0;\n        return didHit;\n    },\n\n    /**\n     * Internally used to update point of intersection property\n     * @private\n     * @param {Point} intPoint - object with x and y properties representing\n     * intersection point\n     * @param {Vector} segVec - vector object that was intersected\n     * @param {Body} body - body that was intersected\n     */\n    updateIntersectionPoint: function(intPoint, segVec, body) {\n        let px = this.origin.x;\n        let py = this.origin.y;\n        let ix = intPoint.x;\n        let iy = intPoint.y;\n\n        // If there was a previously stored intersection point,\n        // check if this one is closer,\n        // and if so update it's values\n        if (this.intersectionPoint) {\n            if (distance(px, py, ix, iy) <\n                distance(px, py, this.intersectionPoint.x, this.intersectionPoint.y)) {\n                this.intersectionPoint = {x: ix, y: iy};\n                this.intersectingBody = body;\n                this.intersectingSegment = segVec;\n            }\n        } else {\n            // We don't yet have an intersection point, so make a new\n            // one\n            this.intersectionPoint = {x: ix, y: iy};\n            this.intersectingBody = body;\n            this.intersectingSegment = segVec;\n        }\n    }\n};\n\n/**\n * 'Constructor' function\n * @public\n * @param {number} x - origin x\n * @param {number} y - origin y\n * @param {number} dir - direction in radians (or degrees if 'degrees' param\n * = true)\n * @param {bool} degrees - optional flag, if true, then read direction as\n * degrees\n *\n * @return {object} ray object\n */\nvar ray = function(x, y, dir, degrees) {\n    let R = Object.create(Ray);\n    R.init(x, y, dir, degrees);\n    return R;\n};\n\nexport default ray;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/geometries/Ray.js\n **/","import hash from '../geometries/SpatialHash';\n\nconst System = {};\nSystem.prototype = {\n    init: function(params) {\n        this.frames = [];\n        this.waves = [];\n        this.childWaves = [];\n        this.bodies = [];\n        this.width = params.width || 600;\n        this.height = params.height || 300;\n\n        // Cell size will adjust to fit world precisely\n        // May not be exaclty what user initialized\n        // let divisor = params.cellSize ? params.cellSize : 100;\n        this.cellSize = this.calculateCellSize(params.cellSize || 100);\n        // Initialize spatial hash\n        this.hash = this.initializeHash(this.cellSize, this.width, this.height);\n\n        // Ray ID Counter\n        this.currentRayId = 0;\n    },\n    calculateCellSize: function(cellSize) {\n        let divisor = cellSize ? cellSize : 100;\n        return this.width / Math.floor(this.width / divisor);\n    },\n    initializeHash: function(cellSize, width, height) {\n        return hash(cellSize, width, height);\n    },\n    /**\n     * Resize system - doesn't resize renderer (i.e. canvas)\n     * In event that thing should be drawn outside the system\n     * @param {number} width - new system width\n     * @param {number} height - new system height\n     * @param {number} [cellSize] - optional, new cell size\n     *\n     * @example - reset both system and canvas\n     * system.resize(500, 400, 30);\n     * renderer.resize(500, 400);\n     */\n    // resize: function(width, height, cellSize) {\n    //     this.width = width;\n    //     this.height = height;\n    //     this.cellSize = this.calculateCellSize(cellSize || this.cellSize);\n    //     this.hash = this.initializeHash(this.cellSize, width, height);\n    // },\n    // addFrame: function(frame) {\n    //     this.frames.push(frame);\n    // },\n    addChildWave: function(wave) {\n        this.childWaves.push(wave);\n    },\n    // addBody: function(body) {\n    //     this.bodies.push(body);\n    // },\n    addObject: function(obj) {\n        switch (obj.type) {\n            case 'rectangle':\n            case 'circle':\n            case 'polygon':\n                this.bodies.push(obj);\n                break;\n            case 'incident':\n            case 'wave':\n                this.waves.push(obj);\n                break;\n            default:\n                throw new Error('tried to add something that\\'s not a body or a wave');\n        }\n    },\n    /**\n     * Add objects to the system\n     * Objects not added will not be rendered\n     * or updated\n     *\n     * @param {Sci.Object|Sci.Object[]} b - a body or wave object, or array of body objects\n     */\n    add: function(b) {\n        if (typeof b === 'object' && b.length !== undefined) {\n            b.forEach(body => {\n                this.addObject(body);\n            });\n        } else {\n            this.addObject(b);\n        }\n    },\n    update: function() {\n        // Clear out hash at the start of every update loop\n        this.hash.clear();\n\n        // Put each body into the hash\n        this.bodies.forEach(body => {\n            this.hash.insertBody(body);\n            body.update();\n        });\n\n        // Each ray needs a unique ID for collision checking\n        // Reset currentRayID during each update loop so we can reuse these\n        // ID's\n        this.currentRayId = 0;\n\n        // Remove all child waves\n        this.childWaves = [];\n\n        // Update each wave and loop through it's chilren\n        this.waves.forEach(wave => {\n            wave.update(this);\n            this.traverseWaves(wave);\n        });\n    },\n\n    /**\n     * Recursively loop through child waves\n     * and add them to the system\n     * @param {Wave} wave - wave object to traverse\n     */\n    traverseWaves: function(wave) {\n        // If the wave has children\n        // Add each child to the system,\n        // then repeat for each child\n        // Exit condition -> When children have no children\n        if (wave.children.length !== 0) {\n            wave.children.forEach(child => {\n                this.addChildWave(child);\n                this.traverseWaves(child);\n            });\n        }\n    }\n};\n\n/**\n * @public\n * @param {object} params - initialization parameters\n * @return {System}\n *\n * params\n *  - width: int - width of entire system (usually canvas width)\n *  - height: number - height of entire system\n *  - cellSize: number - requested cellSize, (system will choose closest value\n *          that precisely fits into the system width)\n */\nconst system = function(params) {\n    const s = Object.create(System.prototype);\n    s.init(params);\n    return s;\n};\n\nexport default system;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/system/System.js\n **/","const SpatialHash = {};\n\nSpatialHash.prototype = {\n    init: function(cellSize, width, height) {\n        this.cellSize = cellSize;\n        this.width = width;\n        this.height = height;\n        this.numRows = Math.ceil(height / cellSize);\n        this.numCols = width / cellSize;\n        this.contents = {};\n    },\n\n    /**\n     * Return location that should store this point\n     * @param {object} point - object with x and y properties\n     * @return {object} - bucket which th epoint falls into\n     */\n    hash: function(point) {\n        return {col: Math.floor(point.x / this.cellSize), row: Math.floor(point.y / this.cellSize)};\n    },\n    insertBody: function(body) {\n        // Hash the vertices of the AABB\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                if (this.contents[r]) {\n                    if (this.contents[r][c]) {\n                        this.contents[r][c].push(body);\n                    } else {\n                        this.contents[r][c] = [body];\n                    }\n                } else {\n                    this.contents[r] = {};\n                    this.contents[r][c] = [body];\n                }\n            }\n        }\n    },\n    updateBody: function(body) {\n        this.removeBody(body);\n        this.insertBody(body);\n    },\n    removeBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And remove the object from all found buckets\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                let idx = this.contents[r][c].indexOf(body);\n                if (idx !== -1) {\n                    this.contents[r][c].splice(idx, 1);\n                }\n            }\n        }\n    },\n    queryBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n        let nearby = [];\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                this.contents[r][c].forEach(b => {\n                    if (nearby.indexOf(b) === -1 && b !== body) {\n                        nearby.push(b);\n                    }\n                });\n            }\n        }\n        return nearby;\n    },\n    queryPoint: function(point) {\n        let hash = this.hash(point);\n        return hash;\n    },\n    clear: function() {\n        this.contents = {};\n    }\n};\n\nconst hash = function(cellSize, width, height) {\n    let h = Object.create(SpatialHash.prototype);\n    h.init(cellSize, width, height);\n    return h;\n};\n\nexport default hash;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/geometries/SpatialHash.js\n **/","import * as math from '../math/math';\nconst Renderer = {};\nRenderer.prototype = {\n    init: function(params) {\n        this.clearBackground = true;\n        this.debug = params.debug || false;\n        this.background = params.background || 'black';\n\n        // Initialize Canvas element\n        // Pardon the ugly ternary...\n        this.canvas = (typeof params.canvas === 'undefined') ?\n            (function() {\n                let c = document.createElement('canvas');\n                c.id = 'canvas';\n                // Set default size\n                document.body.appendChild(c);\n                return c;\n            })() : (function() {\n                // Default values for canvas size\n                let c = document.getElementById(params.canvas);\n                return c;\n            })();\n\n        if (this.debug) {\n            window.renderer = this;\n            window.ctx = this.canvas.getContext('2d');\n        }\n\n        //this.canvas.width = params.width || 600;\n        //this.canvas.height = params.height || 300;\n        this.ctx = this.canvas.getContext('2d');\n    },\n\n    /**\n     * Resize the canvas\n     * @param {number} width - new width of canvas\n     * @param {number} height - new height of canvas\n     */\n    resize: function(width, height, cellSize) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.system.width = width;\n        this.system.height = height;\n        this.system.cellSize = system.calculateCellSize(cellSize || this.system.cellSize);\n        this.system.hash = this.system.initializeHash(this.system.cellSize, width, height);\n    },\n\n    /**\n     * Draw a body object\n     * @private\n     * @param {Body} body - phys.system object containing all objects\n     */\n    drawBody: function(body) {\n        if (this.debug) {\n            this.ctx.beginPath();\n            this.ctx.globalAlpha = 1;\n            this.ctx.strokeStyle = 'red';\n            this.ctx.lineWidth = 1;\n\n            let aabb = body.aabb;\n            let x = aabb.min.x;\n            let y = aabb.min.y;\n            let w = aabb.max.x - x;\n            let h = aabb.max.y - y;\n            this.ctx.rect(x, y, w, h);\n            this.ctx.stroke();\n        }\n\n        // Start a new path for each body\n        this.ctx.beginPath();\n        this.ctx.globalAlpha = 1;\n        switch (body.type) {\n            case 'rectangle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                let x, y, w, h;\n                switch (body._mode) {\n                    case 'LEFT': {\n                        x = body.position.x;\n                        y = body.position.y;\n                        w = body.width;\n                        h = body.height;\n                        break;\n                    }\n                    case 'CENTER':\n                        w = body.width;\n                        h = body.height;\n                        x = body.position.x - w / 2;\n                        y = body.position.y - h / 2;\n                        break;\n                    case 'RIGHT':\n                        w = body.width;\n                        h = body.height;\n                        x = body.position.x - w;\n                        y = body.position.y;\n                        break;\n                    default:\n                        break;\n                }\n                this.ctx.lineJoin = 'miter';\n                this.ctx.moveTo(x, y);\n                this.ctx.lineTo(x + w, y);\n                this.ctx.lineTo(x + w, y + h);\n                this.ctx.lineTo(x, y + h);\n                this.ctx.closePath();\n                this.ctx.fill();\n                this.ctx.stroke();\n                break;\n            }\n            case 'circle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n\n                this.ctx.ellipse(body.position.x, body.position.y, body.radius, body.radius, 0, 0, Math.PI * 2);\n                // this.ctx.closePath();\n                this.ctx.stroke();\n                // this.ctx.fill();\n                break;\n            }\n            case 'polygon': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                this.ctx.lineJoin = 'miter';\n                this.ctx.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (let i = 1; i < body.vertices.length; i++) {\n                    let v = body.vertices[i];\n                    this.ctx.lineTo(v.x, v.y);\n                }\n                this.ctx.closePath();\n                this.ctx.fill();\n                this.ctx.stroke();\n                break;\n            }\n            default:\n                break;\n        }\n    },\n    drawWave: function(wave) {\n        // No matter what the angle mode, always use radians\n        let angle = wave.mode === 'DEGREES' ? math.degToRad(wave.direction) : wave.direction;\n\n        // Set wave style properties\n        this.ctx.fillStyle = wave.style.fillStyle;\n        this.ctx.lineWidth = wave.style.lineWidth;\n        this.ctx.strokeStyle = wave.style.strokeStyle;\n        this.ctx.globalAlpha = math.map(wave.intensity, 0, 1, 0.3, 1);\n\n        // If debug == true, draw waves in certain colors\n        if (this.debug) {\n            if (wave.type === 'incident') {\n                // Draw starting circle\n                this.ctx.beginPath();\n                this.ctx.fillStyle = 'yellow';\n                this.ctx.ellipse(wave.position.x, wave.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.fill();\n                this.ctx.stroke();\n                this.ctx.strokeStyle = 'green';\n            } else if (wave.type === 'refracted') {\n                this.ctx.strokeStyle = 'blue';\n            } else if (wave.type === 'reflected') {\n                this.ctx.strokeStyle = 'orange';\n            }\n        }\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(wave.position.x, wave.position.y);\n\n        // If the wave intersects an object ahead, then\n        // only draw to that object. Otherwise draw an arbitrary length\n        if (wave.ray.intersectionPoint) {\n            this.ctx.lineTo(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y);\n            this.ctx.stroke();\n\n            // Draw intersection points as circles\n            // when in debug mode\n            if (this.debug) {\n                this.ctx.beginPath();\n                this.ctx.strokeStyle = 'red';\n                this.ctx.lineWidth = 0.5;\n                this.ctx.ellipse(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.stroke();\n            }\n        } else {\n            this.ctx.lineTo(2000 * Math.cos(angle) + wave.position.x, 2000 * Math.sin(angle) + wave.position.y);\n            this.ctx.stroke();\n        }\n    },\n\n    render: function(system, updateFn) {\n        // The first time the system renders,\n        // capture a local reference to it\n        // to be used to restart the renderer later\n        // if it's ever stopped\n        if (!this.system) {\n            this.system = system;\n            this.canvas.width = this.system.width;\n            this.canvas.height = this.system.height;\n        }\n\n        // In order to pass 'system' into render\n        // we have to wrap it in a function before\n        // passing it to requestAnimationFrame\n        let self = this;\n        this._requestID = requestAnimationFrame(function() {\n            self.render(system, updateFn);\n        });\n\n        // Clear background\n        if (this.clearBackground) {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n        // Draw background\n        this.ctx.beginPath();\n        this.ctx.globalAlpha = 1;\n        this.ctx.fillStyle = this.background;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // Call user draw code\n        updateFn();\n\n        // Update the system\n        // FIXME: this.laststate isn't doing anything right now\n        this.lastState = system.update();\n\n        // Draw all objects + waves\n        system.bodies.forEach(body => {\n            this.drawBody(body);\n        });\n\n        // Update all waves\n        system.waves.forEach(wave => {\n            this.drawWave(wave);\n        });\n\n        // Update all child waves\n        system.childWaves.forEach(wave => {\n            this.drawWave(wave);\n        });\n\n        // If in debug mode, draw spatial hash\n        // and highlight nodes that contain items in red\n        if (this.debug === true) {\n            let cellSize = system.hash.cellSize;\n            this.ctx.globalAlpha = 1;\n            this.ctx.lineWidth = 0.5;\n            for (let i = 0; i < system.hash.width; i += cellSize) {\n                for (let j = 0; j < system.hash.height; j += cellSize) {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = 'green';\n                    this.ctx.rect(i, j, cellSize, cellSize);\n                    this.ctx.stroke();\n                }\n            }\n            Object.keys(system.hash.contents).forEach(row => {\n                Object.keys(system.hash.contents[row]).forEach(col => {\n                    // Draw all squares\n                    this.ctx.beginPath();\n                    // this.ctx.strokeStyle = 'green';\n                    if (system.hash.contents[row][col].length !== 0) {\n                        this.ctx.strokeStyle = 'red';\n                    }\n                    this.ctx.rect(col * cellSize, row * cellSize, cellSize, cellSize);\n                    this.ctx.stroke();\n                });\n            });\n        }\n    },\n\n    /**\n     * Set's size of renderers canvas\n     * @param {number} width - width of canvas\n     * @param {number} height - height of canvas\n     */\n    setSize: function(width, height) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    },\n    /**\n     * Stop animation cycle\n     */\n    stop: function() {\n        cancelAnimationFrame(this.requestID);\n    },\n\n    /**\n     * Restart animation cycle\n     */\n    start: function() {\n        this.render(this.system);\n    }\n};\n\nvar renderer = function(params) {\n    let R = Object.create(Renderer.prototype);\n    R.init(params);\n    return R;\n};\n\nexport default renderer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/renderer/Renderer.js\n **/","/* eslint\n    \"no-multi-spaces\": \"off\"\n */\nimport Body from './Body';\nimport aabb from '../geometries/AABB';\n\nvar rect = function(options) {\n    options = options || {};\n\n    let B = Object.create(Body);\n    B.init(options);\n    B.type = 'rectangle';\n    B._mode = options.mode || 'LEFT';\n\n    // Define getters and setters for mode\n    Object.defineProperty(B, 'mode', {\n        get: function() {\n            return this._mode;\n        },\n        set: function(m) {\n            if (this._mode !== m && this.type === 'rectangle') {\n                switch (m) {\n                    case 'LEFT':\n                    case 'CENTER':\n                    case 'RIGHT':\n                        this._mode = m;\n                        this.updateVertices();\n                        break;\n                    default:\n                        console.warn(`Cannot set mode to ${m}`);\n                        break;\n                }\n            } else {\n                console.warn(`'mode' is only available on rectangles`);\n            }\n        }\n    });\n\n    /**\n     * Update location of vertices - used in update loop\n     */\n    B.updateVertices = function() {\n        let w = this.width,\n            h = this.height,\n            x, y;\n        switch (this._mode) {\n            case 'LEFT':\n                x = this.position.x;\n                y = this.position.y;\n                break;\n            case 'CENTER':\n                x = this.position.x - w / 2;\n                y = this.position.y - h / 2;\n                break;\n            case 'RIGHT':\n                x = this.x - w;\n                y = this.y;\n                break;\n            default:\n                break;\n        }\n        this.vertices = [\n            {x: x,     y: y},\n            {x: x + w, y: y},\n            {x: x + w, y: y + h},\n            {x: x,     y: y + h}\n        ];\n    };\n\n    /**\n     * Update segments - used in update loop\n     */\n    B.updateSegments = function() {\n        // What mode are we in?\n        let x, y, w, h;\n        //let pos = this.position;\n        switch (this._mode) {\n            case 'LEFT':\n                x = this.position.x;\n                y = this.position.y;\n                w = this.width;\n                h = this.height;\n                break;\n            case 'CENTER':\n                w = this.width;\n                h = this.height;\n                x = this.position.x - w / 2;\n                y = this.position.y - h / 2;\n                break;\n            case 'RIGHT':\n                w = this.width;\n                h = this.height;\n                x = this.x - w;\n                y = this.y;\n                break;\n            default:\n                break;\n        }\n\n        this.segments = [\n            [[x, y], [x + w, y]],\n            [[x + w, y], [x + w, y + h]],\n            [[x + w, y + h], [x, y + h]],\n            [[x, y + h], [x, y]]\n        ];\n    };\n\n    B.isPointInterior = function(x, y) {\n        let bx = B.position.x,\n            by = B.position.y;\n\n        if (x >= bx &&\n            x <= bx + B.width &&\n            y >= by &&\n            y <= by + B.height) {\n            return true;\n        }\n        return false;\n    };\n\n    B.updateVertices();\n    B.aabb = aabb(B);\n    return B;\n};\n\nexport default rect;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Rect.js\n **/","/* eslint \"no-unused-vars\": \"off\" */\n// What should a body be able to do?\n// 1. Attach to other bodies or surfaces\n// 2. Respond to forces (spring, friction)\n// 3. Move according to velocity and acceleration\n\nimport materials from '../extras/materials.json';\nimport vector from '../math/Vector';\nimport * as math from '../math/math';\n\n/**\n * Convenience Function so user doesn't have use 'new' keyword\n * @param {object} options - initialization options\n * @return {Body} instance of Body\n */\n\nlet Body = {\n    init: function(options) {\n        options = options || {};\n\n        // Warn user if a body object is initialized with nothing or an empty\n        // object\n        if (Object.keys(options).length === 0 && options.constructor === Object) {\n            console.warn('You probably should initialize body objects with some values...just sayin');\n        }\n\n        this.style = {\n            fillStyle: options.fillStyle || 'rgba(0,0,0,0)',\n            lineWidth: options.lineWidth || 2,\n            strokeStyle: options.strokeStyle || '#abcabc'\n        };\n        this.mass = options.mass || 0;\n        this.position = vector(options.x || 0, options.y || 0);\n        this.velocity = vector(\n            (options.velocity && options.velocity.x) || 0,\n            (options.velocity && options.velocity.y) || 0\n        );\n        this.height = options.height || 10;\n        this.width = options.width || 10;\n        this.refractiveIndex = options.refractiveIndex || 1;\n        this.material = options.material || 'GLASS';\n        this.materialColor = options.fillStyle || 'black';\n        this.mirror = options.mirror || false;\n        this.intersectionPoints = {};\n\n         // If the material is provided, set refractive index based on materials\n         // database\n        // TODO: Make setting either refractive index or material possible!!!\n        if (options.material && options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n            this.material = options.material;\n            console.warn('Setting both the material and the refractive index at the same time may cause some unexpected behavior'); //eslint-disable-line\n        } else if (options.material) {\n            // Check to make sure the material exists in the database\n            if (materials[this.material]) {\n                this.refractiveIndex = materials[this.material].refractiveIndex;\n            } else if (this.material === undefined || this.material === null) {\n                this.material = 'default';\n                this.refractiveIndex = 1;\n            } else {\n                console.error('the material ' + this.material + ' is not recognized. See the docs for supported default materials'); //eslint-disable-line\n            }\n        } else if (options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n        } else {\n            this.refractiveIndex = 1.33;\n        }\n    },\n\n    freeze: function() {\n        this._cachedVelocity = this.velocity.clone();\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n    },\n\n    unfreeze: function() {\n        if (this._cachedVelocity) {\n            this.velocity.x = this._cachedVelocity.x;\n            this.velocity.y = this._cachedVelocity.y;\n        } else {\n            console.warn('cannot unfreeze a non-frozen object');\n        }\n    },\n\n    update: function() {\n        this.position.add(this.velocity);\n\n        if (this.updateSegments) {\n            this.updateSegments();\n        }\n\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n\n        // For each update loop, reset intersection points to zero\n        this.intersectionPoints = {};\n\n        this.aabb.update();\n    }\n\n};\n\nexport default Body;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Body.js\n **/","module.exports = {\n\t\"GLASS\": {\n\t\t\"refractiveIndex\": 1.5\n\t},\n\t\"AIR\": {\n\t\t\"refractiveIndex\": 1.000277\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/extras/materials.json\n ** module id = 11\n ** module chunks = 0\n **/","/* eslint\n    \"no-else-return\": \"off\"\n */\nlet AABB = {\n    init: function(body) {\n        this.body = body;\n        let bounds = this.findMinMax(body);\n        this.max = bounds.max;\n        this.min = bounds.min;\n    },\n    /**\n     * Finds bounds of AABB\n     * Does not set any properties\n     * If you want to find and set, call AABB.update()\n     * @return {object} bounds\n     */\n    findMinMax: function() {\n        // Only deal with two types of bodies...Those with vertices, and\n        // circles\n        if (this.body.vertices) {\n            let minx,\n                miny,\n                maxx,\n                maxy;\n            this.body.vertices.forEach(v => {\n                let x = v.x,\n                    y = v.y;\n\n                // If nothing has been set, then set it\n                if (typeof minx === 'undefined') {\n                    minx = x;\n                } else if (typeof minx !== 'undefined' && x < minx) {\n                    // Something's already there, only update if x < minx\n                    minx = x;\n                }\n\n                if (typeof miny === 'undefined') {\n                    miny = y;\n                } else if (typeof miny !== 'undefined' && y < miny) {\n                    miny = y;\n                }\n\n                if (typeof maxx === 'undefined') {\n                    maxx = x;\n                } else if (typeof maxx !== 'undefined' && x > maxx) {\n                    maxx = x;\n                }\n\n                if (typeof maxy === 'undefined') {\n                    maxy = y;\n                } else if (typeof maxy !== 'undefined' && y > maxy) {\n                    maxy = y;\n                }\n            });\n\n            return {\n                max: {\n                    x: maxx,\n                    y: maxy\n                },\n                min: {\n                    x: minx,\n                    y: miny\n                }\n            };\n        } else {\n            // Assume it's a circle\n            let cx = this.body.position.x,\n                cy = this.body.position.y,\n                r = this.body.radius;\n            return {\n                max: {\n                    x: cx + r,\n                    y: cy + r\n                },\n                min: {\n                    x: cx - r,\n                    y: cy - r\n                }\n            };\n        }\n    },\n\n    /**\n     * Returns true of point is inside AABB\n     * @param {Point} point - must contain x and y props\n     * @return {bool} true if point is inside AABB\n     */\n    contains: function(point) {\n        let x = point.x,\n            y = point.y;\n        if (x >= this.min.x &&\n            x <= this.max.x &&\n            y >= this.min.y &&\n            y <= this.max.y) {\n            return true;\n        }\n\n        return false;\n    },\n\n    /**\n     * Updates the AABB\n     */\n    update: function() {\n        let bounds = this.findMinMax();\n        this.max = bounds.max;\n        this.min = bounds.min;\n    }\n};\n\nlet aabb = function(body) {\n    let ab = Object.create(AABB);\n    ab.init(body);\n    return ab;\n};\n\nexport default aabb;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/geometries/AABB.js\n **/","/* eslint \"no-unused-vars\": \"off\" */\nimport {degToRad, radToDeg, crossProduct2D, dotProduct2D, distance, map} from '../math/math';\nimport vector, {Vector} from '../math/Vector';\nimport ray from '../geometries/Ray';\n\nlet Wave = {\n    init: function(options) {\n        options = options || {};\n        const speedOfLight = 299792458;\n        this.children = [];\n        //this.outerBodies = [];\n        this.style = {\n            lineWidth: options.lineWidth || 1,\n            strokeStyle: options.strokeStyle || '#456abc',\n            opacity: options.opacity || 1.0\n        };\n\n        this.x = options.x || 10;\n        this.y = options.y || 10;\n        this.position = vector(options.x, options.y);\n        this.waveSpeed = options.waveSpeed || speedOfLight;\n        this.frequency = options.frequency || 1000;\n        this.wavelength = this.waveSpeed / this.frequency;  // Computed Property\n        this.velocity = options.velocity || vector(0, 0);\n        this.direction = options.direction || 0;\n        this.mode = options.mode || 'RADIAN';\n        this.intensity = options.intensity || 1;\n        this.type = options.type || 'incident';\n        this.parent = options.parent || null;\n        this.n1 = options.n1 || 1;\n        this.n2 = options.n2 || 1;\n        this.lastIntersection = {};\n\n        // create ray for detecting body intersections\n        this.ray = ray(this.position.x, this.y, this.direction, this.mode === 'DEGREES' || null);\n    },\n\n    update: function(system) {\n        this.ray.trace(system);\n\n        // Remove children on every update\n        this.children = [];\n        // If the ray intersected a point...\n        if (this.ray.intersectionPoint) {\n            this.lastIntersection = this.ray.intersectionPoint;\n            this.children = this.createChildren();\n\n            this.children.forEach(child => {\n                child.update(system);\n            });\n        }\n    },\n    createChildren: function() {\n        //Vector implementation of reflected and refracted waves here:\n        //http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf\n        //Normalize ray vector = this.ray.direction\n\n        // Find the normal vector (method of which depends on type of body)\n        // There are two possible normal vectors, but\n        // which one do we want?\n        // one which dot product with ray vector < 0 is what we want\n        // http://gamedev.stackexchange.com/questions/85850/collision-intersection-of-2d-ray-to-line-segment\n        let normal;\n\n        //selectNormal();\n        // TODO: Wrap this in it's own function (i.e. findNormal function)\n        let bType = this.ray.intersectingBody.type;\n        if (bType === 'rectangle' || bType === 'polygon') {\n            let intSeg = this.ray.intersectingSegment;\n\n            intSeg.normalize();\n            let dot = intSeg.dot(this.ray.direction);\n            let normals = [vector(-intSeg.y, intSeg.x), vector(intSeg.y, -intSeg.x)];\n\n            let that = this;\n            normals.forEach(n => {\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n        } else if (bType === 'circle') {\n            let cx = this.ray.intersectingBody.position.x;\n            let cy = this.ray.intersectingBody.position.y;\n            let ix = this.ray.intersectionPoint.x;\n            let iy = this.ray.intersectionPoint.y;\n            let v1 = vector(ix - cx, iy - cy),\n                v2 = vector(cx - ix, cy - iy);\n            v1.normalize();\n            v2.normalize();\n            let normals = [\n                v1,\n                v2\n            ];\n            let that = this;\n            normals.forEach(function(n) {\n                //n.normalize();\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n            if (normal === undefined) {\n                // We intersect at a tangent on a circle???\n                // TODO: Fix this!!!\n                normal = normals[0];\n            }\n        }\n\n        // child waves - reflected and refracted\n        // Calculate reflected vector\n        // https://en.wikipedia.org/wiki/Snell%27s_law#Vector_form\n        // http://stackoverflow.com/questions/5454661/reflection-how-do-i-do-it\n        // Reflected vector looks like this:\n        // r = a - 2(a dot n) * n\n        let tmpTerm = 2 * this.ray.direction.dot(normal);\n        let tmpVec = normal.clone();\n        tmpVec.multiply(2 * this.ray.direction.dot(normal));\n        let rVec = this.ray.direction.clone();\n        rVec.subtract(tmpVec);\n\n        // Refracted vector\n        // Are we inside a body?\n        // get origin points of wave, check if they are interior to the\n        // intersecting body, if so, n1 = body.refractiveIndex, if not, n1\n        // takes on refractive index of outer context,\n        // which we can find from it's parent wave\n        // If we have a body to intersect with...\n        if (this.type === 'incident' && this.ray.outerBodies.length > 0) {\n            //Grab the last one (the body on top)\n            this.n1 = this.ray.outerBodies[this.ray.outerBodies.length - 1].refractiveIndex;\n        }\n\n        // TODO: Figure out how to handle picking proper refractive index\n        // values\n        // for child rays\n        if (this.ray.intersectingBody) {\n            switch (this.type) {\n                case 'refracted':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.ray.intersectingBody) {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.parent.n1;\n                    } else {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'reflected':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.intersectingBody) {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.parent.n2;\n                    } else {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'incident':\n                    this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            // There's no intersection point ahead of this ray, so it's\n            // refractive indices are irrelevant\n            this.n1 = 1;\n            this.n2 = 1;\n            // If the ray won't intersect another body,\n            // then it must be outside of a body\n            //n2 = 1;\n\n            // n1 must take on the index of where the parent ray currently\n            // exists\n            //n1 = props.parent.intersectingBody.refractiveIndex;\n        }\n\n        let theta1 = Math.PI - this.ray.direction.angleTo(normal);\n        let theta2 = Math.asin(this.n1 * Math.sin(theta1) / this.n2);\n\n        // Vector formulation for refracted wave\n        // t = n1/n2 * rayVector + (n1/n2 * cos(theta1) - sqrt(1\n        // - sin2(theta2))) * normal\n        let sin2theta2 = (this.n1 / this.n2) * (this.n1 / this.n2) * (1 - (Math.cos(theta1) * Math.cos(theta1)));\n        let tVec = Vector.multiply((this.n1 / this.n2), this.ray.direction);\n        let normCopy = Vector.multiply(normal, (this.n1 / this.n2) * Math.cos(theta1) - Math.sqrt(1 - sin2theta2));\n        tVec.add(normCopy);\n\n        // Reflection Coefficient\n        // R = R0 + (1 - R0) * (1 - cos(theta1))^5 where R0 = (n1 - n2 / n1\n        // + n2)^2\n        let _r0 = (this.n1 - this.n2) / (this.n1 + this.n2);\n        let R0 = _r0 * _r0;\n        let _r0tmp;\n\n        // Angles must be positive, so if we get a negative value for an\n        // angle, just flip it\n        if (this.n1 <= this.n2) {\n            _r0tmp = (1 - (Math.cos(theta1) < 0 ? -Math.cos(theta1) : Math.cos(theta1)));\n        } else if (this.n1 > this.n2) {\n            _r0tmp = (1 - (Math.cos(theta2) < 0 ? -Math.cos(theta2) : Math.cos(theta2)));\n        }\n\n        // TODO: Refactor this to eliminate some checks if body is a mirror\n        let R = R0 + (1 - R0) * Math.pow(_r0tmp, 5);\n        let T = 1 - R;  // Refracion Coefficient\n        // Total Internal Reflection\n        if (Math.sin(theta1) > this.n2 / this.n1) {\n            R = 0.95;\n            T = 0;\n        }\n\n        // If the material should be treated as a mirror\n        if (this.ray.intersectingBody.mirror === true) {\n            R = 0.9;\n            T = 0;\n        }\n\n        let RI = this.intensity * R;\n        let TI = this.intensity * T;\n\n        // Add 2 child waves - reflected and refracted\n        // Trace reflected wave\n        // Have to offset the waves by at least a pixel,\n        // otherwise we'll end up in a never ending\n        // call stack when each child wave always produces\n        // 2 new child waves, forever...\n        let rVecAngle = rVec.getAngle();\n        let tVecAngle = tVec.getAngle();\n        let children = [];\n        if (RI > 0.01) {\n            let reflectedWave = wave({ // eslint-disable-line\n                x: this.ray.intersectionPoint.x + Math.cos(rVecAngle),\n                y: this.ray.intersectionPoint.y + Math.sin(rVecAngle),\n                direction: rVecAngle,\n                intensity: RI,\n                type: 'reflected',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(reflectedWave);\n        }\n\n        if (TI > 0.01) {\n            let refractedWave = wave({  // eslint-disable-line\n                x: this.ray.intersectionPoint.x - normal.x,\n                y: this.ray.intersectionPoint.y - normal.y,\n                direction: tVecAngle,\n                intensity: TI,\n                type: 'refracted',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(refractedWave);\n        }\n        return children;\n    }\n};\n\nconst wave = function(options) {\n    let W = Object.create(Wave);\n    W.init(options);\n    return W;\n};\n\nexport default wave;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Wave.js\n **/","import Body from './Body';\nimport aabb from '../geometries/AABB';\nimport {distance} from '../math/math';\n\nlet circle = function(options) {\n    options = options || {};\n    let B = Object.create(Body);\n    B.init(options);\n\n    B.radius = options.radius || 0;\n    B.type = 'circle';\n    B.aabb = aabb(B);\n\n    B.isPointInterior = function(x, y) {\n        let bx = B.position.x,\n            by = B.position.y;\n        if (distance(x, y, bx, by) <= B.radius) {\n            return true;\n        }\n        return false;\n    };\n\n    return B;\n};\n\nexport default circle;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Circle.js\n **/","import Body from './Body';\nimport aabb from '../geometries/AABB';\nimport vector from '../math/Vector';\n\nvar polygon = function(options) {\n    options = options || {};\n\n    var B = Object.create(Body);\n    if (!options.vertices) {\n        throw new Error('Polygons MUST be initialized with vertices. See docs.');\n    }\n    B.init(options);\n\n    //Initialize vetices as vectors\n    // private vertices, relative to x and y\n    B._relativeVertices = [];\n\n    // public vertices, (contain world coords);\n    B.vertices = [];\n    options.vertices.forEach(vert => {\n        B._relativeVertices.push(vector(vert.x, vert.y));\n        B.vertices.push(vector(options.x + vert.x, options.y + vert.y));\n    });\n\n    // Set type\n    B.type = 'polygon';\n\n    // Update all vertices based on position\n    B.updateVertices = function() {\n        B.vertices.forEach((vert, index) => {\n            let relVert = B._relativeVertices[index];\n            vert.x = relVert.x + B.position.x;\n            vert.y = relVert.y + B.position.y;\n        });\n    };\n\n    B.isPointInterior = function(x, y) {\n        var inside = false;\n        for (var i = 0, j = B.vertices.length - 1; i < B.vertices.length; j = i++) {\n            let vi = B.vertices[i];\n            let vj = B.vertices[j];\n            var xi = vi.x,\n                yi = vi.y;\n            var xj = vj.x,\n                yj = vj.y;\n\n            var intersect = ((yi > y) !== (yj > y)) &&\n                (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return inside;\n    };\n\n    // Initialize...\n    B.updateVertices();\n    B.aabb = aabb(B);\n    return B;\n};\n\nexport default polygon;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Polygon.js\n **/"],"sourceRoot":""}