{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap db6a4038b5e8445266b0","webpack:///./src/extras/polyfills.js","webpack:///./src/sciplay.js","webpack:///./src/math/Vector.js","webpack:///./src/math/math.js","webpack:///./src/math/Ray.js","webpack:///./src/system/System.js","webpack:///./src/math/SpatialHash.js","webpack:///./src/renderer/Renderer.js","webpack:///./src/bodies/Rect.js","webpack:///./src/bodies/Body.js","webpack:///./src/extras/materials.json","webpack:///./src/geometries/AABB.js","webpack:///./src/bodies/Wave.js","webpack:///./src/bodies/Circle.js"],"names":["lastTime","vendors","x","length","window","requestAnimationFrame","cancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","sciplay","Vector","vector","renderer","ray","system","wave","rect","circle","y","prototype","clone","set","prop","val","add","vec","subtract","multiply","getX","getY","magnitude","sqrt","magnitudeSq","dot","cross","angleTo","a","b","d","theta","acos","getAngle","mode","atan","atan2","PI","normalize","mag","v1","v2","angleBetween","degToRad","angle","radToDeg","distance","x1","y1","x2","y2","map","value","low1","high1","low2","high2","Ray","init","dir","degrees","origin","direction","cos","sin","outerBodies","t","innerWidth","innerHeight","x0","y0","slope","rayID","now","trace","intersectionPoint","intersectingBody","intersectingSegment","objects","forEach","body","type","intersectRect","intersectCircle","radius","f","position","c","desc","t1","t2","ix","iy","updateIntersectionPoint","isPointInterior","push","vertices","vertLength","intersection","vert","index","verts","seg2","intersectSegment","intPoint","segVec","seg","r","p","q","s","rxs","tmp","tNum","uNum","u","px","py","rx","ry","intersectHash","hash","bucket","row","col","X","Y","tMaxX","tMaxY","tDeltaX","tDeltaY","stepX","stepY","cellSize","verticalSeg","height","horizontalSeg","width","vInt","hInt","counter","contents","intersected","numTested","intersectionPoints","safetyCounter","intersectAABB","aabb","min","s1","s2","smin","smax","R","Object","create","System","params","frames","waves","childWaves","rays","divisor","floor","addFrame","frame","addRay","addWave","addChildWave","addObject","undefined","update","clear","insertBody","traverseWaves","children","child","SpatialHash","numRows","ceil","numCols","point","removeBody","idx","indexOf","splice","queryBody","nearby","queryPoint","h","Renderer","clearBackground","debug","background","canvas","document","createElement","appendChild","getElementById","ctx","getContext","renderObjects","draw","drawBody","fillStyle","style","lineWidth","strokeStyle","w","_mode","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","ellipse","fill","drawWave","render","self","_requestID","clearRect","fillRect","obj","i","j","keys","setSize","stop","requestID","start","options","B","defineProperty","get","m","updateVertices","console","warn","updateSegments","segments","math","Body","mass","velocity","refractiveIndex","material","materialColor","mirror","error","bx","by","freeze","_cachedVelocity","unfreeze","AABB","bounds","findMinMax","minx","miny","maxx","maxy","v","cx","cy","ab","Wave","speedOfLight","waveSpeed","frequency","wavelength","intensity","parent","n1","n2","lastIntersection","createChildren","normal","bType","intSeg","normals","that","n","tmpTerm","tmpVec","rVec","theta1","theta2","asin","sin2theta2","tVec","normCopy","_r0","R0","_r0tmp","pow","T","RI","TI","rVecAngle","tVecAngle","reflectedWave","refractedWave","W"],"mappings":"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","file":"sciplay.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sciplay\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sciplay\"] = factory();\n\telse\n\t\troot[\"sciplay\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap db6a4038b5e8445266b0\n **/","/* eslint \"max-len\": \"off\" */\n// Request animation frame shim\n(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n})();\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/extras/polyfills.js\n **/","/* MATH OBJECTS */\nimport vector, {Vector} from './math/Vector';\nimport ray from './math/Ray';\n\n/* CORE OBJECTS */\nimport system from './system/System';\nimport renderer from './renderer/Renderer.js';\n\n/* BODIES */\nimport rect from './bodies/Rect';\nimport wave from './bodies/Wave';\nimport circle from './bodies/Circle';\n\nlet sciplay = function() {\n    return {\n        Vector, // for operations that return a new vector\n        vector, // actual vector constructor\n        renderer,\n        ray,\n        system,\n        wave,\n        rect,\n        circle\n    };\n};\n\nexport default sciplay;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/sciplay.js\n **/","import {radToDeg} from './math';\n\nexport const Vector = function(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n};\n\nVector.prototype = {\n    clone: function() {\n        return new Vector(this.x, this.y);\n    },\n    /**\n     * Generic Setter\n     * @param {string} prop - property to set\n     * @param {*} val - value to set\n     */\n    set: function(prop, val) {\n        if (prop === 'x') {\n            this.x = val;\n        } else if (prop === 'y') {\n            this.y = val;\n        }\n    },\n    add: function(vec) {\n        this.x += vec.x;\n        this.y += vec.y;\n    },\n    subtract: function(vec) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n    },\n    multiply: function(vec) {\n        if (typeof vec === 'object') {\n            this.x *= vec.getX();\n            this.y *= vec.getY();\n        } else if (typeof vec === 'number') {\n            this.x *= vec;\n            this.y *= vec;\n        }\n    },\n    magnitude: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n    magnitudeSq: function() {\n        return this.x * this.x + this.y * this.y;\n    },\n    dot: function(vec) {\n        return this.x * vec.x + this.y * vec.y;\n    },\n    cross: function(vec) {\n        return this.x * vec.y - this.y * vec.x;\n    },\n    angleTo: function(vec) {\n        let a = this.magnitude();\n        let b = vec.magnitude();\n        let d = this.dot(vec);\n\n        let theta = Math.acos(d / (a * b));\n        return theta;\n    },\n    getAngle: function(mode) {\n        if (mode === 'DEGREES') {\n            return radToDeg(Math.atan(this.y / this.x));\n        }\n        let a = Math.atan2(this.y, this.x);\n        //return a;\n        return a < 0 ? Math.PI * 2 + a : a;\n    },\n    normalize: function(vec) {\n        let mag = this.magnitude();\n        this.x /= mag;\n        this.y /= mag;\n    }\n};\n\n// ---------- Static Methods -----------//\n/**\n * @static\n * @param {Vector} v1 - first Vector obj\n * @param {Vector} v2 - second Vector obj\n * @return {Vector}\n *\n * Adds two vectors, and returns a new one\n */\nVector.add = function(v1, v2) {\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\n};\nVector.subtract = function(v1, v2) {\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\n};\nVector.multiply = function(v1, v2) {\n    if (typeof v1 === 'number' && typeof v2 === 'number') {\n        return v1 * v2;\n    }\n\n    if (typeof v1 === 'object' && typeof v2 === 'number') {\n        return new Vector(v1.x * v2, v1.y * v2);\n    }\n\n    if (typeof v2 === 'object' && typeof v1 === 'number') {\n        return new Vector(v1 * v2.x, v1 * v2.y);\n    }\n};\nVector.dot = function(v1, v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n};\nVector.angleBetween = function(v1, v2) {\n    let a = v1.magnitude();\n    let b = v2.magnitude();\n    let d = v1.dot(v2);\n\n    let theta = Math.acos(d / (a * b));\n    return theta;\n};\n\nvar vector = function(x, y) {\n    return new Vector(x, y);\n};\n\nexport default vector;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/Vector.js\n **/","export const degToRad = function(angle) {\n    return angle * Math.PI / 180;\n};\n\nexport const radToDeg = function(angle) {\n    return angle * 180 / Math.PI;\n};\n\nexport const distance = function(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n};\n\nexport const map = function(value, low1, high1, low2, high2) {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n};\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/math.js\n **/","/* eslint\n    \"no-unused-vars\": \"off\",\n    \"no-debugger\": \"off\"\n */\nimport {distance, degToRad} from './math';\nimport vector, {Vector} from './Vector.js';\n\nlet Ray = {\n    /**\n     * Initialization\n     * @param {number} x - origin x\n     * @param {number} y - origin y\n     * @param {number} dir - direction in radians (or degrees if 'degrees' param\n     * = true)\n     * @param {bool} degrees - optional flag, if true, then read direction as\n     * degrees\n     */\n    init: function(x, y, dir, degrees) {\n        if (degrees) {\n            dir = degToRad(dir);\n        }\n\n        this.origin = vector(x, y);\n        this.direction = vector(Math.cos(dir), Math.sin(dir));\n        this.outerBodies = [];\n        this.t = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;\n        let x0 = this.origin.x,\n            y0 = this.origin.y,\n            x1 = this.origin.x + this.direction.x * this.t,\n            y1 = this.origin.y + this.direction.y * this.t;\n        this.slope = (y1 - y0) / (x1 - x0);\n        // TODO: Figure out a way to give each ray a unique ID\n        this.rayID = Date.now();\n    },\n\n    /**\n     * Return the objects from spatial hash to perform collision detection on\n     * @param {SpatialHash} hash - hash from the System\n     */\n\n    trace: function(system) {\n        // Always use radians, regardless of mode\n        // Also angle should be in range 0 <= angle <= 2PI\n        //let angle = this.direction.getAngle();\n        this.intersectionPoint = null;\n        this.intersectingBody = null;\n        this.intersectingSegment = null;\n\n        // Look through all bodies for segments\n        // See if they intersect the ray\n        system.objects.forEach(body => {\n            switch (body.type) {\n                case 'rectangle':\n                    this.intersectRect(body);\n                    break;\n                case 'circle':\n                    this.intersectCircle(body);\n                    break;\n                case 'polygon':\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        // After going through all bodies and segments,\n        // if an intersection point was found...\n        if (this.intersectionPoint) {\n            return true;\n        }\n    },\n\n    /**\n     * Detect if ray intersects circle\n     * http://stackoverflow.com/questions/1073336/circle-line-segment-collision-detection-algorithm\n     *\n     * Using the following formula\n     * t^2 * (r DOT r) + 2t*( f DOT r ) + ( f DOT f - radius^2 ) = 0\n     * at^2 + bt + c where a = d.dot(d), b = 2*f.dot(d), c = f.dot(f)\n     * - radius^2\n     *      where:\n     *          d = end point of ray - start point of ray\n     *          t = scalar value - what we're solving for\n     *          r = ray vector\n     *          f = vector from center of sphere to origin of ray\n     *          radius = radius of circle\n     *\n     * 3x HIT cases:\n     *  -o->                    --|-->  |            |  --|->\n     * Impale(t1 hit,t2 hit), Poke(t1 hit,t2>1), ExitWound(t1<0, t2 hit),\n     *\n     * 3x MISS cases:\n     *     ->  o                     o ->              | -> |\n     * FallShort (t1>1,t2>1), Past (t1<0,t2<0), CompletelyInside(t1<0, t2>1)\n     *\n     * @param {Body} circle - circle body object\n     * @param {Vector} p - point of origin\n     * @param {Vector} r - ray vector\n     * @return {boolean} true if intersection was found, false otherwise\n     */\n    intersectCircle: function(circle) {\n        let radius = circle.radius;\n\n        let d = vector(this.direction.x * this.t, this.direction.y * this.t);\n        let f = Vector.subtract(this.origin, circle.position);//this.origin.clone();\n\n        // Solve the quadratic equation\n        let a = d.dot(d);\n        let b = 2 * f.dot(d);\n        let c = f.dot(f) - radius * radius;\n\n        // Descriminant b^2 - 4ac\n        let desc = (b * b) - (4 * a * c);\n\n        if (desc < 0) {\n            // No intersection\n        } else {\n            // Ray hit circle\n            // Two possible solutions\n            desc = Math.sqrt(desc);\n            let t1 = (-b - desc) / (2 * a);\n            let t2 = (-b + desc) / (2 * a);\n            let ix, iy;\n\n            // If t1 intersected the circle...\n            // Note: t1 is always closer than t2\n            if (t1 >= 0 && t1 <= 1) {\n                ix = this.origin.x + d.x * t1;\n                iy = this.origin.y + d.y * t1;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n\n            // If t1 doesn't intersect, check t2\n            if (t2 >= 0 && t2 <= 1) {\n                ix = this.origin.x + d.x * t2;\n                iy = this.origin.y + d.y * t2;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Handles case of ray-rectangle intersection\n     * If an intersecting segment is found,\n     * set the props accordingly\n     * @private\n     * @param {Rect} rect - rect body object\n     * @return {bool} true if intersected, otherwise false\n     */\n    intersectRect: function(rect) {\n        if (rect.isPointInterior(this.origin.x, this.origin.y)) {\n            this.outerBodies.push(rect);\n        }\n        //let segs = rect.segments;\n        let vertices = rect.vertices;\n        let vertLength = vertices.length;\n        let intersection;\n        vertices.forEach((vert, index, verts) => {\n            let seg2;\n            if (index === vertLength - 1) {\n                seg2 = verts[0];\n            } else {\n                seg2 = verts[index + 1];\n            }\n            //let segVec = vector(vert, seg2);\n            intersection = this.intersectSegment([vert, seg2]);\n            if (intersection) {\n                this.updateIntersectionPoint(intersection.intPoint, intersection.segVec, rect);\n            }\n        });\n\n        return typeof intersection !== 'undefined';\n    },\n    /**\n     * Detects Ray-Segment intersection - Returns intersection coords\n     * @param {Array} seg - segment vertices\n     * @return {Object} returns intersection point with body, or false\n     */\n    intersectSegment: function(seg) {\n        //let t1 = Math.abs(v2.cross(v1)) / (v2.dot(v3));\n        //let t2 = (v1.dot(v3)) / (v2.dot(v3));\n        let r = vector(this.t * this.direction.x, this.t * this.direction.y);\n        let p = vector(this.origin.x, this.origin.y);\n        let q = vector(seg[0].x, seg[0].y);\n        let s = vector(seg[1].x - seg[0].x, seg[1].y - seg[0].y);\n        //let q = vector(seg[0][0], seg[0][1]);\n        //let s = vector(seg[1][0] - seg[0][0], seg[1][1] - seg[0][1]);\n\n        // check for intersection\n        // t = (q − p) x s / (r x s)\n        // u = (q − p) x r / (r x s)\n        let rxs = r.cross(s);\n            //tmp = q.copy();\n        let tmp = Vector.subtract(q, p);\n        //tmp.subtract(p);\n        let tNum = tmp.cross(s),\n            uNum = tmp.cross(r);\n\n        let t, u;\n        if (rxs !== 0) {\n            t = tNum / rxs;\n            u = uNum / rxs;\n        }\n\n        // TODO: handle collinear case\n        if (rxs === 0 && uNum === 0) {\n            // lines are collinear\n        } else if (rxs === 0 && uNum !== 0) {\n            // lines are parallel and non-intersecting\n            return;\n        } else if (rxs !== 0 && t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n            // Two lines intersect,\n            // and meet at the point\n            // p + tr = q + us\n            let px = p.x,\n                py = p.y,\n                rx = r.x,\n                ry = r.y,\n                ix = px + t * rx,\n                iy = py + t * ry;\n\n            return {\n                intPoint: vector(ix, iy),\n                segVec: s,\n                t\n            };\n        } else {\n            // Line segments do not intersect\n            // if we've gone through all the segments of the body,\n            //intersectionPoint = null;\n            return false;\n        }\n    },\n\n    /**\n     * Test for Ray-Hash bucket intersections\n     * @param {SpatialHash} hash - system.hash object\n     * @return {array} list of intersected buckets\n     *\n     * See here: http://www.cse.chalmers.se/edu/year/2011/course/TDA361_Computer_Graphics/grid.pdf\n     */\n    intersectHash: function(hash) {\n        // Algorithm steps\n        // Identify voxel where ray enters grid\n\n        /*\n         * The traversal algorithm consists of two phases: initialization and incremental traversal. The initialization\n            phase begins by identifying the voxel in which the ray origin, →\n            u, is found. If the ray origin is outside\n            the grid, we find the point in which the ray enters the grid and take the adjacent voxel. The integer\n            variables X and Y are initialized to the starting voxel coordinates. In addition, the variables stepX and\n            stepY are initialized to either 1 or -1 indicating whether X and Y are incremented or decremented as the\n            ray crosses voxel boundaries (this is determined by the sign of the x and y components of →\n            v).\n            Next, we determine the value of t at which the ray crosses the first vertical voxel boundary and\n            store it in variable tMaxX. We perform a similar computation in y and store the result in tMaxY. The\n            minimum of these two values will indicate how much we can travel along the ray and still remain in the\n            current voxel.\n            Finally, we compute tDeltaX and tDeltaY. TDeltaX indicates how far along the ray we must move\n            (in units of t) for the horizontal component of such a movement to equal the width of a voxel. Similarly,\n            we store in tDeltaY the amount of movement along the ray which has a vertical component equal to the\n            height of a voxel\n        */\n\n        // Initialize variables\n        let bucket = hash.hash(this.origin);\n        let {row, col} = bucket;\n        let X = col,\n            Y = row;\n        let tMaxX, tMaxY, tDeltaX, tDeltaY;\n        let stepX = this.direction.x < 0 ? -1 : 1,\n            stepY = this.direction.y < 0 ? -1 : 1;\n        let cellSize = hash.cellSize;\n\n        // Step 1. Initialization - determine starting voxel\n        //if (hash.contents[row] && hash.contents[row][col]) {\n            //// Ray origin is inside a voxel that exists\n            //X = col * cellSize;\n            //Y = row * cellSize;\n        //} else {\n            //// TODO: Figure out how to find first voxel intersected by ray\n            //// Create long vertical and horizontal vectors, but the starting\n            //// point will depend on the direction of the ray\n        //}\n\n        // Cast first ray!\n        // TODO Finish this!\n        // This should all be in a loop, right???\n        let verticalSeg = [\n            vector((col + stepX) * cellSize, row * cellSize),\n            vector((col + stepX) * cellSize, hash.height)];\n        let horizontalSeg = [\n            vector(col * cellSize, (row + stepY) * cellSize),\n            vector(hash.width, (row + stepY) * cellSize)];\n\n        let vInt = this.intersectSegment(verticalSeg);\n        let hInt = this.intersectSegment(horizontalSeg);\n        tMaxX = distance(this.origin.x, this.origin.y, vInt.intPoint.x, vInt.intPoint.y);\n        tMaxY = distance(this.origin.x, this.origin.y, hInt.intPoint.x, hInt.intPoint.y);\n        tDeltaX = tMaxX;\n        tDeltaY = tMaxY;\n        let counter = 0;\n        while (counter < 50) {\n            if (hash.contents[Y] && hash.contents[Y][X] && hash.contents[Y][X].length !== 0) {\n                // TODO: Here's where we need to check if the object is\n                // actually intersecting the ray\n                // Intersect all objects in this voxel only\n                let contents = hash.contents[Y][X];\n                let intersected = false;\n                let numTested = 0;\n                contents.forEach(body => {\n                    numTested++;\n                    if (body.intersectionPoints[this.rayID]) {\n                        // Dont' perform intersection test, just grab the point\n                        this.updateIntersectionPoint(body.intersectionPoints[this.rayID].intPoint, body.intersectionPoints[this.rayID].segVec, body);\n\n                    }\n                    switch (body.type) {\n                        case 'rectangle':\n                            this.intersectRect(body);\n                            break;\n                        case 'circle':\n                            this.intersectCircle(body);\n                            break;\n                        default:\n                            break;\n                    }\n                });\n\n                // TODO: Finish this!!!!!!\n                // If we've found an intersection point\n                if (this.intersectionPoint) {\n                    // Make sure it's in this voxel\n                    if (this.intersectionPoint.x > (X + 1) * cellSize) {\n                        // Intersection could't have occured in the voxel\n                        // So set this intersection point on the body itself,\n                        // so we dont' have to perform the intersection test\n                        // again\n                        this.intersectingBody.intersectionPoints[this.rayID] = this.intersectionPoint;\n                        debugger;\n                    }\n                    //if (this.intersectionPoint.x > X * cellSize &&\n                        //this.intersectionPoint.x < (X + 1) * cellSize &&\n                        //this.intersectionPoint.y > Y * cellSize &&\n                        //this.intersectionPoint.y)\n                }\n                debugger;\n            }\n            // This should happen in a loop...\n            if (tMaxX < tMaxY) {\n                //distX = distance(this.origin.x\n                tMaxX += tDeltaX;\n                X += stepX;\n            } else {\n                tMaxY += tDeltaY;\n                Y += stepY;\n            }\n\n            counter++;\n        }\n\n        //let distanceToVerticalBoundary = distance(this.origin.x, this.origin.y, vertIntPoint.intPoint.x, vertIntPoint.intPoint.y);\n        //let distanceToHorizontalBoundary = distance(this.origin.x, this.origin.y, horIntPoint.intPoint.x, horIntPoint.intPoint.y);\n        //if (distanceToVerticalBoundary < distanceToHorizontalBoundary) {\n            //distanceToHorizontalBoundary\n        //} else {\n\n        //}\n\n        let safetyCounter = 0;\n        while (safetyCounter < 10000) {\n            safetyCounter++;\n        }\n\n        // Step 2. Find distances to nearest vertical and horizontal segments\n        // of the voxel\n        // Need to know what direction the ray is going in...\n        if (this.direction.x > 0 && this.direction.y > 0) {\n            // Down and to the right\n            //let verticalSeg = [vector(X + cellSize),\n            let verts = [vector(X + cellSize, Y), vector(X + cellSize, Y + cellSize)];\n            let intersection = this.intersectSegment(verts);\n        } else if (this.direction.x > 0 && this.direction.y < 0) {\n            // Up and to the right\n        } else if (this.direction.x < 0 && this.direction.y > 0) {\n            // Down and to the left\n        } else if (this.direction.x < 0 && this.direction.y < 0) {\n            // Up and to the left\n        }\n        //\n        return [];\n    },\n\n    /**\n     * Simple Ray-AABB Test\n     * Only returns if intersection exists, DOES NOT give distance to\n     * intersection\n     * 2D version of this: http://www.cg.cs.tu-bs.de/media/publications/fast-rayaxis-aligned-bounding-box-overlap-tests-using-ray-slopes.pdf\n     * @param {AABB} aabb - axis-aligned bounding-box instance\n     * @return {bool} did intersection occur\n     */\n    intersectAABB: function(aabb) {\n        // Steps:\n        // 1. Get slope of line from ray origin to aabb.min and aabb.max\n        // 2. if slope of ray is between slopes generated in step 1, then\n        // ray intersects\n        //\n        // Handle two cases : positive vs. negative slope\n        // If slope is positive, use min + width and min + height as corners to\n        // check\n        // Otherwise use regular min and max\n        let min, max;\n        if (this.slope > 0) {\n            min = {x: aabb.max.x, y: aabb.min.y};\n            max = {x: aabb.min.x, y: aabb.max.y};\n        } else {\n            min = aabb.min;\n            max = aabb.max;\n        }\n\n        let s1 = (min.y - this.origin.y) / (min.x - this.origin.x);\n        let s2 = (max.y - this.origin.y) / (max.x - this.origin.x);\n        let smin = Math.min(s1, s2);\n        let smax = Math.max(s1, s2);\n\n        if (this.slope < smax && this.slope > smin) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Internally used to update point of intersection property\n     * @param {Point} intPoint - object with x and y properties representing\n     * intersection point\n     * @param {Vector} segVec - vector object that was intersected\n     * @param {Body} body - body that was intersected\n     */\n    updateIntersectionPoint: function(intPoint, segVec, body) {\n        let px = this.origin.x;\n        let py = this.origin.y;\n        let ix = intPoint.x;\n        let iy = intPoint.y;\n\n        // If there was a previously stored intersection point,\n        // check if this one is closer,\n        // and if so update it's values\n        if (this.intersectionPoint) {\n            if (distance(px, py, ix, iy) <\n                distance(px, py, this.intersectionPoint.x, this.intersectionPoint.y)) {\n                this.intersectionPoint = {x: ix, y: iy};\n                this.intersectingBody = body;\n                this.intersectingSegment = segVec;\n            }\n        } else {\n            // We don't yet have an intersection point, so make a new\n            // one\n            this.intersectionPoint = {x: ix, y: iy};\n            this.intersectingBody = body;\n            this.intersectingSegment = segVec;\n        }\n    }\n};\n\n/**\n * 'Constructor' function\n * @param {number} x - origin x\n * @param {number} y - origin y\n * @param {number} dir - direction in radians (or degrees if 'degrees' param\n * = true)\n * @param {bool} degrees - optional flag, if true, then read direction as\n * degrees\n *\n * @return {object} ray object\n */\nvar ray = function(x, y, dir, degrees) {\n    let R = Object.create(Ray);\n    R.init(x, y, dir, degrees);\n    return R;\n};\n\nexport default ray;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/Ray.js\n **/","import hash from '../math/SpatialHash';\n\nconst System = {};\nSystem.prototype = {\n    init: function(params) {\n        this.frames = [];\n        this.objects = [];\n        this.waves = [];\n        this.childWaves = [];\n        this.rays = [];\n        this.width = params.width || 600;\n        this.height = params.height || 300;\n\n        let divisor = params.cellSize ? params.cellSize : 100;\n\n        let cellSize = this.width / Math.floor(this.width / divisor);\n        this.hash = hash(cellSize, this.width, this.height);\n    },\n    addFrame: function(frame) {\n        this.frames.push(frame);\n    },\n    addRay: function(ray) {\n        this.rays.push(ray);\n    },\n    addWave: function(wave) {\n        this.waves.push(wave);\n    },\n    addChildWave: function(wave) {\n        this.childWaves.push(wave);\n    },\n\n    /**\n     * Add objects to the system\n     * Objects not added will not be rendered\n     * or updated\n     *\n     * @param {Body|Body[]} b - a body object, or array of body objects\n     */\n    addObject: function(b) {\n        if (typeof b === 'object' && b.length !== undefined) {\n            // b is an array\n            b.forEach(body => {\n                this.objects.push(body);\n            });\n        } else {\n            this.objects.push(b);\n        }\n    },\n    update: function() {\n        this.hash.clear();\n        this.objects.forEach(body => {\n            this.hash.insertBody(body);\n            body.update();\n        });\n\n        this.childWaves = [];\n        this.waves.forEach(wave => {\n            wave.update(this);\n            this.traverseWaves(wave);\n        });\n    },\n    traverseWaves: function(wave) {\n        if (wave.children.length !== 0) {\n            wave.children.forEach(child => {\n                this.addChildWave(child);\n                this.traverseWaves(child);\n            });\n        }\n    }\n};\n\nconst system = function(params) {\n    const s = Object.create(System.prototype);\n    s.init(params);\n    return s;\n};\n\nexport default system;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/system/System.js\n **/","const SpatialHash = {};\nSpatialHash.prototype = {\n    init: function(cellSize, width, height) {\n        this.cellSize = cellSize;\n        this.width = width;\n        this.height = height;\n        this.numRows = Math.ceil(height / cellSize);\n        this.numCols = width / cellSize;\n    },\n\n    /**\n     * Return location that should store this point\n     * @param {object} point - object with x and y properties\n     * @return {object} - bucket which th epoint falls into\n     */\n    hash: function(point) {\n        return {col: Math.floor(point.x / this.cellSize), row: Math.floor(point.y / this.cellSize)};\n    },\n    insertBody: function(body) {\n        // Hash the vertices of the AABB\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                if (this.contents[r]) {\n                    if (this.contents[r][c]) {\n                        this.contents[r][c].push(body);\n                    } else {\n                        this.contents[r][c] = [body];\n                    }\n                } else {\n                    this.contents[r] = {};\n                    this.contents[r][c] = [body];\n                }\n            }\n        }\n    },\n    removeBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And remove the object from all found buckets\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                let idx = this.contents[r][c].indexOf(body);\n                if (idx !== -1) {\n                    this.contents[r][c].splice(idx, 1);\n                }\n            }\n        }\n    },\n    queryBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n        let nearby = [];\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                this.contents[r][c].forEach(b => {\n                    if (nearby.indexOf(b) === -1 && b !== body) {\n                        nearby.push(b);\n                    }\n                });\n            }\n        }\n        return nearby;\n    },\n    queryPoint: function(point) {\n        let hash = this.hash(point);\n        return hash;\n    },\n    clear: function() {\n        this.contents = {};\n    }\n};\n\nconst hash = function(cellSize, width, height) {\n    let h = Object.create(SpatialHash.prototype);\n    h.init(cellSize, width, height);\n    return h;\n};\n\nexport default hash;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/SpatialHash.js\n **/","import {degToRad} from '../math/math';\nconst Renderer = {};\nRenderer.prototype = {\n    init: function(params) {\n        this.clearBackground = true;\n        this.debug = params.debug || false;\n        this.background = params.background || 'black';\n        this.canvas = (typeof params.canvas === 'undefined') ?\n            (function() {\n                let c = document.createElement('canvas');\n                c.id = 'canvas';\n                // Set default size\n                document.body.appendChild(c);\n                return c;\n            })() : (function() {\n                // Default values for canvas size\n                let c = document.getElementById(params.canvas);\n                return c;\n            })();\n\n        //this.canvas.width = params.width || 600;\n        //this.canvas.height = params.height || 300;\n        this.ctx = this.canvas.getContext('2d');\n    },\n    /**\n     * Draw bodies and waves\n     * @private\n     * @param {object} system - phys.system object containing all objects\n     */\n    renderObjects: function(system) {\n        system.objects.forEach(body => {\n            this.draw(body);\n            //body.draw(this.ctx);\n        });\n\n        system.waves.forEach(wave => {\n            wave.trace(system, this.ctx);\n            wave.draw(this.ctx);\n        });\n\n        //system.rays.forEach(ray => {\n        //ray.draw(ctx);\n        //});\n    },\n    drawBody: function(body) {\n        switch (body.type) {\n            case 'rectangle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                let x, y, w, h;\n                switch (body._mode) {\n                    case 'LEFT': {\n                        x = body.position.x;\n                        y = body.position.y;\n                        w = body.width;\n                        h = body.height;\n                        break;\n                    }\n                    case 'CENTER':\n                        w = body.width;\n                        h = body.height;\n                        x = body.position.x - w / 2;\n                        y = body.position.y - h / 2;\n                        break;\n                    case 'RIGHT':\n                        w = body.width;\n                        h = body.height;\n                        x = body.position.x - w;\n                        y = body.position.y;\n                        break;\n                    default:\n                        break;\n                }\n                this.ctx.lineJoin = 'miter';\n                this.ctx.beginPath();\n                this.ctx.moveTo(x, y);\n                this.ctx.lineTo(x + w, y);\n                this.ctx.lineTo(x + w, y + h);\n                this.ctx.lineTo(x, y + h);\n                this.ctx.closePath();\n                this.ctx.stroke();\n                break;\n            }\n            case 'circle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n\n                this.ctx.beginPath();\n                this.ctx.ellipse(body.position.x, body.position.y, body.radius, body.radius, 0, 0, Math.PI * 2);\n                this.ctx.closePath();\n                this.ctx.stroke();\n                this.ctx.fill();\n            }\n                break;\n            default:\n                break;\n        }\n    },\n    drawWave: function(wave) {\n        // No matter what the angle mode, always use radians\n        let angle = wave.mode === 'DEGREES' ? degToRad(wave.direction) : wave.direction;\n        this.ctx.fillStyle = wave.style.fillStyle;\n        this.ctx.lineWidth = wave.style.lineWidth;\n        this.ctx.strokeStyle = wave.style.strokeStyle;\n        this.ctx.beginPath();\n\n        // If debug == true, draw waves in certain colors\n        if (this.debug) {\n            if (wave.type === 'incident') {\n                // Draw starting circle\n                this.ctx.strokeStyle = 'yellow';\n                this.ctx.fillStyle = 'yellow';\n                this.ctx.beginPath();\n                this.ctx.ellipse(wave.position.x, wave.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.fill();\n                this.ctx.stroke();\n                this.ctx.strokeStyle = 'green';\n            } else if (wave.type === 'refracted') {\n                this.ctx.strokeStyle = 'blue';\n            } else if (wave.type === 'reflected') {\n                this.ctx.strokeStyle = 'orange';\n            }\n        }\n\n        //this.ctx.globalAlpha = map(wave.intensity, 0, 1, 0.3, 1);\n        this.ctx.moveTo(wave.position.x, wave.position.y);\n\n        // If the wave intersects an object ahead, then\n        // only draw to that object. Otherwise draw an arbitrary length\n        if (wave.ray.intersectionPoint) {\n            this.ctx.lineTo(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y);\n            this.ctx.stroke();\n            this.ctx.beginPath();\n            this.ctx.strokeStyle = 'red';\n            this.ctx.ellipse(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y, 3, 3, 0, 0, Math.PI * 2);\n            //this.ctx.stroke();\n        } else {\n            this.ctx.lineTo(2000 * Math.cos(angle) + wave.position.x, 2000 * Math.sin(angle) + wave.position.y);\n            this.ctx.stroke();\n        }\n    },\n\n    render: function(system) {\n        // The first time the system renders,\n        // capture a local reference to it\n        // to be used to restart the renderer later\n        // if it's ever stopped\n        if (!this.system) {\n            this.system = system;\n            this.canvas.width = this.system.width;\n            this.canvas.height = this.system.height;\n        }\n\n        // In order to pass 'system' into render\n        // we have to wrap it in a function before\n        // passing it to requestAnimationFrame\n        let self = this;\n        this._requestID = requestAnimationFrame(function() {\n            self.render(system);\n        });\n\n        // Clear background\n        if (this.clearBackground) {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n        // Draw background\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.background;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // Update the system\n        system.update();\n\n        // Draw all objects + waves\n        system.objects.forEach(obj => {\n            this.drawBody(obj);\n        });\n\n        system.waves.forEach(wave => {\n            this.drawWave(wave);\n        });\n\n        system.childWaves.forEach(wave => {\n            this.drawWave(wave);\n        });\n\n        if (this.debug === true) {\n            let cellSize = system.hash.cellSize;\n            for (let i = 0; i < system.hash.width; i+=cellSize) {\n                for (let j = 0; j < system.hash.height; j+=cellSize) {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = 'green';\n                    this.ctx.rect(i, j, cellSize, cellSize);\n                    this.ctx.stroke();\n                }\n            }\n            Object.keys(system.hash.contents).forEach(row => {\n                Object.keys(system.hash.contents[row]).forEach(col => {\n                    // Draw all squares\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = 'green';\n                    if (system.hash.contents[row][col].length !== 0) {\n                        this.ctx.strokeStyle = 'red';\n                    }\n                    this.ctx.rect(col * cellSize, row * cellSize, cellSize, cellSize);\n                    this.ctx.stroke();\n                });\n            });\n        }\n        // Render bodies\n        //this.renderObjects(system);\n    },\n    /**\n     * Set's size of renderers canvas\n     * @param {number} width - width of canvas\n     * @param {number} height - height of canvas\n     */\n    setSize: function(width, height) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        //if (shouldUpdateStyle) {\n        //canvas.style.width = `${width}px`;\n        //canvas.style.height = `${height}px`;\n        //}\n    },\n    /**\n     * Stop animation cycle\n     * @public\n     */\n    stop: function() {\n        cancelAnimationFrame(this.requestID);\n    },\n\n    /**\n     * Restart animation cycle\n     */\n    start: function() {\n        this.render(this.system);\n    }\n};\n\nvar renderer = function(params) {\n    let R = Object.create(Renderer.prototype);\n    R.init(params);\n    return R;\n};\n\nexport default renderer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/renderer/Renderer.js\n **/","/* eslint\n    \"no-multi-spaces\": \"off\"\n */\nimport Body from './Body';\nimport aabb from '../geometries/AABB';\n\nvar rect = function(options) {\n    let B = Object.create(Body);\n    B.init(options);\n    B.type = 'rectangle';\n    B._mode = options.mode || 'LEFT';\n\n    // Define getters and setters for mode\n    Object.defineProperty(B, 'mode', {\n        get: function() {\n            return this._mode;\n        },\n        set: function(m) {\n            if (this._mode !== m && this.type === 'rectangle') {\n                switch (m) {\n                    case 'LEFT':\n                    case 'CENTER':\n                    case 'RIGHT':\n                        this._mode = m;\n                        this.updateVertices();\n                        break;\n                    default:\n                        console.warn(`Cannot set mode to ${m}`);\n                        break;\n                }\n            } else {\n                console.warn(`'mode' is only available on rectangles`);\n            }\n        }\n    });\n\n    /**\n     * Update location of vertices - used in update loop\n     */\n    B.updateVertices = function() {\n        let w = this.width,\n            h = this.height,\n            x, y;\n        switch (this._mode) {\n            case 'LEFT':\n                x = this.position.x;\n                y = this.position.y;\n                break;\n            case 'CENTER':\n                x = this.position.x - w / 2;\n                y = this.position.y - h / 2;\n                break;\n            case 'RIGHT':\n                x = this.x - w;\n                y = this.y;\n                break;\n            default:\n                break;\n        }\n        this.vertices = [\n            {x: x,     y: y},\n            {x: x + w, y: y},\n            {x: x + w, y: y + h},\n            {x: x,     y: y + h}\n        ];\n    };\n\n    /**\n     * Update segments - used in update loop\n     */\n    B.updateSegments = function() {\n        // What mode are we in?\n        let x, y, w, h;\n        //let pos = this.position;\n        switch (this._mode) {\n            case 'LEFT':\n                x = this.position.x;\n                y = this.position.y;\n                w = this.width;\n                h = this.height;\n                break;\n            case 'CENTER':\n                w = this.width;\n                h = this.height;\n                x = this.position.x - w / 2;\n                y = this.position.y - h / 2;\n                break;\n            case 'RIGHT':\n                w = this.width;\n                h = this.height;\n                x = this.x - w;\n                y = this.y;\n                break;\n            default:\n                break;\n        }\n\n        this.segments = [\n            [[x, y], [x + w, y]],\n            [[x + w, y], [x + w, y + h]],\n            [[x + w, y + h], [x, y + h]],\n            [[x, y + h], [x, y]]\n        ];\n    };\n\n    B.updateVertices();\n    B.aabb = aabb(B);\n    return B;\n};\n\nexport default rect;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Rect.js\n **/","/* eslint \"no-unused-vars\": \"off\" */\n// What should a body be able to do?\n// 1. Attach to other bodies or surfaces\n// 2. Respond to forces (spring, friction)\n// 3. Move according to velocity and acceleration\n\nimport materials from '../extras/materials.json';\nimport vector from '../math/Vector';\nimport * as math from '../math/math';\n\n/**\n * Convenience Function so user doesn't have use 'new' keyword\n * @param {object} options - initialization options\n * @return {Body} instance of Body\n */\n\nlet Body = {\n    init: function(options) {\n        options = options || {};\n        this.style = {\n            fillStyle: options.fillStyle || 'rgba(0,0,0,0)',\n            lineWidth: options.lineWidth || 2,\n            strokeStyle: options.strokeStyle || '#abcabc'\n        };\n        this.mass = options.mass || 0;\n        this.position = vector(options.x || 0, options.y || 0);\n        this.velocity = vector(\n            (options.velocity && options.velocity.x) || 0,\n            (options.velocity && options.velocity.y) || 0\n        );\n        this.height = options.height || 10;\n        this.width = options.width || 10;\n        this.refractiveIndex = options.refractiveIndex || 1;\n        this.material = options.material || 'GLASS';\n        this.materialColor = options.fillStyle || 'black';\n        this.mirror = options.mirror || false;\n        this.intersectionPoints = [];\n\n         // If the material is provided, set refractive index based on materials\n         // database\n        // TODO: Make setting either refractive index or material possible!!!\n        if (options.material && options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n            this.material = options.material;\n            console.warn('Setting both the material and the refractive index at the same time may cause some unexpected behavior'); //eslint-disable-line\n        } else if (options.material) {\n            // Check to make sure the material exists in the database\n            if (materials[this.material]) {\n                this.refractiveIndex = materials[this.material].refractiveIndex;\n            } else if (this.material === undefined || this.material === null) {\n                this.material = 'default';\n                this.refractiveIndex = 1;\n            } else {\n                console.error('the material ' + this.material + ' is not recognized. See the docs for supported default materials'); //eslint-disable-line\n            }\n        } else if (options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n        } else {\n            this.refractiveIndex = 1.33;\n        }\n    },\n\n    // Should use a raycasting technique to accomodate\n    // arbitrary polygons\n    isPointInterior: function(x, y) {\n        let bx = this.position.x;\n        let by = this.position.y;\n        switch (this.type) {\n            case 'rectangle':\n                if (x >= bx &&\n                    x <= bx + this.width &&\n                    y >= by &&\n                    y <= by + this.height) {\n                    return true;\n                }\n                return false;\n            case 'circle':\n                if (math.distance(x, y, bx, by) <= this.radius) {\n                    return true;\n                }\n                return false;\n            default:\n                break;\n        }\n    },\n    freeze: function() {\n        this._cachedVelocity = this.velocity.clone();\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n    },\n\n    unfreeze: function() {\n        if (this._cachedVelocity) {\n            this.velocity.x = this._cachedVelocity.x;\n            this.velocity.y = this._cachedVelocity.y;\n        } else {\n            console.warn('cannot unfreeze a non-frozen object');\n        }\n    },\n\n    update: function() {\n        if (this.updateSegments) {\n            this.updateSegments();\n        }\n\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n\n        this.aabb.update();\n        this.position.add(this.velocity);\n    }\n\n};\n\nexport default Body;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Body.js\n **/","module.exports = {\n\t\"GLASS\": {\n\t\t\"refractiveIndex\": 1.5\n\t},\n\t\"AIR\": {\n\t\t\"refractiveIndex\": 1.000277\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/extras/materials.json\n ** module id = 11\n ** module chunks = 0\n **/","/* eslint\n    \"no-else-return\": \"off\"\n */\nlet AABB = {\n    init: function(body) {\n        this.body = body;\n        let bounds = this.findMinMax(body);\n        this.max = bounds.max;\n        this.min = bounds.min;\n    },\n    /**\n     * Finds bounds of AABB\n     * Does not set any properties\n     * If you want to find and set, call AABB.update()\n     * @return {object} bounds\n     */\n    findMinMax: function() {\n        if (this.body.vertices) {\n            let minx,\n                miny,\n                maxx,\n                maxy;\n            this.body.vertices.forEach(v => {\n                let x = v.x,\n                    y = v.y;\n\n                // If nothing has been set, then set it\n                if (typeof minx === 'undefined') {\n                    minx = x;\n                } else if (typeof minx !== 'undefined' && x < minx) {\n                    // Something's already there, only update if x < minx\n                    minx = x;\n                }\n\n                if (typeof miny === 'undefined') {\n                    miny = y;\n                } else if (typeof miny !== 'undefined' && y < miny) {\n                    miny = y;\n                }\n\n                if (typeof maxx === 'undefined') {\n                    maxx = x;\n                } else if (typeof maxx !== 'undefined' && x > maxx) {\n                    maxx = x;\n                }\n\n                if (typeof maxy === 'undefined') {\n                    maxy = y;\n                } else if (typeof maxy !== 'undefined' && y > maxy) {\n                    maxy = y;\n                }\n            });\n\n            return {\n                max: {\n                    x: maxx,\n                    y: maxy\n                },\n                min: {\n                    x: minx,\n                    y: miny\n                }\n            };\n        } else {\n            // Assume it's a circle\n            let cx = this.body.position.x,\n                cy = this.body.position.y,\n                r = this.body.radius;\n            return {\n                max: {\n                    x: cx + r,\n                    y: cy + r\n                },\n                min: {\n                    x: cx - r,\n                    y: cy - r\n                }\n            };\n        }\n    },\n\n    /**\n     * Updates the AABB\n     */\n    update: function() {\n        let bounds = this.findMinMax();\n        this.max = bounds.max;\n        this.min = bounds.min;\n    }\n};\n\nlet aabb = function(body) {\n    let ab = Object.create(AABB);\n    ab.init(body);\n    return ab;\n};\n\nexport default aabb;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/geometries/AABB.js\n **/","/* eslint \"no-unused-vars\": \"off\" */\nimport {degToRad, radToDeg, crossProduct2D, dotProduct2D, distance, map} from '../math/math';\nimport vector, {Vector} from '../math/Vector';\nimport ray from '../math/Ray';\n\nlet Wave = {\n    init: function(options) {\n        options = options || {};\n        const speedOfLight = 299792458;\n        this.children = [];\n        //this.outerBodies = [];\n        this.style = {\n            lineWidth: options.lineWidth || 1,\n            strokeStyle: options.strokeStyle || '#456abc'\n        };\n\n        this.x = options.x || 10;\n        this.y = options.y || 10;\n        this.position = vector(options.x, options.y);\n        this.waveSpeed = options.waveSpeed || speedOfLight;\n        this.frequency = options.frequency || 1000;\n        this.wavelength = this.waveSpeed / this.frequency;  // Computed Property\n        this.velocity = options.velocity || vector(0, 0);\n        this.direction = options.direction || 0;\n        this.mode = options.mode || 'RADIAN';\n        this.intensity = options.intensity || 1;\n        this.type = options.type || 'incident';\n        this.parent = options.parent || null;\n        //this.intersectingBody = {};\n        //this.intersectionPoint = {};\n        //this.intersectingSegment = {};\n        this.n1 = options.n1 || 1;\n        this.n2 = options.n2 || 1;\n        this.lastIntersection = {};\n        //this.type = 'wave';\n\n        // create ray for detecting body intersections\n        this.ray = ray(this.position.x, this.y, this.direction, this.mode === 'DEGREES' || null);\n    },\n\n    update: function(system) {\n        this.ray.trace(system);\n\n        // Remove children on every update\n        this.children = [];\n        // If the ray intersected a point...\n        if (this.ray.intersectionPoint) {\n            this.lastIntersection = this.ray.intersectionPoint;\n            this.children = this.createChildren();\n\n            this.children.forEach(child => {\n                child.update(system);\n            });\n        }\n    },\n    createChildren: function() {\n        //Vector implementation of reflected and refracted waves here:\n        //http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf\n        //Normalize ray vector = this.ray.direction\n\n        // Find the normal vector (method of which depends on type of body)\n        // There are two possible normal vectors, but\n        // which one do we want?\n        // one which dot product with ray vector < 0 is what we want\n        // http://gamedev.stackexchange.com/questions/85850/collision-intersection-of-2d-ray-to-line-segment\n        let normal;\n\n        //selectNormal();\n        // TODO: Wrap this in it's own function (i.e. findNormal function)\n        let bType = this.ray.intersectingBody.type;\n        if (bType === 'rectangle') {\n            let intSeg = this.ray.intersectingSegment;\n\n            intSeg.normalize();\n            let dot = intSeg.dot(this.ray.direction);\n            let normals = [vector(-intSeg.y, intSeg.x), vector(intSeg.y, -intSeg.x)];\n\n            let that = this;\n            normals.forEach(n => {\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n        } else if (bType === 'circle') {\n            let cx = this.ray.intersectingBody.position.x;\n            let cy = this.ray.intersectingBody.position.y;\n            let ix = this.ray.intersectionPoint.x;\n            let iy = this.ray.intersectionPoint.y;\n            let v1 = vector(ix - cx, iy - cy),\n                v2 = vector(cx - ix, cy - iy);\n            v1.normalize();\n            v2.normalize();\n            let normals = [\n                v1,\n                v2\n            ];\n            let that = this;\n            normals.forEach(function(n) {\n                //n.normalize();\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n            if (normal === undefined) {\n                // We intersect at a tangent on a circle???\n                // TODO: Fix this!!!\n                normal = normals[0];\n            }\n        }\n\n        // child waves - reflected and refracted\n        // Calculate reflected vector\n        // https://en.wikipedia.org/wiki/Snell%27s_law#Vector_form\n        // http://stackoverflow.com/questions/5454661/reflection-how-do-i-do-it\n        // Reflected vector looks like this:\n        // r = a - 2(a dot n) * n\n        let tmpTerm = 2 * this.ray.direction.dot(normal);\n        let tmpVec = normal.clone();\n        tmpVec.multiply(2 * this.ray.direction.dot(normal));\n        let rVec = this.ray.direction.clone();\n        rVec.subtract(tmpVec);\n\n        // Refracted vector\n        // Are we inside a body?\n        // get origin points of wave, check if they are interior to the\n        // intersecting body, if so, n1 = body.refractiveIndex, if not, n1\n        // takes on refractive index of outer context,\n        // which we can find from it's parent wave\n        // If we have a body to intersect with...\n        if (this.type === 'incident' && this.ray.outerBodies.length > 0) {\n            //Grab the last one (the body on top)\n            this.n1 = this.ray.outerBodies[this.ray.outerBodies.length - 1].refractiveIndex;\n        }\n\n        // TODO: Figure out how to handle picking proper refractive index\n        // values\n        // for child rays\n        if (this.ray.intersectingBody) {\n            switch (this.type) {\n                case 'refracted':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.ray.intersectingBody) {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.parent.n1;\n                    } else {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'reflected':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.intersectingBody) {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.parent.n2;\n                    } else {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'incident':\n                    this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            // There's no intersection point ahead of this ray, so it's\n            // refractive indices are irrelevant\n            this.n1 = 1;\n            this.n2 = 1;\n            // If the ray won't intersect another body,\n            // then it must be outside of a body\n            //n2 = 1;\n\n            // n1 must take on the index of where the parent ray currently\n            // exists\n            //n1 = props.parent.intersectingBody.refractiveIndex;\n        }\n\n        let theta1 = Math.PI - this.ray.direction.angleTo(normal);\n        let theta2 = Math.asin(this.n1 * Math.sin(theta1) / this.n2);\n\n        // Vector formulation for refracted wave\n        // t = n1/n2 * rayVector + (n1/n2 * cos(theta1) - sqrt(1\n        // - sin2(theta2))) * normal\n        let sin2theta2 = (this.n1 / this.n2) * (this.n1 / this.n2) * (1 - (Math.cos(theta1) * Math.cos(theta1)));\n        let tVec = Vector.multiply((this.n1 / this.n2), this.ray.direction);\n        let normCopy = Vector.multiply(normal, (this.n1 / this.n2) * Math.cos(theta1) - Math.sqrt(1 - sin2theta2));\n        tVec.add(normCopy);\n\n        // Reflection Coefficient\n        // R = R0 + (1 - R0) * (1 - cos(theta1))^5 where R0 = (n1 - n2 / n1\n        // + n2)^2\n        let _r0 = (this.n1 - this.n2) / (this.n1 + this.n2);\n        let R0 = _r0 * _r0;\n        let _r0tmp;\n\n        // Angles must be positive, so if we get a negative value for an\n        // angle, just flip it\n        if (this.n1 <= this.n2) {\n            _r0tmp = (1 - (Math.cos(theta1) < 0 ? -Math.cos(theta1) : Math.cos(theta1)));\n        } else if (this.n1 > this.n2) {\n            _r0tmp = (1 - (Math.cos(theta2) < 0 ? -Math.cos(theta2) : Math.cos(theta2)));\n        }\n\n        let R = R0 + (1 - R0) * Math.pow(_r0tmp, 5);\n        let T = 1 - R;  // Refracion Coefficient\n        // Total Internal Reflection\n        if (Math.sin(theta1) > this.n2 / this.n1) {\n            R = 1;\n            T = 0;\n        }\n\n        // If the material should be treated as a mirror\n        if (this.ray.intersectingBody.mirror === true) {\n            R = 0.9;\n            T = 0;\n        }\n\n        let RI = this.intensity * R;\n        let TI = this.intensity * T;\n\n        // Add 2 child waves - reflected and refracted\n        // Trace reflected wave\n        // Have to offset the waves by at least a pixel,\n        // otherwise we'll end up in a never ending\n        // call stack when each child wave always produces\n        // 2 new child waves, forever...\n        let rVecAngle = rVec.getAngle();\n        let tVecAngle = tVec.getAngle();\n        let children = [];\n        if (RI > 0.01) {\n            let reflectedWave = wave({ // eslint-disable-line\n                x: this.ray.intersectionPoint.x + Math.cos(rVecAngle),\n                y: this.ray.intersectionPoint.y + Math.sin(rVecAngle),\n                direction: rVecAngle,\n                intensity: RI,\n                type: 'reflected',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(reflectedWave);\n        }\n\n        if (TI > 0.01) {\n            let refractedWave = wave({  // eslint-disable-line\n                x: this.ray.intersectionPoint.x - normal.x,\n                y: this.ray.intersectionPoint.y - normal.y,\n                direction: tVecAngle,\n                intensity: TI,\n                type: 'refracted',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(refractedWave);\n        }\n        return children;\n    }\n};\n\nconst wave = function(options) {\n    let W = Object.create(Wave);\n    W.init(options);\n    return W;\n};\n\nexport default wave;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Wave.js\n **/","import Body from './Body';\nimport aabb from '../geometries/AABB';\n\nlet circle = function(options) {\n    let B = Object.create(Body);\n    B.init(options);\n\n    B.radius = options.radius || 0;\n    B.type = 'circle';\n    B.aabb = aabb(B);\n\n    return B;\n};\n\nexport default circle;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Circle.js\n **/"],"sourceRoot":""}