{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap e178587a47782e5693d1","webpack:///./src/extras/polyfills.js","webpack:///./src/sciplay.js","webpack:///./src/math/Vector.js","webpack:///./src/math/math.js","webpack:///./src/geometries/Ray.js","webpack:///./src/system/System.js","webpack:///./src/geometries/SpatialHash.js","webpack:///./src/collision/Broadphase.js","webpack:///./src/collision/Pair.js","webpack:///./src/collision/Narrowphase.js","webpack:///./src/collision/SAT.js","webpack:///./src/collision/Collision.js","webpack:///./src/collision/Solver.js","webpack:///./src/renderer/Renderer.js","webpack:///./src/bodies/Rect.js","webpack:///./src/bodies/Body.js","webpack:///./src/extras/materials.json","webpack:///./src/geometries/AABB.js","webpack:///./src/bodies/Wave.js","webpack:///./src/bodies/Circle.js","webpack:///./src/bodies/Polygon.js"],"names":["lastTime","vendors","x","length","window","requestAnimationFrame","cancelAnimationFrame","callback","element","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","sciplay","Vector","vector","renderer","ray","system","wave","rect","polygon","circle","y","prototype","clone","set","prop","val","add","vec","subtract","multiply","magnitude","sqrt","magnitudeSq","negate","rotate","angle","sin","cos","dot","cross","angleTo","a","b","d","theta","acos","getAngle","mode","atan","atan2","PI","normalize","mag","perp","side","tmp","distanceTo","scalarProject","scalarProjectUnit","vectorProject","scalarComp","vectorProjectUnit","translate","v1","v2","angleBetween","degToRad","radToDeg","distance","x1","y1","x2","y2","map","value","low1","high1","low2","high2","Ray","init","dir","degrees","origin","direction","invDirection","outerBodies","t","innerWidth","innerHeight","x0","y0","slope","numTests","trace","intersectionPoint","intersectingBody","intersectingSegment","rayID","currentRayId","intersectHash","hash","intersectCircle","radius","f","position","c","desc","t1","t2","ix","iy","updateIntersectionPoint","intersectPolygon","poly","isPointInterior","push","vertices","vertLength","intersection","forEach","vert","index","verts","seg2","intersectSegment","intPoint","segVec","seg","r","p","q","s","rxs","tNum","uNum","u","px","py","rx","ry","bucket","row","col","X","Y","tMaxX","tMaxY","tDeltaX","tDeltaY","stepX","stepY","cellSize","abs","numRows","numCols","debug","ctx","beginPath","globalAlpha","strokeStyle","lineWidth","strokeRect","contents","body","intersectionPoints","status","hitsAABB","intersectAABB","aabb","type","segVeg","undefined","hashCoordinates","tx1","min","tx2","tmin","tmax","ty1","ty2","didHit","R","Object","create","System","params","frames","waves","childWaves","bodies","width","height","collisionPairs","nextBodyId","calculateCellSize","initializeHash","broadphase","narrowphase","solver","divisor","floor","addChildWave","addObject","obj","Error","remove","idx","indexOf","splice","update","clear","insertBody","pairs","getCollisionPairs","collisions","keys","checkForCollisions","solve","coll","traverseWaves","children","child","SpatialHash","ceil","point","updateBody","removeBody","queryBody","nearby","queryPoint","h","Broadphase","aabbOverlap","body1","body2","overlap","canCollide","collisionCounter","i","j","otherBody","Pair","b1","b2","pair","Narrowphase","collision","intersect","colliderList","n","SAT","projectBody","axis","v","scaledRadius","lineOverlap","p1min","p1max","p2min","p2max","polycircle","polypoly","circlecircle","c1","c2","rplusr","p1","p2","axes","smallestOverlap","MTVAxis","numVerts1","numVerts2","p1Projection","p2Projection","vc","pProjection","cProjection","Collision","mtv","Solver","xOverlap","yOverlap","resolutionVector","math","Renderer","clearBackground","background","canvas","document","createElement","appendChild","getElementById","getContext","resize","drawBody","w","stroke","ellipse","centroid","fillStyle","style","lineJoin","colliding","moveTo","lineTo","closePath","fill","drawWave","intensity","render","updateFn","_requestID","clearRect","fillRect","lastState","setSize","stop","start","options","B","_mode","defineProperty","get","m","updateVertices","console","warn","angularVelocity","_rotation","_scale","vertex","bx","by","Body","constructor","mass","velocity","rotation","refractiveIndex","material","materialColor","mirror","error","freeze","_cachedVelocity","unfreeze","scaleFactor","AABB","bounds","findMinMax","minx","miny","maxx","maxy","cx","cy","contains","ab","Wave","speedOfLight","opacity","waveSpeed","frequency","wavelength","parent","n1","n2","lastIntersection","createChildren","normal","bType","intSeg","normals","that","tmpTerm","tmpVec","rVec","theta1","theta2","asin","sin2theta2","tVec","normCopy","_r0","R0","_r0tmp","pow","T","RI","TI","rVecAngle","tVecAngle","reflectedWave","refractedWave","W","_relativeVertices","relVert","inside","vi","vj","xi","yi","xj","yj"],"mappings":"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","file":"sciplay.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sciplay\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sciplay\"] = factory();\n\telse\n\t\troot[\"sciplay\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e178587a47782e5693d1\n **/","/* eslint \"max-len\": \"off\" */\n// Request animation frame shim\n(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n            window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() {\n                callback(currTime + timeToCall);\n            }, timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n    }\n\n    if (!window.cancelAnimationFrame) {\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    }\n})();\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/extras/polyfills.js\n **/","/* MATH OBJECTS */\nimport vector, {Vector} from './math/Vector';\nimport ray from './geometries/Ray';\n\n/* CORE OBJECTS */\nimport system from './system/System';\nimport renderer from './renderer/Renderer';\n\n/* BODIES */\nimport rect from './bodies/Rect';\nimport wave from './bodies/Wave';\nimport circle from './bodies/Circle';\nimport polygon from './bodies/Polygon';\n\nlet sciplay = function() {\n    return {\n        Vector, // for operations that return a new vector\n        vector, // actual vector constructor\n        renderer,\n        ray,\n        system,\n        wave,\n        rect,\n        polygon,\n        circle\n    };\n};\n\nexport default sciplay;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/sciplay.js\n **/","/**\n * Generic Vector class\n *\n *\n * @example\n * import vector, {Vector} from 'Vector';\n *\n * Instantiate new objects in the following ways\n *  1. use vector convenience function like so: vector(x, y);\n *  2. use Vector object directly like: new Vector(x, y);\n *\n * Methods on a newly created vector, such as .add or .subtract\n * modify the x and y properties on that vector, changing them forever\n * i.e.\n *      let vec1 = vector(0, 0);\n *      let vec2 = vector(10, 20);\n *      vec1.add(vec2);\n *\n * Results in vec1.x = 10 and vec1.y = 20.  vec2 is unmodified\n *\n * To perform an operation on two vectors and return a new vector,\n * without modifying the input vectors, use the methods on {Vector}\n * i.e.\n *      let vec1 = vector(0, 0);\n *      let vec2 = vector(10, 20);\n *      let vec3 = Vector.add(vec1, vec2);\n *\n * Results in vec1 and vec2 remining unmodified,\n * and vec3.x = 10 and vec3.y = 20\n *\n */\n\nimport {radToDeg} from './math';\n\n/**\n * Base Vector constructor\n * @constructor\n * @param {number} x - x coordinate\n * @param {number} y - y coordinate\n */\nexport const Vector = function(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n};\n\n/**\n * Prototype object for all Vectors\n */\nVector.prototype = {\n    /**\n     * Return a copy of a vector\n     * @method\n     * @return {Vector} a new vector object\n     */\n    clone: function() {\n        return new Vector(this.x, this.y);\n    },\n\n    /**\n     * Generic Setter\n     * @method\n     * @param {string} prop - property to set\n     * @param {*} val - value to set\n     * @return {This} for chaining\n     */\n    set: function(prop, val) {\n        if (prop === 'x') {\n            this.x = val;\n        } else if (prop === 'y') {\n            this.y = val;\n        }\n        return this;\n    },\n\n    /**\n     * Add another vector to this vector, modifying internal\n     * properties\n     * @method\n     * @param {Vector} vec - vector to add\n     * @return {This} for chaining\n     */\n    add: function(...args) {\n        let x, y;\n        if (args.length === 1) {\n            let vec = args[0];\n            if (typeof vec === 'object') {\n                x = vec.x;\n                y = vec.y;\n            }\n        } else if (args.length === 2) {\n            if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n                x = args[0];\n                y = args[1];\n            }\n        }\n\n        this.x += x;\n        this.y += y;\n\n        return this;\n    },\n\n    /**\n     * Subtract another vector from this vector\n     * @method\n     * @param {Vector} vec - vector to subtract\n     * @return {This} for chaining\n     */\n    subtract: function(vec) {\n        this.x -= vec.x;\n        this.y -= vec.y;\n        return this;\n    },\n\n    /**\n     * Multiply another vector by this vector or scalar\n     * modifies internal properties\n     * @param {Vector|number} vec - either Vector object or single scalar\n     * @return {This} for chaining\n     */\n    multiply: function(vec) {\n        if (typeof vec === 'object') {\n            this.x *= vec.x;\n            this.y *= vec.y;\n        } else if (typeof vec === 'number') {\n            this.x *= vec;\n            this.y *= vec;\n        }\n\n        return this;\n    },\n\n    /**\n     * Gives the magnitude (length, essentially) of the vector\n     * @method\n     * @return {number} magnitude of the vector\n     */\n    magnitude: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    /**\n     * Magnitude squared - useful when trying to save on computation\n     * @method\n     * @return {number} mag squared\n     */\n    magnitudeSq: function() {\n        return this.x * this.x + this.y * this.y;\n    },\n\n    /**\n     * Negate both x and y values (essentially rotate vector 180 degrees)\n     * @method\n     * @return {Vector} for method chaining\n     */\n    negate: function() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    },\n\n    /**\n     * Translate to specified x and y points\n     * @param {number} x - amount to move in the x\n     * @param {number} y - amount to move in the y\n     * @return {This} for chaining\n     */\n    // translate:\n    // function(x, y) {\n    //     this.x += x;\n    //     this.y += y;\n    //     return this;\n    // },\n\n    /**\n     * Rotate vector around specified point of rotation\n     * Note: Will rotate around origin\n     * @param {number} angle - amount of rotation in radians\n     * @return {This} for chaining\n     */\n    rotate: function(angle) {\n        let sin = Math.sin(angle);\n        let cos = Math.cos(angle);\n        let x = (this.x * cos) - (this.y * sin);\n        let y = (this.x * sin) + (this.y * cos);\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    /**\n     * Dot product between two vectors\n     * Does NOT modify internal state\n     * @param {Vector} vec - the vector to dot with\n     * @return {number} dot product\n     */\n    dot: function(vec) {\n        return this.x * vec.x + this.y * vec.y;\n    },\n\n    /**\n     * Cross product between two vectors\n     * Does NOT modify internal state\n     * @method\n     * @param {Vector} vec - the vec to cross with\n     * @return {number} cross product\n     */\n    cross: function(vec) {\n        return this.x * vec.y - this.y * vec.x;\n    },\n\n    /**\n     * Return angle between two vectors in radians\n     * @param {Vector} vec - vector to find angle to\n     * @return {number} theta - radians between two vectors\n     */\n    angleTo: function(vec) {\n        let a = this.magnitude();\n        let b = vec.magnitude();\n        let d = this.dot(vec);\n\n        let theta = Math.acos(d / (a * b));\n        return theta;\n    },\n\n    /**\n     * Return angle from 0 of this vector\n     * @method\n     * @param {string} [mode] - if mode = 'DEGREES', return value will be in\n     * degrees, otherwise radians\n     * @return {number} angle in degrees or radians (depending on mode)\n     *\n     */\n    getAngle: function(mode) {\n        if (mode === 'DEGREES') {\n            return radToDeg(Math.atan(this.y / this.x));\n        }\n        let a = Math.atan2(this.y, this.x);\n        //return a;\n        return a < 0 ? Math.PI * 2 + a : a;\n    },\n\n    /**\n     * Convert to a unit vector\n     * i.e. change length of vector to 1\n     * @method\n     * @return {This} for chaining\n     */\n    normalize: function() {\n        let mag = this.magnitude();\n        this.x /= mag;\n        this.y /= mag;\n        return this;\n    },\n\n    /**\n     * Create normal vector based on current vector\n     * Modifies internal state!\n     * @param {string} side - specify 'left' or 'right' normal\n     * @return {This} for chaining\n     */\n    perp: function(side) {\n        if (side === 'right') {\n            let tmp = this.x;\n            this.x = this.y;\n            this.y = -tmp;\n        } else {\n            let tmp = this.x;\n            this.x = -this.y;\n            this.y = tmp;\n        }\n        return this;\n    },\n\n    /**\n     * Calculate euclidian distance between two vectors\n     * @param {Vector} vec - vector to find distance to\n     * @return {number} euclidean distance\n     */\n    distanceTo: function(vec) {\n        return Math.sqrt((vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y));\n    },\n\n    /**\n     * Scalar Projection of A onto B assuming B is NOT a unit vector\n     * @param {Vector} vec - the vector to project onto\n     * @return {number} component of A on B\n     */\n    scalarProject: function(vec) {\n        return this.dot(vec) / vec.magnitude();\n    },\n\n    /**\n     * Calculate Scalar projection of A onto B assuming that B is a unit vector\n     * This is more efficient assuming we already have a unit vector\n     * @param {Vector} vec - the unit vector to project onto\n     * @return {number} component of A on B\n     */\n    scalarProjectUnit: function(vec) {\n        return this.dot(vec);\n    },\n\n    /**\n     * Vector Projection of A onto B assuming B is NOT a unit vector\n     * @param {Vector} vec - vector to project onto\n     * @return {This} for chaining\n     */\n    vectorProject: function(vec) {\n        let scalarComp = this.dot(vec) / vec.magnitudeSq();\n        this.x = vec.x * scalarComp;\n        this.y = vec.y * scalarComp;\n        return this;\n    },\n\n    /**\n     * Vector Projection of A onto B assuming B IS a unit vector\n     * @param {Vector} vec - vector to project onto\n     * @return {This} for chaining\n     */\n    vectorProjectUnit: function(vec) {\n        let scalarComp = this.dot(vec);\n        this.x = vec.x * scalarComp;\n        this.y = vec.y * scalarComp;\n        return this;\n    }\n};\n\nVector.prototype.translate = Vector.prototype.add;\n\n/**\n * Convenience function so we can ignore the 'new' keyword\n * @param {number} x - initial x value\n * @param {number} y - initial y value\n * @return {Vector} a new vector object\n */\nvar vector = function(x, y) {\n    return new Vector(x, y);\n};\n\n// ---------- Static Methods -----------//\n/**\n * @static\n * @param {Vector} v1 - first Vector obj\n * @param {Vector} v2 - second Vector obj\n * @return {Vector}\n *\n * Adds two vectors, and returns a new one\n */\nVector.add = function(v1, v2) {\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\n};\nVector.subtract = function(v1, v2) {\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\n};\nVector.multiply = function(v1, v2) {\n    if (typeof v1 === 'number' && typeof v2 === 'number') {\n        return v1 * v2;\n    }\n\n    if (typeof v1 === 'object' && typeof v2 === 'number') {\n        return new Vector(v1.x * v2, v1.y * v2);\n    }\n\n    if (typeof v2 === 'object' && typeof v1 === 'number') {\n        return new Vector(v1 * v2.x, v1 * v2.y);\n    }\n\n    return new Vector(v1.x * v2.x, v1.y * v2.y);\n};\nVector.dot = function(v1, v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n};\nVector.angleBetween = function(v1, v2) {\n    let a = v1.magnitude();\n    let b = v2.magnitude();\n    let d = v1.dot(v2);\n\n    let theta = Math.acos(d / (a * b));\n    return theta;\n};\nVector.perp = function(v1, side) {\n    switch (side) {\n        case 'right':\n            return new Vector(this.y, -this.x);\n        case 'left':\n        default:\n            return new Vector(-this.y, this.x);\n    }\n};\n\nexport default vector;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/Vector.js\n **/","export const degToRad = function(angle) {\n    return angle * Math.PI / 180;\n};\n\nexport const radToDeg = function(angle) {\n    return angle * 180 / Math.PI;\n};\n\nexport const distance = function(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n};\n\nexport const map = function(value, low1, high1, low2, high2) {\n    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/math/math.js\n **/","/* eslint\n    \"no-unused-vars\": \"off\",\n */\nimport {distance, degToRad} from '../math/math';\nimport vector, {Vector} from '../math/Vector.js';\n\nlet Ray = {\n    /**\n     * Ray object for tracing\n     * @constructs\n     * @param {number} x - origin x\n     * @param {number} y - origin y\n     * @param {number} dir - direction in radians (or degrees if 'degrees' param\n     * = true)\n     * @param {bool} degrees - optional flag, if true, then read direction as\n     * degrees\n     */\n    init: function(x, y, dir, degrees) {\n        if (degrees) {\n            dir = degToRad(dir);\n        }\n\n        this.origin = vector(x, y);\n        this.direction = vector(Math.cos(dir), Math.sin(dir));\n        this.invDirection = vector(1 / this.direction.x, 1 / this.direction.y);\n        this.outerBodies = [];\n        this.t = window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight;\n        let x0 = this.origin.x,\n            y0 = this.origin.y,\n            x1 = this.origin.x + this.direction.x * this.t,\n            y1 = this.origin.y + this.direction.y * this.t;\n        this.slope = (y1 - y0) / (x1 - x0);\n        // TODO: Figure out a way to give each ray a unique ID\n        this.numTests = 0;\n    },\n\n    /**\n     * Return the objects from spatial hash to perform collision detection on\n     * @param {SpatialHash} hash - hash from the System\n     */\n\n    trace: function(system) {\n        // Always use radians, regardless of mode\n        // Also angle should be in range 0 <= angle <= 2PI\n        //let angle = this.direction.getAngle();\n        this.intersectionPoint = null;\n        this.intersectingBody = null;\n        this.intersectingSegment = null;\n\n        // Iterate the rayID to ensure no duplicates\n        this.rayID = system.currentRayId++;\n        this.numTests = 0;      // debugging param - how many tests are run\n        this.intersectHash(system.hash);\n\n        // After going through all bodies and segments,\n        // if an intersection point was found...\n        if (this.intersectionPoint) {\n            return true;\n        }\n    },\n\n    /**\n     * Detect if ray intersects circle\n     * http://stackoverflow.com/questions/1073336/circle-line-segment-collision-detection-algorithm\n     *\n     * Using the following formula\n     * t^2 * (r DOT r) + 2t*( f DOT r ) + ( f DOT f - radius^2 ) = 0\n     * at^2 + bt + c where a = d.dot(d), b = 2*f.dot(d), c = f.dot(f)\n     * - radius^2\n     *      where:\n     *          d = end point of ray - start point of ray\n     *          t = scalar value - what we're solving for\n     *          r = ray vector\n     *          f = vector from center of sphere to origin of ray\n     *          radius = radius of circle\n     *\n     * 3x HIT cases:\n     *  -o->                    --|-->  |            |  --|->\n     * Impale(t1 hit,t2 hit), Poke(t1 hit,t2>1), ExitWound(t1<0, t2 hit),\n     *\n     * 3x MISS cases:\n     *     ->  o                     o ->              | -> |\n     * FallShort (t1>1,t2>1), Past (t1<0,t2<0), CompletelyInside(t1<0, t2>1)\n     *\n     * @param {Body} circle - circle body object\n     * @param {Vector} p - point of origin\n     * @param {Vector} r - ray vector\n     * @return {boolean} true if intersection was found, false otherwise\n     */\n    intersectCircle: function(circle) {\n        this.numTests += 1;\n        let radius = circle.radius;\n\n        let d = vector(this.direction.x * this.t, this.direction.y * this.t);\n        let f = Vector.subtract(this.origin, circle.position);//this.origin.clone();\n\n        // Solve the quadratic equation\n        let a = d.dot(d);\n        let b = 2 * f.dot(d);\n        let c = f.dot(f) - radius * radius;\n\n        // Descriminant b^2 - 4ac\n        let desc = (b * b) - (4 * a * c);\n\n        if (desc < 0) {\n            // No intersection\n        } else {\n            // Ray hit circle\n            // Two possible solutions\n            desc = Math.sqrt(desc);\n            let t1 = (-b - desc) / (2 * a);\n            let t2 = (-b + desc) / (2 * a);\n            let ix, iy;\n\n            // If t1 intersected the circle...\n            // Note: t1 is always closer than t2\n            if (t1 >= 0 && t1 <= 1) {\n                ix = this.origin.x + d.x * t1;\n                iy = this.origin.y + d.y * t1;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n\n            // If t1 doesn't intersect, check t2\n            if (t2 >= 0 && t2 <= 1) {\n                ix = this.origin.x + d.x * t2;\n                iy = this.origin.y + d.y * t2;\n                this.updateIntersectionPoint({x: ix, y: iy}, null, circle);\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     * Handles case of ray-polygon intersection\n     * If an intersecting segment is found,\n     * set the props accordingly\n     * @private\n     * @param {Polygon} poly - rect body object\n     * @return {bool} true if intersected, otherwise false\n     */\n    intersectPolygon: function(poly) {\n        this.numTests += 1;\n        if (poly.isPointInterior(this.origin)) {\n            this.outerBodies.push(poly);\n        }\n        let vertices = poly.vertices;\n        let vertLength = vertices.length;\n        let intersection;\n        vertices.forEach((vert, index, verts) => {\n            let seg2;\n            if (index === vertLength - 1) {\n                seg2 = verts[0];\n            } else {\n                seg2 = verts[index + 1];\n            }\n\n            intersection = this.intersectSegment([vert, seg2]);\n            if (intersection) {\n                this.updateIntersectionPoint(intersection.intPoint, intersection.segVec, poly);\n            }\n        });\n\n        return typeof intersection !== 'undefined';\n    },\n    /**\n     * Detects Ray-Segment intersection - Returns intersection coords\n     * @param {Array} seg - segment vertices\n     * @param {Vector} dir - optional direction to use, otherwise use\n     * this.direction\n     * @return {Object} returns intersection point with body, or false\n     */\n    intersectSegment: function(seg, dir) {\n        let r = dir ?\n            vector(dir.x * this.t, dir.y * this.t) :  // Dir passed to fn\n            vector(this.t * this.direction.x, this.t * this.direction.y);   // Use ray dir\n        let p = vector(this.origin.x, this.origin.y);                           // Ray origin\n        let q = vector(seg[0].x, seg[0].y);                                     // Segment start point\n        let s = vector(seg[1].x - seg[0].x, seg[1].y - seg[0].y);               // Segment vector\n\n        // check for intersection\n        // t = (q − p) x s / (r x s)\n        // u = (q − p) x r / (r x s)\n        let rxs = r.cross(s);\n        let tmp = Vector.subtract(q, p);\n        let tNum = tmp.cross(s),\n            uNum = tmp.cross(r);\n\n        // t, u are distances traveled along vector\n        let t, u;\n        if (rxs !== 0) {\n            t = tNum / rxs;\n            u = uNum / rxs;\n        }\n\n        // TODO: handle collinear case\n        if (rxs === 0 && uNum === 0) {\n            // lines are collinear\n            return;\n        } else if (rxs === 0 && uNum !== 0) {\n            // lines are parallel and non-intersecting\n            return false;\n        } else if (rxs !== 0 && t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n            // Two lines intersect,\n            // and meet at the point\n            // p + tr = q + us\n            let px = p.x,\n                py = p.y,\n                rx = r.x,\n                ry = r.y,\n                ix = px + t * rx,\n                iy = py + t * ry;\n\n            return {\n                intPoint: vector(ix, iy),\n                segVec: s,\n                t\n            };\n        }\n\n        // Line segments do not intersect\n        // if we've gone through all the segments of the body,\n        //intersectionPoint = null;\n        return false;\n    },\n\n    /**\n     * Test for Ray-Hash bucket intersections\n     * @param {SpatialHash} hash - system.hash object\n     * @return {array} list of intersected buckets\n     *\n     * See here: http://www.cse.chalmers.se/edu/year/2011/course/TDA361_Computer_Graphics/grid.pdf\n     * THIS WORKED -> http://www.playchilla.com/ray-casting-spatial-hash-dda\n     */\n    intersectHash: function(hash) {\n        // TODO: Handle case where ray starts outside bounds\n\n        // Initialize variables\n        // Step 1. Initialization - determine starting voxel\n        let bucket = hash.hash(this.origin);\n        let {row, col} = bucket;\n        let X = col,\n            Y = row;\n        let tMaxX, tMaxY, tDeltaX, tDeltaY;\n        let stepX = this.direction.x < 0 ? -1 : 1,\n            stepY = this.direction.y < 0 ? -1 : 1;\n        let cellSize = hash.cellSize;\n\n        // Row and Col offset for picking which horizontal or veritcal segments\n        // to use for intersection tests\n        // let rowOffset = stepY < 1 ? 0 : 1,\n        //     colOffset = stepX < 1 ? 0 : 1;\n\n        tDeltaX = cellSize / Math.abs(this.direction.x);\n        tDeltaY = cellSize / Math.abs(this.direction.y);\n\n        tMaxX = X * cellSize - this.origin.x;\n        tMaxY = Y * cellSize - this.origin.y;\n        if (this.direction.x >= 0) {\n            tMaxX += cellSize;\n        }\n        if (this.direction.y >= 0) {\n            tMaxY += cellSize;\n        }\n\n        tMaxX /= this.direction.x;\n        tMaxY /= this.direction.y;\n\n        while (Y < hash.numRows &&\n                Y > -1 &&\n                X < hash.numCols &&\n                X > -1) {\n            // In debug mode - Draw buckets that ray overlaps\n            if (window.renderer.debug) {\n                window.ctx.beginPath();\n                window.ctx.globalAlpha = 1;\n                window.ctx.strokeStyle = 'orange';\n                window.ctx.lineWidth = 3;\n                window.ctx.strokeRect(X * cellSize, Y * cellSize, cellSize, cellSize);\n            }\n\n            // If we've found some contents in that hash bucket...\n            if (hash.contents[Y] && hash.contents[Y][X] && hash.contents[Y][X].length !== 0) {\n                // TODO: Here's where we need to check if the object is\n                // actually intersecting the ray\n                // Intersect all objects in this voxel only\n                let contents = hash.contents[Y][X];\n                contents.forEach(body => {\n                    if (body.intersectionPoints[this.rayID]) {\n                        // Already tested this body\n                        // It either hit or missed, if it hit, grab the point\n                        if (body.intersectionPoints[this.rayID].status === 'hit') {\n                            this.updateIntersectionPoint(\n                                body.intersectionPoints[this.rayID].intPoint,\n                                body.intersectionPoints[this.rayID].segVec,\n                                body\n                            );\n                            return;\n                        }\n\n                        // It missed, so do nothing;\n                        return;\n                    }\n\n                    // If ray and body haven't been tested, then test\n                    // If it hits the AABB, then perform\n                    // actual intersection tests\n                    let hitsAABB = this.intersectAABB(body.aabb);\n                    if (hitsAABB) {\n                        switch (body.type) {\n                            case 'polygon':\n                            case 'rectangle':\n                                this.intersectPolygon(body);\n                                break;\n                            case 'circle':\n                                this.intersectCircle(body);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n\n                    // Flag body to know we've already tested this ray-body\n                    // combo\n                    if (this.intersectionPoint) {\n                        body.intersectionPoints[this.rayID] = {\n                            status: 'hit',\n                            intPoint: this.intersectionPoint,\n                            segVeg: this.intersectingSegment\n                        };\n                    } else {\n                        // If we missed, flag the body without\n                        // intersectionPoint\n                        body.intersectionPoints[this.rayID] = {status: 'miss'};\n                    }\n                });\n            }\n\n            // Increment X or Y step\n            if (tMaxX === undefined && tMaxY === undefined) {\n                break;\n            } else if (tMaxX === undefined) {\n                tMaxY += tDeltaY;\n                Y += stepY;\n            } else if (tMaxY === undefined) {\n                tMaxX += tDeltaX;\n                X += stepX;\n            } else if (tMaxX < tMaxY) {\n                tMaxX += tDeltaX;\n                X += stepX;\n            } else if (tMaxX >= tMaxY) {\n                tMaxY += tDeltaY;\n                Y += stepY;\n            }\n        }\n\n        return {\n            hashCoordinates: {\n                x: X,\n                y: Y\n            },\n            intPoint: this.intersectionPoint\n        };\n    },\n\n    /**\n     * Axis-Aligned Bounding Box Intersection test\n     * @param {AABB} aabb - the box to test\n     * @return {boolean} true for hit, false for miss\n     */\n    intersectAABB: function(aabb) {\n        let tx1 = (aabb.min.x - this.origin.x) * this.invDirection.x;\n        let tx2 = (aabb.max.x - this.origin.x) * this.invDirection.x;\n\n        let tmin = Math.min(tx1, tx2);\n        let tmax = Math.max(tx1, tx2);\n\n        let ty1 = (aabb.min.y - this.origin.y) * this.invDirection.y;\n        let ty2 = (aabb.max.y - this.origin.y) * this.invDirection.y;\n\n        tmin = Math.max(tmin, Math.min(ty1, ty2));\n        tmax = Math.min(tmax, Math.max(ty1, ty2));\n        let didHit = tmax >= tmin && tmax >= 0;\n        return didHit;\n    },\n\n    /**\n     * Internally used to update point of intersection property\n     * @private\n     * @param {Point} intPoint - object with x and y properties representing\n     * intersection point\n     * @param {Vector} segVec - vector object that was intersected\n     * @param {Body} body - body that was intersected\n     */\n    updateIntersectionPoint: function(intPoint, segVec, body) {\n        let px = this.origin.x;\n        let py = this.origin.y;\n        let ix = intPoint.x;\n        let iy = intPoint.y;\n\n        // If there was a previously stored intersection point,\n        // check if this one is closer,\n        // and if so update it's values\n        if (this.intersectionPoint) {\n            if (distance(px, py, ix, iy) <\n                distance(px, py, this.intersectionPoint.x, this.intersectionPoint.y)) {\n                this.intersectionPoint = {x: ix, y: iy};\n                this.intersectingBody = body;\n                this.intersectingSegment = segVec;\n            }\n        } else {\n            // We don't yet have an intersection point, so make a new\n            // one\n            this.intersectionPoint = {x: ix, y: iy};\n            this.intersectingBody = body;\n            this.intersectingSegment = segVec;\n        }\n    }\n};\n\n/**\n * 'Constructor' function\n * @public\n * @param {number} x - origin x\n * @param {number} y - origin y\n * @param {number} dir - direction in radians (or degrees if 'degrees' param\n * = true)\n * @param {bool} degrees - optional flag, if true, then read direction as\n * degrees\n *\n * @return {object} ray object\n */\nvar ray = function(x, y, dir, degrees) {\n    let R = Object.create(Ray);\n    R.init(x, y, dir, degrees);\n    return R;\n};\n\nexport default ray;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/geometries/Ray.js\n **/","import hash from '../geometries/SpatialHash';\nimport broadphase from '../collision/Broadphase';\nimport narrowphase from '../collision/Narrowphase';\nimport solver from '../collision/Solver';\n\n// const System = {};\nconst System = {\n    init: function(params) {\n        this.frames = [];\n        this.waves = [];\n        this.childWaves = [];\n        this.bodies = [];\n        this.width = params.width || 600;\n        this.height = params.height || 300;\n        this.collisionPairs = {};\n        this.nextBodyId = 0;\n\n        // Cell size will adjust to fit world precisely\n        // May not be exaclty what user initialized\n        // let divisor = params.cellSize ? params.cellSize : 100;\n        this.cellSize = this.calculateCellSize(params.cellSize || 100);\n        // Initialize spatial hash\n        this.hash = this.initializeHash(this.cellSize, this.width, this.height);\n\n        // Initialize Collision objects\n        this.broadphase = broadphase();\n        this.narrowphase = narrowphase();\n        this.solver = solver();\n\n        // Ray ID Counter\n        this.currentRayId = 0;\n    },\n\n    calculateCellSize: function(cellSize) {\n        let divisor = cellSize ? cellSize : 100;\n        return this.width / Math.floor(this.width / divisor);\n    },\n\n    initializeHash: function(cellSize, width, height) {\n        return hash(cellSize, width, height);\n    },\n\n    addChildWave: function(wave) {\n        this.childWaves.push(wave);\n    },\n\n    addObject: function(obj) {\n        switch (obj.type) {\n            case 'rectangle':\n            case 'circle':\n            case 'polygon':\n                obj.id = this.nextBodyId++;\n                this.bodies.push(obj);\n                break;\n            case 'incident':\n            case 'wave':\n                this.waves.push(obj);\n                break;\n            default:\n                throw new Error('tried to add something that\\'s not a body or a wave');\n        }\n    },\n\n    /**\n     * Add objects to the system\n     * Objects not added will not be rendered\n     * or updated\n     *\n     * @param {Sci.Object|Sci.Object[]} b - a body or wave object, or array of body objects\n     */\n    add: function(b) {\n        if (typeof b === 'object' && b.length !== undefined) {\n            b.forEach(body => {\n                this.addObject(body);\n            });\n        } else {\n            this.addObject(b);\n        }\n    },\n\n    /**\n     * Remove an object from the system\n     * @param {Body} b - the body object to remove\n     * @return {This} for chaining\n     */\n    remove: function(b) {\n        if (typeof b === 'object' && b.length !== undefined) {\n            // We have an array of things to remove\n            b.forEach(body => {\n                let idx = this.bodies.indexOf(body);\n                if (idx !== -1) {\n                    this.bodies.splice(idx, 1);\n                }\n            });\n        } else {\n            let idx = this.bodies.indexOf(b);\n            if (idx !== -1) {\n                this.bodies.splice(idx, 1);\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Update loop\n     * Update all bodies, waves, run collision tests if necessary, and keep\n     * track of rayID's on potentially colliding bodies\n     * @return {This} for chaining, or getting checking last state of system\n     */\n    update: function() {\n        // Clear out hash at the start of every update loop\n        this.hash.clear();\n\n        // Put each body into the hash\n        this.bodies.forEach(body => {\n            body.update();\n            this.hash.insertBody(body);\n        });\n\n        let pairs = this.broadphase.getCollisionPairs(this.bodies, this.hash);\n        let collisions;\n\n        if (pairs && Object.keys(pairs).length > 0) {\n            collisions = this.narrowphase.checkForCollisions(pairs);\n        }\n\n        // FIXME: MTV for two rectangles turns out to be the same axis, so they\n        // move in the same direction when we try to resolve the collision\n        if (collisions && collisions.length > 0) {\n            // Solve for collisions!\n            collisions.forEach(coll => {\n                this.solver.solve(coll);\n                // let {MTVAxis, overlap, body2} = coll;\n                // body2.position.add(MTVAxis.multiply(overlap));\n            });\n        }\n\n        // Each ray needs a unique ID for collision checking\n        // Reset currentRayID during each update loop so we can reuse these\n        // ID's\n        this.currentRayId = 0;\n\n        // Remove all child waves\n        this.childWaves = [];\n\n        // Update each wave and loop through it's chilren\n        this.waves.forEach(wave => {\n            wave.update(this);\n            this.traverseWaves(wave);\n        });\n\n        return this;\n    },\n\n    /**\n     * Recursively loop through child waves\n     * and add them to the system\n     * @private\n     * @param {Wave} wave - wave object to traverse\n     */\n    traverseWaves: function(wave) {\n        // If the wave has children\n        // Add each child to the system,\n        // then repeat for each child\n        // Exit condition -> When children have no children\n        if (wave.children.length !== 0) {\n            wave.children.forEach(child => {\n                this.addChildWave(child);\n                this.traverseWaves(child);\n            });\n        }\n    }\n};\n\n/**\n * @public\n * @param {object} params - initialization parameters\n * @return {System}\n *\n * params\n *  - width: int - width of entire system (usually canvas width)\n *  - height: number - height of entire system\n *  - cellSize: number - requested cellSize, (system will choose closest value\n *          that precisely fits into the system width)\n */\nconst system = function(params) {\n    const s = Object.create(System);\n    s.init(params);\n    return s;\n};\n\nexport default system;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/system/System.js\n **/","const SpatialHash = {\n    init: function(cellSize, width, height) {\n        this.cellSize = cellSize;\n        this.width = width;\n        this.height = height;\n        this.numRows = Math.ceil(height / cellSize);\n        this.numCols = width / cellSize;\n        this.contents = {};\n    },\n\n    /**\n     * Return location that should store this point\n     * @param {object} point - object with x and y properties\n     * @return {object} - bucket which th epoint falls into\n     */\n    hash: function(point) {\n        return {col: Math.floor(point.x / this.cellSize), row: Math.floor(point.y / this.cellSize)};\n    },\n    insertBody: function(body) {\n        // Hash the vertices of the AABB\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                if (this.contents[r]) {\n                    if (this.contents[r][c]) {\n                        this.contents[r][c].push(body);\n                    } else {\n                        this.contents[r][c] = [body];\n                    }\n                } else {\n                    this.contents[r] = {};\n                    this.contents[r][c] = [body];\n                }\n            }\n        }\n    },\n    updateBody: function(body) {\n        this.removeBody(body);\n        this.insertBody(body);\n    },\n    removeBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n\n        // Iterate over rectangular region\n        // And remove the object from all found buckets\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                let idx = this.contents[r][c].indexOf(body);\n                if (idx !== -1) {\n                    this.contents[r][c].splice(idx, 1);\n                }\n            }\n        }\n    },\n    queryBody: function(body) {\n        let min = this.hash(body.aabb.min);\n        let max = this.hash(body.aabb.max);\n        let nearby = [];\n\n        // Iterate over rectangular region\n        // And put the object in all buckets that\n        // it hits\n        for (let r = min.row; r < max.row + 1; r++) {\n            for (let c = min.col; c < max.col + 1; c++) {\n                this.contents[r][c].forEach(b => {\n                    if (nearby.indexOf(b) === -1 && b !== body) {\n                        nearby.push(b);\n                    }\n                });\n            }\n        }\n        return nearby;\n    },\n    queryPoint: function(point) {\n        let hash = this.hash(point);\n        return hash;\n    },\n    clear: function() {\n        this.contents = {};\n    }\n};\n\nconst hash = function(cellSize, width, height) {\n    let h = Object.create(SpatialHash);\n    h.init(cellSize, width, height);\n    return h;\n};\n\nexport default hash;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/geometries/SpatialHash.js\n **/","import pair from './Pair';\nconst Broadphase = {\n    // init: function(system) {\n    //     this.system = system;\n    //     this.pairs = [];\n    //     this.collisionCounter = 0;\n    // },\n    aabbOverlap: function(body1, body2) {\n        return body1.aabb.overlap(body2.aabb);\n    },\n    canCollide: function(body1, body2) {\n        if (body1.canCollide && body2.canCollide) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Get all potential collision pairs -\n     *  1. They are within the same spatial bucket\n     *  2. They're AABB's overlap\n     *  @param {Body[]} bodies - all bodies from system\n     *  @param {SpatialHash} hash - from system\n     *  @return {Object} collision pairs - broadphase\n     */\n    getCollisionPairs: function(bodies, hash) {\n        this.collisionCounter = 0;\n        let collisionPairs = {};\n        // let collisionPairs = [];\n        for (let i = 0; i < bodies.length; i++) {\n            let body = bodies[i];\n            let nearby = hash.queryBody(body);\n\n            for (let j = 0; j < nearby.length; j++) {\n                let otherBody = nearby[j];\n                if (this.canCollide(body, otherBody)) {\n                    if (this.aabbOverlap(body, otherBody)) {\n                        let id;\n                        if (body.id < otherBody.id) {\n                            id = `${body.id}-${otherBody.id}`;\n                        } else {\n                            id = `${otherBody.id}-${body.id}`;\n                        }\n\n                        let p = pair(body, otherBody, id);\n                        // collisionPairs.push(p);\n                        if (!collisionPairs[id]) {\n                            collisionPairs[id] = p;\n                        }\n                    }\n                }\n            }\n        }\n        return collisionPairs;\n    }\n};\n\nconst broadphase = function(system) {\n    let b = Object.create(Broadphase);\n    // b.init(system);\n    return b;\n};\n\nexport default broadphase;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/collision/Broadphase.js\n **/","const Pair = {\n    init: function(b1, b2, index) {\n        this.bodies = [b1, b2];\n        this.index = index;\n    }\n};\n\nconst pair = function(b1, b2, index) {\n    let p = Object.create(Pair);\n    p.init(b1, b2, index);\n    return p;\n};\n\nexport default pair;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/collision/Pair.js\n **/","import SAT from './SAT';\nconst Narrowphase = {\n    // init: function(hash) {\n    //     this.hash = hash;\n    // },\n    checkForCollisions: function(pairs) {\n        // Object\n        let collisions = [];\n        if (typeof pairs === 'object' && pairs.length === undefined) {\n            let keys = Object.keys(pairs);\n            for (let i = 0; i < keys.length; i++) {\n                let pair = pairs[keys[i]];\n                let b1 = pair.bodies[0];\n                let b2 = pair.bodies[1];\n                let collision = SAT.intersect(b1, b2);\n\n                if (collision) {\n                    b1.colliderList.push(collision);\n                    b2.colliderList.push(collision);\n                    collisions.push(collision);\n                }\n            }\n        } else if (typeof pairs === 'object' && pairs.length > 0) {\n            // Array\n            for (let i = 0; i < pairs.length; i++) {\n                let pair = pairs[i];\n                let b1 = pair.bodies[0];\n                let b2 = pair.bodies[1];\n                let collision = SAT.intersect(b1, b2);\n\n                if (collision) {\n                    b1.colliderList.push(collision);\n                    collisions.push(collision);\n                }\n            }\n        }\n        return collisions;\n    }\n};\n\nconst narrowphase = function() {\n    let n = Object.create(Narrowphase);\n    // n.init(hash);\n    return n;\n};\n\nexport default narrowphase;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/collision/Narrowphase.js\n **/","import {Vector} from '../math/Vector';\nimport collision from './Collision';\n\nconst SAT = {};\n\n/**\n * Determine min and max projection components along a\n * given axis\n *\n * @param {Body} b - the body whos vertices to project\n * @param {Vector} axis - the axis to project onto. Should be a unit vector\n *\n * @return {Object} min and max values of projected vertices\n */\nSAT.projectBody = function(b, axis) {\n    if (b.type === 'rectangle' || b.type === 'polygon') {\n        let min = b.vertices[0].scalarProjectUnit(axis);\n        let max = min;\n\n        for (let i = 0; i < b.vertices.length; i++) {\n            let v = b.vertices[i];\n            let p = v.scalarProjectUnit(axis);\n            if (p < min) {\n                min = p;\n            } else if (p > max) {\n                max = p;\n            }\n        }\n        return {min, max};\n    } else if (b.type === 'circle') {\n        let p = b.position.scalarProjectUnit(axis);\n        return {min: p - b.scaledRadius, max: p + b.scaledRadius};\n    }\n};\n\n/**\n * @param {number} p1min - min point of 1st line\n * @param {number} p1max - max point of 1st line\n * @param {number} p2min - min point of 2nd line\n * @param {number} p2max - max point of 2nd line\n * @return {number} amount of overlap of these two lines\n *\n */\nSAT.lineOverlap = function(p1min, p1max, p2min, p2max) {\n    return Math.max(0, Math.min(p1max, p2max) - Math.max(p1min, p2min));\n};\n\n/**\n * Rect-Rect intersection test\n * @param {Sci.Rect} b1 - first body\n * @param {Sci.Rect} b2 - second body\n * @return {bool} true or false, if intersection occurred\n * @todo optimize like crazy, we only need to do four axes, not eight\n * see here: https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\n *\n * @todo should return collision data, not just true or false\n * see here: http://www.dyn4j.org/2010/01/sat/\n */\n\nSAT.intersect = function(b1, b2) {\n    if (b1.type === 'rectangle' || b1.type === 'polygon') {\n        if (b2.type === 'circle') {\n            return SAT.polycircle(b1, b2);\n        }\n\n        // b2 must then be a Polygon (or a rectangle)\n        return SAT.polypoly(b1, b2);\n    }\n\n    if (b1.type === 'circle') {\n        if (b2.type === 'circle') {\n            return SAT.circlecircle(b1, b2);\n        }\n\n        // b2 Must be a polygon or a rectangle\n        return SAT.polycircle(b1, b2);\n    }\n};\nSAT.circlecircle = function(c1, c2) {\n    let v1 = Vector.subtract(c1.position, c2.position);\n    let d = v1.magnitude();\n    let rplusr = c1.scaledRadius + c2.scaledRadius;\n\n    if (d < rplusr) {\n        // return {MTVAxis: v1.normalize(), overlap: rplusr - d};\n        return collision(c1, c2, v1.normalize(), rplusr - d);\n    }\n    return;\n};\n\n/**\n * @param {Polygon} p1 - first poly\n * @param {Polygon} p2 - second poly\n * @return {Object} Collision results, or undefined if no collision\n *\n * @todo Containment - doesn't appropriately handle containment\n */\nSAT.polypoly = function(p1, p2) {\n    // Gather all axes to test\n    let axes = [],\n        smallestOverlap,\n        MTVAxis,\n        numVerts1 = p1.vertices.length,\n        numVerts2 = p2.vertices.length;\n\n    // Get axes for rect\n    // Only need two sides for testing\n    if (p1.type === 'rectangle') {\n        numVerts1 = 2;\n    }\n    for (let i = 0; i < numVerts1; i++) {\n        let v1 = p1.vertices[i];\n        let v2 = p1.vertices[i + 1 === p1.vertices.length ? 0 : i + 1];\n        let axis = Vector.subtract(v2, v1);\n        axis.normalize().perp();\n        axes.push(axis);\n    }\n\n    if (p2.type === 'rectangle') {\n        numVerts2 = 2;\n    }\n    // Get axes for polygon\n    // Need all sides\n    for (let i = 0; i < numVerts2; i++) {\n        let v1 = p2.vertices[i];\n        let v2 = p2.vertices[i + 1 === p2.vertices.length ? 0 : i + 1];\n        let axis = Vector.subtract(v2, v1);\n        axis.normalize().perp();\n        axes.push(axis);\n    }\n\n    // Perform intersection test along all axes\n    for (let i = 0; i < axes.length; i++) {\n        let axis = axes[i];\n\n        // Get min and max projectsion\n        let p1Projection = this.projectBody(p1, axis);\n        let p2Projection = this.projectBody(p2, axis);\n\n        // Test for overlap of projections\n        let overlap = this.lineOverlap(p1Projection.min, p1Projection.max, p2Projection.min, p2Projection.max);\n\n        // If at any point the overlap is zero, then we're guarenteed\n        // to have no collision, so exit the test\n        if (overlap === 0) {\n            return;\n        }\n\n        if (smallestOverlap) {\n            if (overlap < smallestOverlap) {\n                smallestOverlap = overlap;\n                MTVAxis = axis;\n            }\n        } else {\n            smallestOverlap = overlap;\n            MTVAxis = axis;\n        }\n    }\n\n    // Will return true if overlap never equals 0, meaning all\n    // projections overlap to some degree, so a collision is happening\n    // return {MTV: {axis: MTVAxis, magnitude: smallestOverlap}};\n    return collision(p1, p2, MTVAxis, smallestOverlap);\n};\n\nSAT.polycircle = function(b1, b2) {\n    let p, c;\n    if (b1.type === 'circle') {\n        c = b1;\n        p = b2;\n    } else {\n        c = b2;\n        p = b1;\n    }\n\n    // Gather all axes to test\n    let axes = [],\n        smallestOverlap,\n        MTVAxis,\n        numVerts1 = p.vertices.length;\n\n    // smallest distance vector from polygon vertex to circle center\n    let d;\n\n    for (let i = 0; i < numVerts1; i++) {\n        let v1 = p.vertices[i];\n        let v2 = p.vertices[i + 1 === p.vertices.length ? 0 : i + 1];\n        let axis = Vector.subtract(v2, v1);\n        axis.normalize().perp();\n        axes.push(axis);\n\n        // Get distance of vertex to circle center\n        let vc = Vector.subtract(c.position, v1);\n        if (d) {\n            if (vc.magnitudeSq() < d.magnitudeSq()) {\n                d = vc;\n            }\n        } else {\n            d = vc;\n        }\n    }\n\n    axes.push(d.normalize());\n\n    // Perform intersection test along all axes\n    for (let i = 0; i < axes.length; i++) {\n        let axis = axes[i];\n\n        // Get min and max projectsion\n        let pProjection = this.projectBody(p, axis);\n        let cProjection = this.projectBody(c, axis);\n\n        // Test for overlap of projections\n        let overlap = this.lineOverlap(pProjection.min, pProjection.max, cProjection.min, cProjection.max);\n\n        // If at any point the overlap is zero, then we're guarenteed\n        // to have no collision, so exit the test\n        if (overlap === 0) {\n            return;\n        }\n\n        if (smallestOverlap) {\n            if (overlap < smallestOverlap) {\n                smallestOverlap = overlap;\n                MTVAxis = axis;\n            }\n        } else {\n            smallestOverlap = overlap;\n            MTVAxis = axis;\n        }\n    }\n\n    // Will return true if overlap never equals 0, meaning all\n    // projections overlap to some degree, so a collision is happening\n    return collision(b1, b2, MTVAxis, smallestOverlap);\n};\n\nexport default SAT;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/collision/SAT.js\n **/","const Collision = {\n    init: function(b1, b2, mtv, overlap) {\n        this.body1 = b1;\n        this.body2 = b2;\n        this.MTVAxis = mtv;\n        this.overlap = overlap;\n    }\n\n};\n\nconst collision = function(b1, b2, mtv, overlap) {\n    let c = Object.create(Collision);\n    c.init(b1, b2, mtv, overlap);\n    return c;\n};\n\nexport default collision;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/collision/Collision.js\n **/","import vector, {Vector} from '../math/Vector';\nconst Solver = {\n    init: function() {\n\n    },\n\n    /**\n     * Resolve collision\n     * @param {Collision} collision - collision object to resolve\n     *\n     * @todo: right now just directly manipulates position - things are\n     * very jittery, but it works for now.\n     */\n    solve: function(collision) {\n        // Solve for body collision\n        let { body1, body2, MTVAxis, overlap } = collision;\n        let xOverlap = Math.abs(MTVAxis.x * overlap);\n        let yOverlap = Math.abs(MTVAxis.y * overlap);\n        let resolutionVector = vector(xOverlap, yOverlap);\n\n        // if there is an xOverlap\n        if (xOverlap !== 0) {\n            if (body1.position.x > body2.position.x) {\n                // Move body1 to the right and body2 to the left\n                body1.position.x += resolutionVector.x / 2;\n                body2.position.x -= resolutionVector.x / 2;\n            } else {\n                // Move body1 to the left and body 2 to the right\n                body1.position.x -= resolutionVector.x / 2;\n                body2.position.x += resolutionVector.x / 2;\n            }\n        }\n\n        // If there's a y overlap\n        if (yOverlap !== 0) {\n            // And body1 is lower on screen than body 2\n            if (body1.position.y > body2.position.y) {\n                // Move body 1 down and body 2 up\n                body1.position.y += resolutionVector.y / 2;\n                body2.position.y -= resolutionVector.y / 2;\n            } else {\n                body1.position.y -= resolutionVector.y / 2;\n                body2.position.y += resolutionVector.y / 2;\n            }\n        }\n    }\n};\n\nconst solver = function() {\n    let s = Object.create(Solver);\n    return s;\n};\n\nexport default solver;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/collision/Solver.js\n **/","import * as math from '../math/math';\nconst Renderer = {};\nRenderer.prototype = {\n    init: function(params) {\n        this.clearBackground = true;\n        this.debug = params.debug || false;\n        this.background = params.background || 'black';\n\n        // Initialize Canvas element\n        // Pardon the ugly ternary...\n        this.canvas = (typeof params.canvas === 'undefined') ?\n            (function() {\n                let c = document.createElement('canvas');\n                c.id = 'canvas';\n                // Set default size\n                document.body.appendChild(c);\n                return c;\n            })() : (function() {\n                // Default values for canvas size\n                let c = document.getElementById(params.canvas);\n                return c;\n            })();\n\n        if (this.debug) {\n            window.renderer = this;\n            window.ctx = this.canvas.getContext('2d');\n        }\n\n        //this.canvas.width = params.width || 600;\n        //this.canvas.height = params.height || 300;\n        this.ctx = this.canvas.getContext('2d');\n    },\n\n    /**\n     * Resize the canvas\n     * @param {number} width - new width of canvas\n     * @param {number} height - new height of canvas\n     * @param {number} [cellSize] - optional. set a new cell size for the\n     * spatial hash\n     */\n    resize: function(width, height, cellSize) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.system.width = width;\n        this.system.height = height;\n        this.system.cellSize = this.system.calculateCellSize(cellSize || this.system.cellSize);\n        this.system.hash = this.system.initializeHash(this.system.cellSize, width, height);\n    },\n\n    /**\n     * Draw a body object\n     * @private\n     * @param {Body} body - phys.system object containing all objects\n     */\n    drawBody: function(body) {\n        if (this.debug) {\n            this.ctx.beginPath();\n            this.ctx.globalAlpha = 1;\n            this.ctx.strokeStyle = 'red';\n            this.ctx.lineWidth = 1;\n\n            let aabb = body.aabb;\n            let x = aabb.min.x;\n            let y = aabb.min.y;\n            let w = aabb.max.x - x;\n            let h = aabb.max.y - y;\n            this.ctx.rect(x, y, w, h);\n            this.ctx.stroke();\n\n            if (body.vertices) {\n                body.vertices.forEach(vert => {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = 'magenta';\n                    this.ctx.lineWidth = 2;\n                    this.ctx.ellipse(vert.x, vert.y, 4, 4, 0, 0, Math.PI * 2);\n                    this.ctx.stroke();\n                });\n            }\n            if (body.centroid) {\n                this.ctx.beginPath();\n                this.ctx.strokeStyle = 'red';\n                this.ctx.lineWidth = 3;\n                this.ctx.ellipse(body.centroid.x, body.centroid.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.stroke();\n            }\n        }\n\n        // Start a new path for each body\n        this.ctx.beginPath();\n        this.ctx.globalAlpha = 1;\n        switch (body.type) {\n            case 'rectangle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                this.ctx.lineJoin = 'miter';\n                if (this.debug) {\n                    if (body.colliding) {\n                        this.ctx.strokeStyle = 'green';\n                    } else {\n                        this.ctx.strokeStyle = 'white';\n                    }\n                }\n                this.ctx.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (let i = 1; i < body.vertices.length; i++) {\n                    let v = body.vertices[i];\n                    this.ctx.lineTo(v.x, v.y);\n                }\n                this.ctx.closePath();\n                this.ctx.fill();\n                this.ctx.stroke();\n                break;\n            }\n            case 'circle': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n\n                this.ctx.ellipse(body.position.x, body.position.y, body.scaledRadius, body.scaledRadius, 0, 0, Math.PI * 2);\n                // this.ctx.closePath();\n                this.ctx.stroke();\n                // this.ctx.fill();\n                break;\n            }\n            case 'polygon': {\n                this.ctx.fillStyle = body.style.fillStyle;\n                this.ctx.lineWidth = body.style.lineWidth;\n                this.ctx.strokeStyle = body.style.strokeStyle;\n                this.ctx.lineJoin = 'miter';\n                this.ctx.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (let i = 1; i < body.vertices.length; i++) {\n                    let v = body.vertices[i];\n                    this.ctx.lineTo(v.x, v.y);\n                }\n                this.ctx.closePath();\n                this.ctx.fill();\n                this.ctx.stroke();\n                break;\n            }\n            default:\n                break;\n        }\n    },\n    drawWave: function(wave) {\n        // No matter what the angle mode, always use radians\n        let angle = wave.mode === 'DEGREES' ? math.degToRad(wave.direction) : wave.direction;\n\n        // Set wave style properties\n        this.ctx.fillStyle = wave.style.fillStyle;\n        this.ctx.lineWidth = wave.style.lineWidth;\n        this.ctx.strokeStyle = wave.style.strokeStyle;\n        this.ctx.globalAlpha = math.map(wave.intensity, 0, 1, 0.1, 1);\n\n        // If debug == true, draw waves in certain colors\n        if (this.debug) {\n            if (wave.type === 'incident') {\n                // Draw starting circle\n                this.ctx.beginPath();\n                this.ctx.fillStyle = 'yellow';\n                this.ctx.ellipse(wave.position.x, wave.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.fill();\n                this.ctx.stroke();\n                this.ctx.strokeStyle = 'green';\n            } else if (wave.type === 'refracted') {\n                this.ctx.strokeStyle = 'blue';\n            } else if (wave.type === 'reflected') {\n                this.ctx.strokeStyle = 'orange';\n            }\n        }\n\n        this.ctx.beginPath();\n        this.ctx.moveTo(wave.position.x, wave.position.y);\n\n        // If the wave intersects an object ahead, then\n        // only draw to that object. Otherwise draw an arbitrary length\n        if (wave.ray.intersectionPoint) {\n            this.ctx.lineTo(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y);\n            this.ctx.stroke();\n\n            // Draw intersection points as circles\n            // when in debug mode\n            if (this.debug) {\n                this.ctx.beginPath();\n                this.ctx.strokeStyle = 'red';\n                this.ctx.lineWidth = 0.5;\n                this.ctx.ellipse(wave.ray.intersectionPoint.x, wave.ray.intersectionPoint.y, 3, 3, 0, 0, Math.PI * 2);\n                this.ctx.stroke();\n            }\n        } else {\n            this.ctx.lineTo(2000 * Math.cos(angle) + wave.position.x, 2000 * Math.sin(angle) + wave.position.y);\n            this.ctx.stroke();\n        }\n    },\n\n    render: function(system, updateFn) {\n        // The first time the system renders,\n        // capture a local reference to it\n        // to be used to restart the renderer later\n        // if it's ever stopped\n        if (!this.system) {\n            this.system = system;\n            this.canvas.width = this.system.width;\n            this.canvas.height = this.system.height;\n        }\n\n        // In order to pass 'system' into render\n        // we have to wrap it in a function before\n        // passing it to requestAnimationFrame\n        this._requestID = requestAnimationFrame(() => {\n            this.render(system, updateFn);\n        });\n\n        // Clear background\n        if (this.clearBackground) {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n        // Draw background\n        this.ctx.beginPath();\n        this.ctx.globalAlpha = 1;\n        this.ctx.fillStyle = this.background;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n        // Call user draw code\n        if (updateFn) {\n            updateFn();\n        }\n\n        // Update the system\n        // FIXME: this.laststate isn't doing anything right now\n        this.lastState = system.update();\n\n        // Draw all objects + waves\n        system.bodies.forEach(body => {\n            this.drawBody(body);\n        });\n\n        // Update all waves\n        system.waves.forEach(wave => {\n            this.drawWave(wave);\n        });\n\n        // Update all child waves\n        system.childWaves.forEach(wave => {\n            this.drawWave(wave);\n        });\n\n        // If in debug mode, draw spatial hash\n        // and highlight nodes that contain items in red\n        if (this.debug === true) {\n            let cellSize = system.hash.cellSize;\n            this.ctx.globalAlpha = 1;\n            this.ctx.lineWidth = 1;\n            for (let i = 0; i < system.hash.width; i += cellSize) {\n                for (let j = 0; j < system.hash.height; j += cellSize) {\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = 'green';\n                    this.ctx.rect(i, j, cellSize, cellSize);\n                    this.ctx.stroke();\n                }\n            }\n            Object.keys(system.hash.contents).forEach(row => {\n                Object.keys(system.hash.contents[row]).forEach(col => {\n                    // Draw all squares\n                    this.ctx.beginPath();\n                    // this.ctx.strokeStyle = 'green';\n                    if (system.hash.contents[row][col].length !== 0) {\n                        this.ctx.strokeStyle = 'red';\n                        this.ctx.lineWidth = 1;\n                    }\n                    this.ctx.rect(col * cellSize, row * cellSize, cellSize, cellSize);\n                    this.ctx.stroke();\n                });\n            });\n        }\n    },\n\n    /**\n     * Set's size of renderers canvas\n     * @param {number} width - width of canvas\n     * @param {number} height - height of canvas\n     */\n    setSize: function(width, height) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    },\n    /**\n     * Stop animation cycle\n     */\n    stop: function() {\n        cancelAnimationFrame(this._requestID);\n    },\n\n    /**\n     * Restart animation cycle\n     */\n    start: function() {\n        this.render(this.system);\n    }\n};\n\nvar renderer = function(params) {\n    let R = Object.create(Renderer.prototype);\n    R.init(params);\n    return R;\n};\n\nexport default renderer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/renderer/Renderer.js\n **/","/* eslint\n    \"no-multi-spaces\": \"off\"\n */\nimport Body from './Body';\nimport aabb from '../geometries/AABB';\nimport vector from '../math/Vector';\n\nvar rect = function(options) {\n    options = options || {};\n\n    let B = Object.create(Body);\n    B.init(options);\n    B.type = 'rectangle';\n    B._mode = options.mode || 'LEFT';\n\n    // Define getters and setters for mode\n    Object.defineProperty(B, 'mode', {\n        get: function() {\n            return this._mode;\n        },\n        set: function(m) {\n            if (this._mode !== m && this.type === 'rectangle') {\n                switch (m) {\n                    case 'LEFT':\n                    case 'CENTER':\n                    case 'RIGHT':\n                        this._mode = m;\n                        this.updateVertices();\n                        break;\n                    default:\n                        console.warn(`Cannot set mode to ${m}`);\n                        break;\n                }\n            } else {\n                console.warn(`'mode' is only available on rectangles`);\n            }\n        }\n    });\n\n    /**\n     * Update location of vertices - used in update loop\n     */\n    B.updateVertices = function() {\n        let w = this.width,\n            h = this.height,\n            x = this.position.x,\n            y = this.position.y;\n        switch (this._mode) {\n            case 'LEFT':\n                // Already in left mode, do nothing\n                break;\n            case 'CENTER':\n                x -= (w / 2);\n                y -= (h / 2);\n                break;\n            case 'RIGHT':\n                x -= w;\n                break;\n            default:\n                break;\n        }\n\n        //Get centroid\n        let centroid = vector(\n            (x + (x + w)) / 2,      // <-- x value\n            (y + (y + h)) / 2       // <-- y value\n        );\n        B.centroid = centroid;\n\n        B.vertices = [\n            vector(x, y),\n            vector(x + w, y),\n            vector(x + w, y + h),\n            vector(x, y + h)\n        ];\n\n        // To perform a rotation, we have to first translate to the origin,\n        // then rotate, then translate back to the centroid\n        if (B.angularVelocity !== 0 || B._rotation !== 0 || B._scale !== 0) {\n            B.vertices.forEach(vertex => {\n                vertex.translate(-centroid.x, -centroid.y)\n                    .rotate(this._rotation)\n                    .multiply(this._scale)\n                    .translate(centroid.x, centroid.y);\n            });\n        }\n    };\n\n    B.isPointInterior = function(x, y) {\n        let bx = B.position.x,\n            by = B.position.y;\n\n        if (x >= bx &&\n            x <= bx + B.width &&\n            y >= by &&\n            y <= by + B.height) {\n            return true;\n        }\n        return false;\n    };\n\n    B.updateVertices();\n    B.aabb = aabb(B);\n    return B;\n};\n\nexport default rect;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Rect.js\n **/","/* eslint \"no-unused-vars\": \"off\" */\n// What should a body be able to do?\n// 1. Attach to other bodies or surfaces\n// 2. Respond to forces (spring, friction)\n// 3. Move according to velocity and acceleration\n\nimport materials from '../extras/materials.json';\nimport vector from '../math/Vector';\nimport * as math from '../math/math';\n\n/**\n * Convenience Function so user doesn't have use 'new' keyword\n * @param {object} options - initialization options\n * @return {Body} instance of Body\n */\n\nlet Body = {\n    init: function(options) {\n        options = options || {};\n\n        // Warn user if a body object is initialized with nothing or an empty\n        // object\n        if (Object.keys(options).length === 0 && options.constructor === Object) {\n            console.warn('You probably should initialize body objects with some values...just sayin');\n        }\n\n        this.style = {\n            fillStyle: options.fillStyle || 'rgba(0,0,0,0)',\n            lineWidth: options.lineWidth || 2,\n            strokeStyle: options.strokeStyle || '#abcabc'\n        };\n        this.mass = options.mass || 0;\n        this.position = vector(options.x || 0, options.y || 0);\n        this.canCollide = options.canCollide !== false;\n        this.colliderList = [];\n        this.velocity = vector(\n            (options.velocity && options.velocity.x) || 0,\n            (options.velocity && options.velocity.y) || 0\n        );\n        this.height = options.height || 10;\n        this.width = options.width || 10;\n        this._scale = 1;\n        this._rotation = options.rotation || 0; // <-- Private prop - DO NOT SET THIS DIRECTLY, use getter and setter for\n        this.angularVelocity = options.angularVelocity || 0;\n        this.refractiveIndex = options.refractiveIndex || 1;\n        this.material = options.material || 'GLASS';\n        this.materialColor = options.fillStyle || 'black';\n        this.mirror = options.mirror || false;\n        this.intersectionPoints = {};\n\n         // If the material is provided, set refractive index based on materials\n         // database\n        // TODO: Make setting either refractive index or material possible!!!\n        if (options.material && options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n            this.material = options.material;\n            console.warn('Setting both the material and the refractive index at the same time may cause some unexpected behavior'); //eslint-disable-line\n        } else if (options.material) {\n            // Check to make sure the material exists in the database\n            if (materials[this.material]) {\n                this.refractiveIndex = materials[this.material].refractiveIndex;\n            } else if (this.material === undefined || this.material === null) {\n                this.material = 'default';\n                this.refractiveIndex = 1;\n            } else {\n                console.error('the material ' + this.material + ' is not recognized. See the docs for supported default materials'); //eslint-disable-line\n            }\n        } else if (options.refractiveIndex) {\n            this.refractiveIndex = options.refractiveIndex;\n        } else {\n            this.refractiveIndex = 1.33;\n        }\n        return this;\n    },\n\n    freeze: function() {\n        this._cachedVelocity = this.velocity.clone();\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        return this;\n    },\n\n    unfreeze: function() {\n        if (this._cachedVelocity) {\n            this.velocity.x = this._cachedVelocity.x;\n            this.velocity.y = this._cachedVelocity.y;\n        } else {\n            console.warn('cannot unfreeze a non-frozen object');\n        }\n        return this;\n    },\n\n    translate: function(...args) {\n        if (args.length === 1) {\n            if (typeof args[0] === 'object') {\n                // Assume we have a vector object\n                this.position.add(args[0]);\n            }\n        } else if (args.length === 2) {\n            if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n                this.position.x += args[0];\n                this.position.y += args[1];\n            }\n        }\n\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n        return this;\n    },\n\n    rotate: function(angle) {\n        this.rotation += angle;\n        return this;\n    },\n\n    update: function() {\n        this.position.add(this.velocity);\n        this.rotation += this.angularVelocity;\n\n        // if (this.updateSegments) {\n        //     this.updateSegments();\n        // }\n\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n\n        // if (this.vertices) {\n        //     this.vertices.update();\n        // }\n\n        // For each update loop, reset intersection points to zero\n        this.intersectionPoints = {};\n\n        this.colliderList = [];\n        this.aabb.update();\n        return this;\n    }\n};\n\nObject.defineProperty(Body, 'rotation', {\n    get: function() {\n        return this._rotation;\n    },\n    set: function(angle) {\n        this._rotation = angle;\n        if (this.updateVertices) {\n            this.updateVertices();\n        }\n    }\n});\n\nObject.defineProperty(Body, 'scale', {\n    get: function() {\n        return this._scale;\n    },\n    set: function(scaleFactor) {\n        this._scale = scaleFactor;\n        if (this.updateVertices) {\n            this.updateVertices();\n        } else if (this.type === 'circle') {\n            this.scaledRadius = this.radius * scaleFactor;\n        }\n    }\n});\n\nexport default Body;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Body.js\n **/","module.exports = {\n\t\"GLASS\": {\n\t\t\"refractiveIndex\": 1.5\n\t},\n\t\"AIR\": {\n\t\t\"refractiveIndex\": 1.000277\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/extras/materials.json\n ** module id = 17\n ** module chunks = 0\n **/","/* eslint\n    \"no-else-return\": \"off\"\n */\nlet AABB = {\n    init: function(body) {\n        this.body = body;\n        let bounds = this.findMinMax(body);\n        this.max = bounds.max;\n        this.min = bounds.min;\n    },\n    /**\n     * Finds bounds of AABB\n     * Does not set any properties\n     * If you want to find and set, call AABB.update()\n     * @return {object} bounds\n     */\n    findMinMax: function() {\n        // Only deal with two types of bodies...Those with vertices, and\n        // circles\n        if (this.body.vertices) {\n            let minx,\n                miny,\n                maxx,\n                maxy;\n            this.body.vertices.forEach(v => {\n                let x = v.x,\n                    y = v.y;\n\n                // If nothing has been set, then set it\n                if (typeof minx === 'undefined') {\n                    minx = x;\n                } else if (typeof minx !== 'undefined' && x < minx) {\n                    // Something's already there, only update if x < minx\n                    minx = x;\n                }\n\n                if (typeof miny === 'undefined') {\n                    miny = y;\n                } else if (typeof miny !== 'undefined' && y < miny) {\n                    miny = y;\n                }\n\n                if (typeof maxx === 'undefined') {\n                    maxx = x;\n                } else if (typeof maxx !== 'undefined' && x > maxx) {\n                    maxx = x;\n                }\n\n                if (typeof maxy === 'undefined') {\n                    maxy = y;\n                } else if (typeof maxy !== 'undefined' && y > maxy) {\n                    maxy = y;\n                }\n            });\n\n            return {\n                max: {\n                    x: maxx,\n                    y: maxy\n                },\n                min: {\n                    x: minx,\n                    y: miny\n                }\n            };\n        } else {\n            // Assume it's a circle\n            let cx = this.body.position.x,\n                cy = this.body.position.y,\n                r = this.body.scaledRadius;\n            return {\n                max: {\n                    x: cx + r,\n                    y: cy + r\n                },\n                min: {\n                    x: cx - r,\n                    y: cy - r\n                }\n            };\n        }\n    },\n\n    /**\n     * Returns true of point is inside AABB\n     * @param {Point} point - must contain x and y props\n     * @return {bool} true if point is inside AABB\n     */\n    contains: function(point) {\n        let x = point.x,\n            y = point.y;\n        if (x >= this.min.x &&\n            x <= this.max.x &&\n            y >= this.min.y &&\n            y <= this.max.y) {\n            return true;\n        }\n\n        return false;\n    },\n\n    /**\n     * Check if two AABB's intersect\n     * @param {AABB} aabb - other bounding box\n     * @return {bool} true for overlap, false otherwise\n     */\n    overlap: function(aabb) {\n        if (this.max.x < aabb.min.x) return false; // a is left of b\n        if (this.min.x > aabb.max.x) return false; // a is right of b\n        if (this.max.y < aabb.min.y) return false; // a is above b\n        if (this.min.y > aabb.max.y) return false; // a is below b\n        return true; // boxes overlap\n    },\n\n    /**\n     * Updates the AABB\n     */\n    update: function() {\n        let bounds = this.findMinMax();\n        this.max = bounds.max;\n        this.min = bounds.min;\n    }\n};\n\nlet aabb = function(body) {\n    let ab = Object.create(AABB);\n    ab.init(body);\n    return ab;\n};\n\nexport default aabb;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/geometries/AABB.js\n **/","/* eslint \"no-unused-vars\": \"off\" */\nimport {degToRad, radToDeg, crossProduct2D, dotProduct2D, distance, map} from '../math/math';\nimport vector, {Vector} from '../math/Vector';\nimport ray from '../geometries/Ray';\n\nlet Wave = {\n    init: function(options) {\n        options = options || {};\n        const speedOfLight = 299792458;\n        this.children = [];\n        //this.outerBodies = [];\n        this.style = {\n            lineWidth: options.lineWidth || 1,\n            strokeStyle: options.strokeStyle || '#456abc',\n            opacity: options.opacity || 1.0\n        };\n\n        this.x = options.x || 10;\n        this.y = options.y || 10;\n        this.position = vector(options.x, options.y);\n        this.waveSpeed = options.waveSpeed || speedOfLight;\n        this.frequency = options.frequency || 1000;\n        this.wavelength = this.waveSpeed / this.frequency;  // Computed Property\n        this.velocity = options.velocity || vector(0, 0);\n        this.direction = options.direction || 0;\n        this.mode = options.mode || 'RADIAN';\n        this.intensity = options.intensity || 1;\n        this.type = options.type || 'incident';\n        this.parent = options.parent || null;\n        this.n1 = options.n1 || 1;\n        this.n2 = options.n2 || 1;\n        this.lastIntersection = {};\n\n        // create ray for detecting body intersections\n        this.ray = ray(this.position.x, this.y, this.direction, this.mode === 'DEGREES' || null);\n    },\n\n    update: function(system) {\n        this.ray.trace(system);\n\n        // Remove children on every update\n        this.children = [];\n        // If the ray intersected a point...\n        if (this.ray.intersectionPoint) {\n            this.lastIntersection = this.ray.intersectionPoint;\n            this.children = this.createChildren();\n\n            this.children.forEach(child => {\n                child.update(system);\n            });\n        }\n    },\n    createChildren: function() {\n        //Vector implementation of reflected and refracted waves here:\n        //http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf\n        //Normalize ray vector = this.ray.direction\n\n        // Find the normal vector (method of which depends on type of body)\n        // There are two possible normal vectors, but\n        // which one do we want?\n        // one which dot product with ray vector < 0 is what we want\n        // http://gamedev.stackexchange.com/questions/85850/collision-intersection-of-2d-ray-to-line-segment\n        let normal;\n\n        //selectNormal();\n        // TODO: Wrap this in it's own function (i.e. findNormal function)\n        let bType = this.ray.intersectingBody.type;\n        if (bType === 'rectangle' || bType === 'polygon') {\n            let intSeg = this.ray.intersectingSegment;\n\n            intSeg.normalize();\n            let dot = intSeg.dot(this.ray.direction);\n            let normals = [vector(-intSeg.y, intSeg.x), vector(intSeg.y, -intSeg.x)];\n\n            let that = this;\n            normals.forEach(n => {\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n        } else if (bType === 'circle') {\n            let cx = this.ray.intersectingBody.position.x;\n            let cy = this.ray.intersectingBody.position.y;\n            let ix = this.ray.intersectionPoint.x;\n            let iy = this.ray.intersectionPoint.y;\n            let v1 = vector(ix - cx, iy - cy),\n                v2 = vector(cx - ix, cy - iy);\n            v1.normalize();\n            v2.normalize();\n            let normals = [\n                v1,\n                v2\n            ];\n            let that = this;\n            normals.forEach(function(n) {\n                //n.normalize();\n                if (n.dot(that.ray.direction) < 0) {\n                    normal = n;\n                }\n            });\n            if (normal === undefined) {\n                // We intersect at a tangent on a circle???\n                // TODO: Fix this!!!\n                normal = normals[0];\n            }\n        }\n\n        // child waves - reflected and refracted\n        // Calculate reflected vector\n        // https://en.wikipedia.org/wiki/Snell%27s_law#Vector_form\n        // http://stackoverflow.com/questions/5454661/reflection-how-do-i-do-it\n        // Reflected vector looks like this:\n        // r = a - 2(a dot n) * n\n        let tmpTerm = 2 * this.ray.direction.dot(normal);\n        let tmpVec = normal.clone();\n        tmpVec.multiply(2 * this.ray.direction.dot(normal));\n        let rVec = this.ray.direction.clone();\n        rVec.subtract(tmpVec);\n\n        // Refracted vector\n        // Are we inside a body?\n        // get origin points of wave, check if they are interior to the\n        // intersecting body, if so, n1 = body.refractiveIndex, if not, n1\n        // takes on refractive index of outer context,\n        // which we can find from it's parent wave\n        // If we have a body to intersect with...\n        if (this.type === 'incident' && this.ray.outerBodies.length > 0) {\n            //Grab the last one (the body on top)\n            this.n1 = this.ray.outerBodies[this.ray.outerBodies.length - 1].refractiveIndex;\n        }\n\n        // TODO: Figure out how to handle picking proper refractive index\n        // values\n        // for child rays\n        if (this.ray.intersectingBody) {\n            switch (this.type) {\n                case 'refracted':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.ray.intersectingBody) {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.parent.n1;\n                    } else {\n                        this.n1 = this.parent.n2;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'reflected':\n                    if (this.parent && this.parent.ray.intersectingBody &&\n                        this.parent.ray.intersectingBody === this.intersectingBody) {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.parent.n2;\n                    } else {\n                        this.n1 = this.parent.n1;\n                        this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    }\n                    break;\n                case 'incident':\n                    this.n2 = this.ray.intersectingBody.refractiveIndex;\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            // There's no intersection point ahead of this ray, so it's\n            // refractive indices are irrelevant\n            this.n1 = 1;\n            this.n2 = 1;\n            // If the ray won't intersect another body,\n            // then it must be outside of a body\n            //n2 = 1;\n\n            // n1 must take on the index of where the parent ray currently\n            // exists\n            //n1 = props.parent.intersectingBody.refractiveIndex;\n        }\n\n        let theta1 = Math.PI - this.ray.direction.angleTo(normal);\n        let theta2 = Math.asin(this.n1 * Math.sin(theta1) / this.n2);\n\n        // Vector formulation for refracted wave\n        // t = n1/n2 * rayVector + (n1/n2 * cos(theta1) - sqrt(1\n        // - sin2(theta2))) * normal\n        let sin2theta2 = (this.n1 / this.n2) * (this.n1 / this.n2) * (1 - (Math.cos(theta1) * Math.cos(theta1)));\n        let tVec = Vector.multiply((this.n1 / this.n2), this.ray.direction);\n        let normCopy = Vector.multiply(normal, (this.n1 / this.n2) * Math.cos(theta1) - Math.sqrt(1 - sin2theta2));\n        tVec.add(normCopy);\n\n        // Reflection Coefficient\n        // R = R0 + (1 - R0) * (1 - cos(theta1))^5 where R0 = (n1 - n2 / n1\n        // + n2)^2\n        let _r0 = (this.n1 - this.n2) / (this.n1 + this.n2);\n        let R0 = _r0 * _r0;\n        let _r0tmp;\n\n        // Angles must be positive, so if we get a negative value for an\n        // angle, just flip it\n        if (this.n1 <= this.n2) {\n            _r0tmp = (1 - (Math.cos(theta1) < 0 ? -Math.cos(theta1) : Math.cos(theta1)));\n        } else if (this.n1 > this.n2) {\n            _r0tmp = (1 - (Math.cos(theta2) < 0 ? -Math.cos(theta2) : Math.cos(theta2)));\n        }\n\n        // TODO: Refactor this to eliminate some checks if body is a mirror\n        let R = R0 + (1 - R0) * Math.pow(_r0tmp, 5);\n        let T = 1 - R;  // Refracion Coefficient\n        // Total Internal Reflection\n        if (Math.sin(theta1) > this.n2 / this.n1) {\n            R = 0.95;\n            T = 0;\n        }\n\n        // If the material should be treated as a mirror\n        if (this.ray.intersectingBody.mirror === true) {\n            R = 0.9;\n            T = 0;\n        }\n\n        let RI = this.intensity * R;\n        let TI = this.intensity * T;\n\n        // Add 2 child waves - reflected and refracted\n        // Trace reflected wave\n        // Have to offset the waves by at least a pixel,\n        // otherwise we'll end up in a never ending\n        // call stack when each child wave always produces\n        // 2 new child waves, forever...\n        let rVecAngle = rVec.getAngle();\n        let tVecAngle = tVec.getAngle();\n        let children = [];\n        if (RI > 0.01) {\n            let reflectedWave = wave({ // eslint-disable-line\n                x: this.ray.intersectionPoint.x + Math.cos(rVecAngle),\n                y: this.ray.intersectionPoint.y + Math.sin(rVecAngle),\n                direction: rVecAngle,\n                intensity: RI,\n                type: 'reflected',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(reflectedWave);\n        }\n\n        if (TI > 0.01) {\n            let refractedWave = wave({  // eslint-disable-line\n                x: this.ray.intersectionPoint.x - normal.x,\n                y: this.ray.intersectionPoint.y - normal.y,\n                direction: tVecAngle,\n                intensity: TI,\n                type: 'refracted',\n                parent: this,\n                n1: this.n1,\n                n2: this.n2,\n                lineWidth: this.style.lineWidth,\n                strokeStyle: this.style.strokeStyle\n            });\n            children.push(refractedWave);\n        }\n        return children;\n    }\n};\n\nconst wave = function(options) {\n    let W = Object.create(Wave);\n    W.init(options);\n    return W;\n};\n\nexport default wave;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Wave.js\n **/","import Body from './Body';\nimport aabb from '../geometries/AABB';\nimport {distance} from '../math/math';\n\nlet circle = function(options) {\n    options = options || {};\n    let B = Object.create(Body);\n    B.init(options);\n\n    B.radius = options.radius || 10;\n    B.scaledRadius = B.radius;\n    B.type = 'circle';\n    B.aabb = aabb(B);\n\n    B.isPointInterior = function(x, y) {\n        let bx = B.position.x,\n            by = B.position.y;\n        if (distance(x, y, bx, by) <= B.scaledRadius) {\n            return true;\n        }\n        return false;\n    };\n\n    return B;\n};\n\nexport default circle;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Circle.js\n **/","import Body from './Body';\nimport aabb from '../geometries/AABB';\nimport vector from '../math/Vector';\n\nvar polygon = function(options) {\n    options = options || {};\n\n    var B = Object.create(Body);\n    if (!options.vertices) {\n        throw new Error('Polygons MUST be initialized with vertices. See docs.');\n    }\n    B.init(options);\n\n    // Set type\n    B.type = 'polygon';\n\n    //Initialize vetices as vectors\n    // private vertices, relative to x and y\n    B._relativeVertices = [];\n\n    // public vertices, (contain world coords);\n    B.vertices = [];\n\n    options.vertices.forEach(vert => {\n        B._relativeVertices.push(vector(vert.x, vert.y));\n        B.vertices.push(vector(options.x + vert.x, options.y + vert.y));\n    });\n\n    // Update all vertices based on position\n    B.updateVertices = function() {\n        B.centroid = {x: 0, y: 0};\n        B.vertices.forEach((vert, index) => {\n            let relVert = B._relativeVertices[index];\n            vert.x = relVert.x + B.position.x;\n            vert.y = relVert.y + B.position.y;\n\n            B.centroid.x += vert.x;\n            B.centroid.y += vert.y;\n        });\n\n        B.centroid.x /= B.vertices.length;\n        B.centroid.y /= B.vertices.length;\n\n        // Update rotate vertices if necessary\n        if (B.angularVelocity !== 0 || B._rotation !== 0 || B._scale !== 0) {\n            B.vertices.forEach(vert => {\n                vert.translate(-B.centroid.x, -B.centroid.y)\n                    .rotate(this._rotation)\n                    .multiply(this._scale)\n                    .translate(B.centroid.x, B.centroid.y);\n            });\n        }\n    };\n\n    B.isPointInterior = function(x, y) {\n        var inside = false;\n        for (var i = 0, j = B.vertices.length - 1; i < B.vertices.length; j = i++) {\n            let vi = B.vertices[i];\n            let vj = B.vertices[j];\n            var xi = vi.x,\n                yi = vi.y;\n            var xj = vj.x,\n                yj = vj.y;\n\n            var intersect = ((yi > y) !== (yj > y)) &&\n                (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return inside;\n    };\n\n    // Initialize...\n    B.updateVertices();\n    B.aabb = aabb(B);\n    return B;\n};\n\nexport default polygon;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/bodies/Polygon.js\n **/"],"sourceRoot":""}